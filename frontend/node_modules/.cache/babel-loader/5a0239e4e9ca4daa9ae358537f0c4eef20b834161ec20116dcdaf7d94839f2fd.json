{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/pages/LobbyPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useTelegram } from '../contexts/TelegramContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport WordleBoard from '../components/WordleGame/WordleBoard';\nimport WordleKeyboard from '../components/WordleGame/WordleKeyboard';\nimport Button from '../components/UI/Button';\nimport LoadingScreen from '../components/LoadingScreen';\n\n// Контейнер страницы\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageContainer = styled.div`\n  padding: 16px;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n`;\n\n// Шапка с информацией\n_c = PageContainer;\nconst Header = styled.div`\n  margin-bottom: 20px;\n`;\n\n// Заголовок игры\n_c2 = Header;\nconst GameTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0 0 8px 0;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Информация об игре\n_c3 = GameTitle;\nconst GameInfo = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 16px;\n`;\n\n// Блок с отдельной информацией\n_c4 = GameInfo;\nconst InfoItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 120px;\n`;\n\n// Заголовок информации\n_c5 = InfoItem;\nconst InfoLabel = styled.span`\n  font-size: 12px;\n  color: var(--tg-theme-hint-color, #999999);\n`;\n\n// Значение информации\n_c6 = InfoLabel;\nconst InfoValue = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Блок с результатом игры\n_c7 = InfoValue;\nconst ResultPanel = styled.div`\n  background-color: ${props => props.success ? 'rgba(106, 170, 100, 0.2)' : 'rgba(231, 87, 87, 0.2)'};\n  border-radius: 12px;\n  padding: 16px;\n  margin: 20px 0;\n  text-align: center;\n`;\n\n// Текст результата\n_c8 = ResultPanel;\nconst ResultText = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  color: ${props => props.success ? '#6aaa64' : '#e75757'};\n  margin: 0 0 10px 0;\n`;\n\n// Текст награды\n_c9 = ResultText;\nconst RewardText = styled.p`\n  font-size: 16px;\n  margin: 0;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Таймер до истечения времени лобби\n_c0 = RewardText;\nconst Timer = styled.div`\n  font-size: 14px;\n  color: ${props => props.warning ? '#ff3b30' : 'var(--tg-theme-hint-color, #999999)'};\n  text-align: center;\n  margin-bottom: 16px;\n`;\n\n// Панель с действиями\n_c1 = Timer;\nconst ActionPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n`;\n_c10 = ActionPanel;\nconst LobbyPage = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    tg,\n    isReady\n  } = useTelegram();\n  const {\n    user\n  } = useAuth();\n\n  // Состояния компонента\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lobby, setLobby] = useState(null);\n  const [game, setGame] = useState(null);\n  const [attempts, setAttempts] = useState([]);\n  const [currentAttempt, setCurrentAttempt] = useState('');\n  const [letterStatuses, setLetterStatuses] = useState({});\n  const [timeLeft, setTimeLeft] = useState(null);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [success, setSuccess] = useState(false);\n\n  // Загрузка данных лобби и игры\n  useEffect(() => {\n    const fetchLobbyData = async () => {\n      try {\n        setLoading(true);\n\n        // Получаем данные о лобби\n        const lobbyResponse = await api.lobby.get(id);\n        const lobbyData = lobbyResponse.data;\n        setLobby(lobbyData);\n\n        // Получаем данные об игре\n        const gameResponse = await api.game.get(lobbyData.game_id);\n        const gameData = gameResponse.data;\n        setGame(gameData);\n\n        // Получаем историю попыток\n        const attemptsResponse = await api.lobby.getAttempts(id);\n        setAttempts(attemptsResponse.data || []);\n\n        // Обновляем статусы букв на основе попыток\n        updateLetterStatuses(attemptsResponse.data || []);\n\n        // Проверяем статус лобби\n        if (lobbyData.status === 'success') {\n          setGameEnded(true);\n          setSuccess(true);\n        } else if (lobbyData.status === 'failed') {\n          setGameEnded(true);\n          setSuccess(false);\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Ошибка при загрузке данных лобби:', err);\n        setError('Не удалось загрузить данные игры');\n        setLoading(false);\n      }\n    };\n    fetchLobbyData();\n  }, [id]);\n\n  // Обновление статусов букв\n  const updateLetterStatuses = attempts => {\n    const statuses = {};\n    attempts.forEach(attempt => {\n      const word = attempt.word.toLowerCase();\n      const result = attempt.result;\n      for (let i = 0; i < word.length; i++) {\n        const letter = word[i];\n        const currentStatus = statuses[letter];\n        const newStatus = result[i] === 2 ? 'correct' : result[i] === 1 ? 'present' : 'absent';\n\n        // Приоритет статусов: correct > present > absent\n        if (currentStatus === 'correct') {\n          continue;\n        } else if (currentStatus === 'present' && newStatus !== 'correct') {\n          continue;\n        }\n        statuses[letter] = newStatus;\n      }\n    });\n    setLetterStatuses(statuses);\n  };\n\n  // Отслеживание времени до истечения лобби\n  useEffect(() => {\n    if (!lobby || gameEnded) return;\n    const calculateTimeLeft = () => {\n      const now = new Date();\n      const expiresAt = new Date(lobby.expires_at);\n      const difference = expiresAt - now;\n      if (difference <= 0) {\n        // Время истекло\n        setTimeLeft(0);\n        setGameEnded(true);\n        setSuccess(false);\n        return;\n      }\n\n      // Формат времени: MM:SS\n      const minutes = Math.floor(difference / 1000 / 60 % 60);\n      const seconds = Math.floor(difference / 1000 % 60);\n      return {\n        minutes,\n        seconds,\n        total: difference\n      };\n    };\n    const timer = setInterval(() => {\n      const timeLeftValue = calculateTimeLeft();\n      if (!timeLeftValue) {\n        clearInterval(timer);\n      } else {\n        setTimeLeft(timeLeftValue);\n      }\n    }, 1000);\n\n    // Начальный расчет времени\n    setTimeLeft(calculateTimeLeft());\n    return () => clearInterval(timer);\n  }, [lobby, gameEnded]);\n\n  // Обработка нажатия на клавишу\n  const handleKeyPress = useCallback(key => {\n    if (gameEnded || !game) return;\n    if (key === 'Backspace') {\n      // Удаляем последнюю букву\n      setCurrentAttempt(prev => prev.slice(0, -1));\n    } else if (key === 'Enter') {\n      // Проверяем и отправляем попытку\n      if (currentAttempt.length === game.length) {\n        submitAttempt();\n      }\n    } else if (/^[а-яё]$/.test(key.toLowerCase())) {\n      // Добавляем букву (если не достигнута максимальная длина)\n      if (currentAttempt.length < game.length) {\n        setCurrentAttempt(prev => prev + key.toLowerCase());\n      }\n    }\n  }, [currentAttempt, game, gameEnded]);\n\n  // Отправка попытки на сервер\n  const submitAttempt = async () => {\n    try {\n      const response = await api.lobby.makeAttempt(id, {\n        word: currentAttempt\n      });\n\n      // Добавляем новую попытку в список\n      const newAttempt = {\n        word: currentAttempt,\n        result: response.data.result\n      };\n      setAttempts(prev => [...prev, newAttempt]);\n      updateLetterStatuses([...attempts, newAttempt]);\n      setCurrentAttempt('');\n\n      // Проверка на победу или проигрыш\n      if (response.data.status === 'success') {\n        setGameEnded(true);\n        setSuccess(true);\n      } else if (response.data.status === 'failed' || attempts.length + 1 >= lobby.max_tries) {\n        setGameEnded(true);\n        setSuccess(false);\n      }\n    } catch (err) {\n      console.error('Ошибка при отправке попытки:', err);\n      // Можно показать сообщение об ошибке\n    }\n  };\n\n  // Обработка продления времени\n  const handleExtendTime = async () => {\n    try {\n      await api.lobby.extendTime(id, {\n        duration: 5\n      }); // Продление на 5 минут\n\n      // Обновляем данные лобби для обновления времени\n      const response = await api.lobby.get(id);\n      setLobby(response.data);\n    } catch (err) {\n      console.error('Ошибка при продлении времени:', err);\n    }\n  };\n\n  // Настройка кнопок Telegram\n  useEffect(() => {\n    if (!isReady || !tg) return;\n    if (gameEnded) {\n      // Если игра завершена, предлагаем вернуться к списку игр\n      tg.MainButton.setText('Вернуться к играм');\n      tg.MainButton.show();\n      tg.MainButton.onClick(() => navigate('/'));\n    } else {\n      tg.MainButton.hide();\n    }\n\n    // Показываем кнопку \"Назад\"\n    tg.BackButton.show();\n    tg.BackButton.onClick(() => navigate(-1));\n    return () => {\n      tg.MainButton.hide();\n      tg.BackButton.hide();\n    };\n  }, [isReady, tg, gameEnded, navigate]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingScreen, {\n      text: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430 \\u0438\\u0433\\u0440\\u044B...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 16\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(PageContainer, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: 'center',\n          margin: '40px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => navigate('/'),\n          children: \"\\u0412\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\\u0441\\u044F \\u043A \\u0438\\u0433\\u0440\\u0430\\u043C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(PageContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(GameTitle, {\n        children: game.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameInfo, {\n        children: [/*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n            children: \"\\u0421\\u0442\\u0430\\u0432\\u043A\\u0430\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n            children: [lobby.bet_amount, \" \", game.currency]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n            children: \"\\u0412\\u043E\\u0437\\u043C\\u043E\\u0436\\u043D\\u044B\\u0439 \\u0432\\u044B\\u0438\\u0433\\u0440\\u044B\\u0448\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n            children: [lobby.potential_reward, \" \", game.currency]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InfoItem, {\n          children: [/*#__PURE__*/_jsxDEV(InfoLabel, {\n            children: \"\\u041F\\u043E\\u043F\\u044B\\u0442\\u043A\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(InfoValue, {\n            children: [attempts.length, \"/\", lobby.max_tries]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 17\n      }, this), !gameEnded && timeLeft && /*#__PURE__*/_jsxDEV(Timer, {\n        warning: timeLeft.total < 60000,\n        children: [\"\\u041E\\u0441\\u0442\\u0430\\u043B\\u043E\\u0441\\u044C \\u0432\\u0440\\u0435\\u043C\\u0435\\u043D\\u0438: \", timeLeft.minutes.toString().padStart(2, '0'), \":\", timeLeft.seconds.toString().padStart(2, '0')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(WordleBoard, {\n      attempts: attempts,\n      maxTries: lobby.max_tries,\n      wordLength: game.length,\n      currentAttempt: currentAttempt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }, this), gameEnded && /*#__PURE__*/_jsxDEV(ResultPanel, {\n      success: success,\n      children: [/*#__PURE__*/_jsxDEV(ResultText, {\n        success: success,\n        children: success ? 'Вы выиграли!' : 'Вы проиграли!'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }, this), success && /*#__PURE__*/_jsxDEV(RewardText, {\n        children: [\"\\u0412\\u0430\\u0448 \\u0432\\u044B\\u0438\\u0433\\u0440\\u044B\\u0448: \", lobby.potential_reward, \" \", game.currency]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 25\n      }, this), !success && /*#__PURE__*/_jsxDEV(RewardText, {\n        children: [\"\\u0417\\u0430\\u0433\\u0430\\u0434\\u0430\\u043D\\u043D\\u043E\\u0435 \\u0441\\u043B\\u043E\\u0432\\u043E: \", game.word.toUpperCase()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 17\n    }, this), !gameEnded && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(WordleKeyboard, {\n        onKeyPress: handleKeyPress,\n        letterStatuses: letterStatuses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ActionPanel, {\n        children: timeLeft && timeLeft.total < 300000 &&\n        /*#__PURE__*/\n        // Менее 5 минут\n        _jsxDEV(Button, {\n          onClick: handleExtendTime,\n          children: \"\\u041F\\u0440\\u043E\\u0434\\u043B\\u0438\\u0442\\u044C \\u0432\\u0440\\u0435\\u043C\\u044F (+5 \\u043C\\u0438\\u043D\\u0443\\u0442)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), gameEnded && /*#__PURE__*/_jsxDEV(ActionPanel, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => navigate('/'),\n        children: \"\\u0412\\u0435\\u0440\\u043D\\u0443\\u0442\\u044C\\u0441\\u044F \\u043A \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443 \\u0438\\u0433\\u0440\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 9\n  }, this);\n};\n_s(LobbyPage, \"oOTwo2TAoiHRxJ9Z5/9fnv5b/o8=\", false, function () {\n  return [useParams, useNavigate, useTelegram, useAuth];\n});\n_c11 = LobbyPage;\nexport default LobbyPage;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11;\n$RefreshReg$(_c, \"PageContainer\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"GameTitle\");\n$RefreshReg$(_c4, \"GameInfo\");\n$RefreshReg$(_c5, \"InfoItem\");\n$RefreshReg$(_c6, \"InfoLabel\");\n$RefreshReg$(_c7, \"InfoValue\");\n$RefreshReg$(_c8, \"ResultPanel\");\n$RefreshReg$(_c9, \"ResultText\");\n$RefreshReg$(_c0, \"RewardText\");\n$RefreshReg$(_c1, \"Timer\");\n$RefreshReg$(_c10, \"ActionPanel\");\n$RefreshReg$(_c11, \"LobbyPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","useNavigate","styled","useTelegram","useAuth","api","WordleBoard","WordleKeyboard","Button","LoadingScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","PageContainer","div","_c","Header","_c2","GameTitle","h1","_c3","GameInfo","_c4","InfoItem","_c5","InfoLabel","span","_c6","InfoValue","_c7","ResultPanel","props","success","_c8","ResultText","p","_c9","RewardText","_c0","Timer","warning","_c1","ActionPanel","_c10","LobbyPage","_s","id","navigate","tg","isReady","user","loading","setLoading","error","setError","lobby","setLobby","game","setGame","attempts","setAttempts","currentAttempt","setCurrentAttempt","letterStatuses","setLetterStatuses","timeLeft","setTimeLeft","gameEnded","setGameEnded","setSuccess","fetchLobbyData","lobbyResponse","get","lobbyData","data","gameResponse","game_id","gameData","attemptsResponse","getAttempts","updateLetterStatuses","status","err","console","statuses","forEach","attempt","word","toLowerCase","result","i","length","letter","currentStatus","newStatus","calculateTimeLeft","now","Date","expiresAt","expires_at","difference","minutes","Math","floor","seconds","total","timer","setInterval","timeLeftValue","clearInterval","handleKeyPress","key","prev","slice","submitAttempt","test","response","makeAttempt","newAttempt","max_tries","handleExtendTime","extendTime","duration","MainButton","setText","show","onClick","hide","BackButton","text","fileName","_jsxFileName","lineNumber","columnNumber","children","style","textAlign","margin","title","bet_amount","currency","potential_reward","toString","padStart","maxTries","wordLength","toUpperCase","onKeyPress","_c11","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/pages/LobbyPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { useTelegram } from '../contexts/TelegramContext';\nimport { useAuth } from '../contexts/AuthContext';\nimport api from '../services/api';\nimport WordleBoard from '../components/WordleGame/WordleBoard';\nimport WordleKeyboard from '../components/WordleGame/WordleKeyboard';\nimport Button from '../components/UI/Button';\nimport LoadingScreen from '../components/LoadingScreen';\n\n// Контейнер страницы\nconst PageContainer = styled.div`\n  padding: 16px;\n  max-width: 600px;\n  margin: 0 auto;\n  width: 100%;\n`;\n\n// Шапка с информацией\nconst Header = styled.div`\n  margin-bottom: 20px;\n`;\n\n// Заголовок игры\nconst GameTitle = styled.h1`\n  font-size: 20px;\n  font-weight: 700;\n  margin: 0 0 8px 0;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Информация об игре\nconst GameInfo = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n  margin-bottom: 16px;\n`;\n\n// Блок с отдельной информацией\nconst InfoItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-width: 120px;\n`;\n\n// Заголовок информации\nconst InfoLabel = styled.span`\n  font-size: 12px;\n  color: var(--tg-theme-hint-color, #999999);\n`;\n\n// Значение информации\nconst InfoValue = styled.span`\n  font-size: 16px;\n  font-weight: 500;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Блок с результатом игры\nconst ResultPanel = styled.div`\n  background-color: ${props => props.success ? 'rgba(106, 170, 100, 0.2)' : 'rgba(231, 87, 87, 0.2)'};\n  border-radius: 12px;\n  padding: 16px;\n  margin: 20px 0;\n  text-align: center;\n`;\n\n// Текст результата\nconst ResultText = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  color: ${props => props.success ? '#6aaa64' : '#e75757'};\n  margin: 0 0 10px 0;\n`;\n\n// Текст награды\nconst RewardText = styled.p`\n  font-size: 16px;\n  margin: 0;\n  color: var(--tg-theme-text-color, #000000);\n`;\n\n// Таймер до истечения времени лобби\nconst Timer = styled.div`\n  font-size: 14px;\n  color: ${props => props.warning ? '#ff3b30' : 'var(--tg-theme-hint-color, #999999)'};\n  text-align: center;\n  margin-bottom: 16px;\n`;\n\n// Панель с действиями\nconst ActionPanel = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-top: 20px;\n`;\n\nconst LobbyPage = () => {\n    const { id } = useParams();\n    const navigate = useNavigate();\n    const { tg, isReady } = useTelegram();\n    const { user } = useAuth();\n\n    // Состояния компонента\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [lobby, setLobby] = useState(null);\n    const [game, setGame] = useState(null);\n    const [attempts, setAttempts] = useState([]);\n    const [currentAttempt, setCurrentAttempt] = useState('');\n    const [letterStatuses, setLetterStatuses] = useState({});\n    const [timeLeft, setTimeLeft] = useState(null);\n    const [gameEnded, setGameEnded] = useState(false);\n    const [success, setSuccess] = useState(false);\n\n    // Загрузка данных лобби и игры\n    useEffect(() => {\n        const fetchLobbyData = async () => {\n            try {\n                setLoading(true);\n\n                // Получаем данные о лобби\n                const lobbyResponse = await api.lobby.get(id);\n                const lobbyData = lobbyResponse.data;\n                setLobby(lobbyData);\n\n                // Получаем данные об игре\n                const gameResponse = await api.game.get(lobbyData.game_id);\n                const gameData = gameResponse.data;\n                setGame(gameData);\n\n                // Получаем историю попыток\n                const attemptsResponse = await api.lobby.getAttempts(id);\n                setAttempts(attemptsResponse.data || []);\n\n                // Обновляем статусы букв на основе попыток\n                updateLetterStatuses(attemptsResponse.data || []);\n\n                // Проверяем статус лобби\n                if (lobbyData.status === 'success') {\n                    setGameEnded(true);\n                    setSuccess(true);\n                } else if (lobbyData.status === 'failed') {\n                    setGameEnded(true);\n                    setSuccess(false);\n                }\n\n                setLoading(false);\n            } catch (err) {\n                console.error('Ошибка при загрузке данных лобби:', err);\n                setError('Не удалось загрузить данные игры');\n                setLoading(false);\n            }\n        };\n\n        fetchLobbyData();\n    }, [id]);\n\n    // Обновление статусов букв\n    const updateLetterStatuses = (attempts) => {\n        const statuses = {};\n\n        attempts.forEach(attempt => {\n            const word = attempt.word.toLowerCase();\n            const result = attempt.result;\n\n            for (let i = 0; i < word.length; i++) {\n                const letter = word[i];\n                const currentStatus = statuses[letter];\n                const newStatus = result[i] === 2 ? 'correct' :\n                    result[i] === 1 ? 'present' :\n                        'absent';\n\n                // Приоритет статусов: correct > present > absent\n                if (currentStatus === 'correct') {\n                    continue;\n                } else if (currentStatus === 'present' && newStatus !== 'correct') {\n                    continue;\n                }\n\n                statuses[letter] = newStatus;\n            }\n        });\n\n        setLetterStatuses(statuses);\n    };\n\n    // Отслеживание времени до истечения лобби\n    useEffect(() => {\n        if (!lobby || gameEnded) return;\n\n        const calculateTimeLeft = () => {\n            const now = new Date();\n            const expiresAt = new Date(lobby.expires_at);\n            const difference = expiresAt - now;\n\n            if (difference <= 0) {\n                // Время истекло\n                setTimeLeft(0);\n                setGameEnded(true);\n                setSuccess(false);\n                return;\n            }\n\n            // Формат времени: MM:SS\n            const minutes = Math.floor((difference / 1000 / 60) % 60);\n            const seconds = Math.floor((difference / 1000) % 60);\n\n            return {\n                minutes,\n                seconds,\n                total: difference\n            };\n        };\n\n        const timer = setInterval(() => {\n            const timeLeftValue = calculateTimeLeft();\n            if (!timeLeftValue) {\n                clearInterval(timer);\n            } else {\n                setTimeLeft(timeLeftValue);\n            }\n        }, 1000);\n\n        // Начальный расчет времени\n        setTimeLeft(calculateTimeLeft());\n\n        return () => clearInterval(timer);\n    }, [lobby, gameEnded]);\n\n    // Обработка нажатия на клавишу\n    const handleKeyPress = useCallback((key) => {\n        if (gameEnded || !game) return;\n\n        if (key === 'Backspace') {\n            // Удаляем последнюю букву\n            setCurrentAttempt(prev => prev.slice(0, -1));\n        } else if (key === 'Enter') {\n            // Проверяем и отправляем попытку\n            if (currentAttempt.length === game.length) {\n                submitAttempt();\n            }\n        } else if (/^[а-яё]$/.test(key.toLowerCase())) {\n            // Добавляем букву (если не достигнута максимальная длина)\n            if (currentAttempt.length < game.length) {\n                setCurrentAttempt(prev => prev + key.toLowerCase());\n            }\n        }\n    }, [currentAttempt, game, gameEnded]);\n\n    // Отправка попытки на сервер\n    const submitAttempt = async () => {\n        try {\n            const response = await api.lobby.makeAttempt(id, { word: currentAttempt });\n\n            // Добавляем новую попытку в список\n            const newAttempt = {\n                word: currentAttempt,\n                result: response.data.result\n            };\n\n            setAttempts(prev => [...prev, newAttempt]);\n            updateLetterStatuses([...attempts, newAttempt]);\n            setCurrentAttempt('');\n\n            // Проверка на победу или проигрыш\n            if (response.data.status === 'success') {\n                setGameEnded(true);\n                setSuccess(true);\n            } else if (response.data.status === 'failed' ||\n                attempts.length + 1 >= lobby.max_tries) {\n                setGameEnded(true);\n                setSuccess(false);\n            }\n        } catch (err) {\n            console.error('Ошибка при отправке попытки:', err);\n            // Можно показать сообщение об ошибке\n        }\n    };\n\n    // Обработка продления времени\n    const handleExtendTime = async () => {\n        try {\n            await api.lobby.extendTime(id, { duration: 5 }); // Продление на 5 минут\n\n            // Обновляем данные лобби для обновления времени\n            const response = await api.lobby.get(id);\n            setLobby(response.data);\n        } catch (err) {\n            console.error('Ошибка при продлении времени:', err);\n        }\n    };\n\n    // Настройка кнопок Telegram\n    useEffect(() => {\n        if (!isReady || !tg) return;\n\n        if (gameEnded) {\n            // Если игра завершена, предлагаем вернуться к списку игр\n            tg.MainButton.setText('Вернуться к играм');\n            tg.MainButton.show();\n            tg.MainButton.onClick(() => navigate('/'));\n        } else {\n            tg.MainButton.hide();\n        }\n\n        // Показываем кнопку \"Назад\"\n        tg.BackButton.show();\n        tg.BackButton.onClick(() => navigate(-1));\n\n        return () => {\n            tg.MainButton.hide();\n            tg.BackButton.hide();\n        };\n    }, [isReady, tg, gameEnded, navigate]);\n\n    if (loading) {\n        return <LoadingScreen text=\"Загрузка игры...\" />;\n    }\n\n    if (error) {\n        return (\n            <PageContainer>\n                <div style={{ textAlign: 'center', margin: '40px 0' }}>\n                    <p>{error}</p>\n                    <Button onClick={() => navigate('/')}>Вернуться к играм</Button>\n                </div>\n            </PageContainer>\n        );\n    }\n\n    return (\n        <PageContainer>\n            <Header>\n                <GameTitle>{game.title}</GameTitle>\n\n                <GameInfo>\n                    <InfoItem>\n                        <InfoLabel>Ставка</InfoLabel>\n                        <InfoValue>{lobby.bet_amount} {game.currency}</InfoValue>\n                    </InfoItem>\n\n                    <InfoItem>\n                        <InfoLabel>Возможный выигрыш</InfoLabel>\n                        <InfoValue>{lobby.potential_reward} {game.currency}</InfoValue>\n                    </InfoItem>\n\n                    <InfoItem>\n                        <InfoLabel>Попытки</InfoLabel>\n                        <InfoValue>{attempts.length}/{lobby.max_tries}</InfoValue>\n                    </InfoItem>\n                </GameInfo>\n\n                {!gameEnded && timeLeft && (\n                    <Timer warning={timeLeft.total < 60000}>\n                        Осталось времени: {timeLeft.minutes.toString().padStart(2, '0')}:\n                        {timeLeft.seconds.toString().padStart(2, '0')}\n                    </Timer>\n                )}\n            </Header>\n\n            {/* Игровое поле */}\n            <WordleBoard\n                attempts={attempts}\n                maxTries={lobby.max_tries}\n                wordLength={game.length}\n                currentAttempt={currentAttempt}\n            />\n\n            {/* Результат игры */}\n            {gameEnded && (\n                <ResultPanel success={success}>\n                    <ResultText success={success}>\n                        {success ? 'Вы выиграли!' : 'Вы проиграли!'}\n                    </ResultText>\n                    {success && (\n                        <RewardText>\n                            Ваш выигрыш: {lobby.potential_reward} {game.currency}\n                        </RewardText>\n                    )}\n                    {!success && (\n                        <RewardText>\n                            Загаданное слово: {game.word.toUpperCase()}\n                        </RewardText>\n                    )}\n                </ResultPanel>\n            )}\n\n            {/* Клавиатура */}\n            {!gameEnded && (\n                <>\n                    <WordleKeyboard\n                        onKeyPress={handleKeyPress}\n                        letterStatuses={letterStatuses}\n                    />\n\n                    <ActionPanel>\n                        {timeLeft && timeLeft.total < 300000 && ( // Менее 5 минут\n                            <Button onClick={handleExtendTime}>\n                                Продлить время (+5 минут)\n                            </Button>\n                        )}\n                    </ActionPanel>\n                </>\n            )}\n\n            {gameEnded && (\n                <ActionPanel>\n                    <Button onClick={() => navigate('/')}>\n                        Вернуться к списку игр\n                    </Button>\n                </ActionPanel>\n            )}\n        </PageContainer>\n    );\n};\n\nexport default LobbyPage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AACzD,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,OAAO,QAAQ,yBAAyB;AACjD,OAAOC,GAAG,MAAM,iBAAiB;AACjC,OAAOC,WAAW,MAAM,sCAAsC;AAC9D,OAAOC,cAAc,MAAM,yCAAyC;AACpE,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,aAAa,MAAM,6BAA6B;;AAEvD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACA,MAAMC,aAAa,GAAGZ,MAAM,CAACa,GAAG;AAChC;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,EAAA,GAPMF,aAAa;AAQnB,MAAMG,MAAM,GAAGf,MAAM,CAACa,GAAG;AACzB;AACA,CAAC;;AAED;AAAAG,GAAA,GAJMD,MAAM;AAKZ,MAAME,SAAS,GAAGjB,MAAM,CAACkB,EAAE;AAC3B;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GAPMF,SAAS;AAQf,MAAMG,QAAQ,GAAGpB,MAAM,CAACa,GAAG;AAC3B;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAQ,GAAA,GAPMD,QAAQ;AAQd,MAAME,QAAQ,GAAGtB,MAAM,CAACa,GAAG;AAC3B;AACA;AACA;AACA,CAAC;;AAED;AAAAU,GAAA,GANMD,QAAQ;AAOd,MAAME,SAAS,GAAGxB,MAAM,CAACyB,IAAI;AAC7B;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GALMF,SAAS;AAMf,MAAMG,SAAS,GAAG3B,MAAM,CAACyB,IAAI;AAC7B;AACA;AACA;AACA,CAAC;;AAED;AAAAG,GAAA,GANMD,SAAS;AAOf,MAAME,WAAW,GAAG7B,MAAM,CAACa,GAAG;AAC9B,sBAAsBiB,KAAK,IAAIA,KAAK,CAACC,OAAO,GAAG,0BAA0B,GAAG,wBAAwB;AACpG;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GARMH,WAAW;AASjB,MAAMI,UAAU,GAAGjC,MAAM,CAACkC,CAAC;AAC3B;AACA;AACA,WAAWJ,KAAK,IAAIA,KAAK,CAACC,OAAO,GAAG,SAAS,GAAG,SAAS;AACzD;AACA,CAAC;;AAED;AAAAI,GAAA,GAPMF,UAAU;AAQhB,MAAMG,UAAU,GAAGpC,MAAM,CAACkC,CAAC;AAC3B;AACA;AACA;AACA,CAAC;;AAED;AAAAG,GAAA,GANMD,UAAU;AAOhB,MAAME,KAAK,GAAGtC,MAAM,CAACa,GAAG;AACxB;AACA,WAAWiB,KAAK,IAAIA,KAAK,CAACS,OAAO,GAAG,SAAS,GAAG,qCAAqC;AACrF;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GAPMF,KAAK;AAQX,MAAMG,WAAW,GAAGzC,MAAM,CAACa,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAAC6B,IAAA,GALID,WAAW;AAOjB,MAAME,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM;IAAEC;EAAG,CAAC,GAAG/C,SAAS,CAAC,CAAC;EAC1B,MAAMgD,QAAQ,GAAG/C,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAEgD,EAAE;IAAEC;EAAQ,CAAC,GAAG/C,WAAW,CAAC,CAAC;EACrC,MAAM;IAAEgD;EAAK,CAAC,GAAG/C,OAAO,CAAC,CAAC;;EAE1B;EACA,MAAM,CAACgD,OAAO,EAAEC,UAAU,CAAC,GAAGxD,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyD,KAAK,EAAEC,QAAQ,CAAC,GAAG1D,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC2D,KAAK,EAAEC,QAAQ,CAAC,GAAG5D,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAAC6D,IAAI,EAAEC,OAAO,CAAC,GAAG9D,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAAC+D,QAAQ,EAAEC,WAAW,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiE,cAAc,EAAEC,iBAAiB,CAAC,GAAGlE,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACmE,cAAc,EAAEC,iBAAiB,CAAC,GAAGpE,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxD,MAAM,CAACqE,QAAQ,EAAEC,WAAW,CAAC,GAAGtE,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACuE,SAAS,EAAEC,YAAY,CAAC,GAAGxE,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoC,OAAO,EAAEqC,UAAU,CAAC,GAAGzE,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAC,SAAS,CAAC,MAAM;IACZ,MAAMyE,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACAlB,UAAU,CAAC,IAAI,CAAC;;QAEhB;QACA,MAAMmB,aAAa,GAAG,MAAMnE,GAAG,CAACmD,KAAK,CAACiB,GAAG,CAAC1B,EAAE,CAAC;QAC7C,MAAM2B,SAAS,GAAGF,aAAa,CAACG,IAAI;QACpClB,QAAQ,CAACiB,SAAS,CAAC;;QAEnB;QACA,MAAME,YAAY,GAAG,MAAMvE,GAAG,CAACqD,IAAI,CAACe,GAAG,CAACC,SAAS,CAACG,OAAO,CAAC;QAC1D,MAAMC,QAAQ,GAAGF,YAAY,CAACD,IAAI;QAClChB,OAAO,CAACmB,QAAQ,CAAC;;QAEjB;QACA,MAAMC,gBAAgB,GAAG,MAAM1E,GAAG,CAACmD,KAAK,CAACwB,WAAW,CAACjC,EAAE,CAAC;QACxDc,WAAW,CAACkB,gBAAgB,CAACJ,IAAI,IAAI,EAAE,CAAC;;QAExC;QACAM,oBAAoB,CAACF,gBAAgB,CAACJ,IAAI,IAAI,EAAE,CAAC;;QAEjD;QACA,IAAID,SAAS,CAACQ,MAAM,KAAK,SAAS,EAAE;UAChCb,YAAY,CAAC,IAAI,CAAC;UAClBC,UAAU,CAAC,IAAI,CAAC;QACpB,CAAC,MAAM,IAAII,SAAS,CAACQ,MAAM,KAAK,QAAQ,EAAE;UACtCb,YAAY,CAAC,IAAI,CAAC;UAClBC,UAAU,CAAC,KAAK,CAAC;QACrB;QAEAjB,UAAU,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAO8B,GAAG,EAAE;QACVC,OAAO,CAAC9B,KAAK,CAAC,mCAAmC,EAAE6B,GAAG,CAAC;QACvD5B,QAAQ,CAAC,kCAAkC,CAAC;QAC5CF,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDkB,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,CAACxB,EAAE,CAAC,CAAC;;EAER;EACA,MAAMkC,oBAAoB,GAAIrB,QAAQ,IAAK;IACvC,MAAMyB,QAAQ,GAAG,CAAC,CAAC;IAEnBzB,QAAQ,CAAC0B,OAAO,CAACC,OAAO,IAAI;MACxB,MAAMC,IAAI,GAAGD,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC;MACvC,MAAMC,MAAM,GAAGH,OAAO,CAACG,MAAM;MAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;QAClC,MAAME,MAAM,GAAGL,IAAI,CAACG,CAAC,CAAC;QACtB,MAAMG,aAAa,GAAGT,QAAQ,CAACQ,MAAM,CAAC;QACtC,MAAME,SAAS,GAAGL,MAAM,CAACC,CAAC,CAAC,KAAK,CAAC,GAAG,SAAS,GACzCD,MAAM,CAACC,CAAC,CAAC,KAAK,CAAC,GAAG,SAAS,GACvB,QAAQ;;QAEhB;QACA,IAAIG,aAAa,KAAK,SAAS,EAAE;UAC7B;QACJ,CAAC,MAAM,IAAIA,aAAa,KAAK,SAAS,IAAIC,SAAS,KAAK,SAAS,EAAE;UAC/D;QACJ;QAEAV,QAAQ,CAACQ,MAAM,CAAC,GAAGE,SAAS;MAChC;IACJ,CAAC,CAAC;IAEF9B,iBAAiB,CAACoB,QAAQ,CAAC;EAC/B,CAAC;;EAED;EACAvF,SAAS,CAAC,MAAM;IACZ,IAAI,CAAC0D,KAAK,IAAIY,SAAS,EAAE;IAEzB,MAAM4B,iBAAiB,GAAGA,CAAA,KAAM;MAC5B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAAC1C,KAAK,CAAC4C,UAAU,CAAC;MAC5C,MAAMC,UAAU,GAAGF,SAAS,GAAGF,GAAG;MAElC,IAAII,UAAU,IAAI,CAAC,EAAE;QACjB;QACAlC,WAAW,CAAC,CAAC,CAAC;QACdE,YAAY,CAAC,IAAI,CAAC;QAClBC,UAAU,CAAC,KAAK,CAAC;QACjB;MACJ;;MAEA;MACA,MAAMgC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAAEH,UAAU,GAAG,IAAI,GAAG,EAAE,GAAI,EAAE,CAAC;MACzD,MAAMI,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,UAAU,GAAG,IAAI,GAAI,EAAE,CAAC;MAEpD,OAAO;QACHC,OAAO;QACPG,OAAO;QACPC,KAAK,EAAEL;MACX,CAAC;IACL,CAAC;IAED,MAAMM,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC5B,MAAMC,aAAa,GAAGb,iBAAiB,CAAC,CAAC;MACzC,IAAI,CAACa,aAAa,EAAE;QAChBC,aAAa,CAACH,KAAK,CAAC;MACxB,CAAC,MAAM;QACHxC,WAAW,CAAC0C,aAAa,CAAC;MAC9B;IACJ,CAAC,EAAE,IAAI,CAAC;;IAER;IACA1C,WAAW,CAAC6B,iBAAiB,CAAC,CAAC,CAAC;IAEhC,OAAO,MAAMc,aAAa,CAACH,KAAK,CAAC;EACrC,CAAC,EAAE,CAACnD,KAAK,EAAEY,SAAS,CAAC,CAAC;;EAEtB;EACA,MAAM2C,cAAc,GAAGhH,WAAW,CAAEiH,GAAG,IAAK;IACxC,IAAI5C,SAAS,IAAI,CAACV,IAAI,EAAE;IAExB,IAAIsD,GAAG,KAAK,WAAW,EAAE;MACrB;MACAjD,iBAAiB,CAACkD,IAAI,IAAIA,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIF,GAAG,KAAK,OAAO,EAAE;MACxB;MACA,IAAIlD,cAAc,CAAC8B,MAAM,KAAKlC,IAAI,CAACkC,MAAM,EAAE;QACvCuB,aAAa,CAAC,CAAC;MACnB;IACJ,CAAC,MAAM,IAAI,UAAU,CAACC,IAAI,CAACJ,GAAG,CAACvB,WAAW,CAAC,CAAC,CAAC,EAAE;MAC3C;MACA,IAAI3B,cAAc,CAAC8B,MAAM,GAAGlC,IAAI,CAACkC,MAAM,EAAE;QACrC7B,iBAAiB,CAACkD,IAAI,IAAIA,IAAI,GAAGD,GAAG,CAACvB,WAAW,CAAC,CAAC,CAAC;MACvD;IACJ;EACJ,CAAC,EAAE,CAAC3B,cAAc,EAAEJ,IAAI,EAAEU,SAAS,CAAC,CAAC;;EAErC;EACA,MAAM+C,aAAa,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMhH,GAAG,CAACmD,KAAK,CAAC8D,WAAW,CAACvE,EAAE,EAAE;QAAEyC,IAAI,EAAE1B;MAAe,CAAC,CAAC;;MAE1E;MACA,MAAMyD,UAAU,GAAG;QACf/B,IAAI,EAAE1B,cAAc;QACpB4B,MAAM,EAAE2B,QAAQ,CAAC1C,IAAI,CAACe;MAC1B,CAAC;MAED7B,WAAW,CAACoD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEM,UAAU,CAAC,CAAC;MAC1CtC,oBAAoB,CAAC,CAAC,GAAGrB,QAAQ,EAAE2D,UAAU,CAAC,CAAC;MAC/CxD,iBAAiB,CAAC,EAAE,CAAC;;MAErB;MACA,IAAIsD,QAAQ,CAAC1C,IAAI,CAACO,MAAM,KAAK,SAAS,EAAE;QACpCb,YAAY,CAAC,IAAI,CAAC;QAClBC,UAAU,CAAC,IAAI,CAAC;MACpB,CAAC,MAAM,IAAI+C,QAAQ,CAAC1C,IAAI,CAACO,MAAM,KAAK,QAAQ,IACxCtB,QAAQ,CAACgC,MAAM,GAAG,CAAC,IAAIpC,KAAK,CAACgE,SAAS,EAAE;QACxCnD,YAAY,CAAC,IAAI,CAAC;QAClBC,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC,CAAC,OAAOa,GAAG,EAAE;MACVC,OAAO,CAAC9B,KAAK,CAAC,8BAA8B,EAAE6B,GAAG,CAAC;MAClD;IACJ;EACJ,CAAC;;EAED;EACA,MAAMsC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACA,MAAMpH,GAAG,CAACmD,KAAK,CAACkE,UAAU,CAAC3E,EAAE,EAAE;QAAE4E,QAAQ,EAAE;MAAE,CAAC,CAAC,CAAC,CAAC;;MAEjD;MACA,MAAMN,QAAQ,GAAG,MAAMhH,GAAG,CAACmD,KAAK,CAACiB,GAAG,CAAC1B,EAAE,CAAC;MACxCU,QAAQ,CAAC4D,QAAQ,CAAC1C,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOQ,GAAG,EAAE;MACVC,OAAO,CAAC9B,KAAK,CAAC,+BAA+B,EAAE6B,GAAG,CAAC;IACvD;EACJ,CAAC;;EAED;EACArF,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoD,OAAO,IAAI,CAACD,EAAE,EAAE;IAErB,IAAImB,SAAS,EAAE;MACX;MACAnB,EAAE,CAAC2E,UAAU,CAACC,OAAO,CAAC,mBAAmB,CAAC;MAC1C5E,EAAE,CAAC2E,UAAU,CAACE,IAAI,CAAC,CAAC;MACpB7E,EAAE,CAAC2E,UAAU,CAACG,OAAO,CAAC,MAAM/E,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC,MAAM;MACHC,EAAE,CAAC2E,UAAU,CAACI,IAAI,CAAC,CAAC;IACxB;;IAEA;IACA/E,EAAE,CAACgF,UAAU,CAACH,IAAI,CAAC,CAAC;IACpB7E,EAAE,CAACgF,UAAU,CAACF,OAAO,CAAC,MAAM/E,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,OAAO,MAAM;MACTC,EAAE,CAAC2E,UAAU,CAACI,IAAI,CAAC,CAAC;MACpB/E,EAAE,CAACgF,UAAU,CAACD,IAAI,CAAC,CAAC;IACxB,CAAC;EACL,CAAC,EAAE,CAAC9E,OAAO,EAAED,EAAE,EAAEmB,SAAS,EAAEpB,QAAQ,CAAC,CAAC;EAEtC,IAAII,OAAO,EAAE;IACT,oBAAOzC,OAAA,CAACF,aAAa;MAACyH,IAAI,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpD;EAEA,IAAIhF,KAAK,EAAE;IACP,oBACI3C,OAAA,CAACG,aAAa;MAAAyH,QAAA,eACV5H,OAAA;QAAK6H,KAAK,EAAE;UAAEC,SAAS,EAAE,QAAQ;UAAEC,MAAM,EAAE;QAAS,CAAE;QAAAH,QAAA,gBAClD5H,OAAA;UAAA4H,QAAA,EAAIjF;QAAK;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACd3H,OAAA,CAACH,MAAM;UAACuH,OAAO,EAAEA,CAAA,KAAM/E,QAAQ,CAAC,GAAG,CAAE;UAAAuF,QAAA,EAAC;QAAiB;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK,CAAC;EAExB;EAEA,oBACI3H,OAAA,CAACG,aAAa;IAAAyH,QAAA,gBACV5H,OAAA,CAACM,MAAM;MAAAsH,QAAA,gBACH5H,OAAA,CAACQ,SAAS;QAAAoH,QAAA,EAAE7E,IAAI,CAACiF;MAAK;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eAEnC3H,OAAA,CAACW,QAAQ;QAAAiH,QAAA,gBACL5H,OAAA,CAACa,QAAQ;UAAA+G,QAAA,gBACL5H,OAAA,CAACe,SAAS;YAAA6G,QAAA,EAAC;UAAM;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC7B3H,OAAA,CAACkB,SAAS;YAAA0G,QAAA,GAAE/E,KAAK,CAACoF,UAAU,EAAC,GAAC,EAAClF,IAAI,CAACmF,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eAEX3H,OAAA,CAACa,QAAQ;UAAA+G,QAAA,gBACL5H,OAAA,CAACe,SAAS;YAAA6G,QAAA,EAAC;UAAiB;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACxC3H,OAAA,CAACkB,SAAS;YAAA0G,QAAA,GAAE/E,KAAK,CAACsF,gBAAgB,EAAC,GAAC,EAACpF,IAAI,CAACmF,QAAQ;UAAA;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD,CAAC,eAEX3H,OAAA,CAACa,QAAQ;UAAA+G,QAAA,gBACL5H,OAAA,CAACe,SAAS;YAAA6G,QAAA,EAAC;UAAO;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eAC9B3H,OAAA,CAACkB,SAAS;YAAA0G,QAAA,GAAE3E,QAAQ,CAACgC,MAAM,EAAC,GAAC,EAACpC,KAAK,CAACgE,SAAS;UAAA;YAAAW,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAY,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,EAEV,CAAClE,SAAS,IAAIF,QAAQ,iBACnBvD,OAAA,CAAC6B,KAAK;QAACC,OAAO,EAAEyB,QAAQ,CAACwC,KAAK,GAAG,KAAM;QAAA6B,QAAA,GAAC,+FAClB,EAACrE,QAAQ,CAACoC,OAAO,CAACyC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAC,GAChE,EAAC9E,QAAQ,CAACuC,OAAO,CAACsC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CACV;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAGT3H,OAAA,CAACL,WAAW;MACRsD,QAAQ,EAAEA,QAAS;MACnBqF,QAAQ,EAAEzF,KAAK,CAACgE,SAAU;MAC1B0B,UAAU,EAAExF,IAAI,CAACkC,MAAO;MACxB9B,cAAc,EAAEA;IAAe;MAAAqE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,EAGDlE,SAAS,iBACNzD,OAAA,CAACoB,WAAW;MAACE,OAAO,EAAEA,OAAQ;MAAAsG,QAAA,gBAC1B5H,OAAA,CAACwB,UAAU;QAACF,OAAO,EAAEA,OAAQ;QAAAsG,QAAA,EACxBtG,OAAO,GAAG,cAAc,GAAG;MAAe;QAAAkG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,EACZrG,OAAO,iBACJtB,OAAA,CAAC2B,UAAU;QAAAiG,QAAA,GAAC,iEACK,EAAC/E,KAAK,CAACsF,gBAAgB,EAAC,GAAC,EAACpF,IAAI,CAACmF,QAAQ;MAAA;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5C,CACf,EACA,CAACrG,OAAO,iBACLtB,OAAA,CAAC2B,UAAU;QAAAiG,QAAA,GAAC,+FACU,EAAC7E,IAAI,CAAC8B,IAAI,CAAC2D,WAAW,CAAC,CAAC;MAAA;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAChB,EAGA,CAAClE,SAAS,iBACPzD,OAAA,CAAAE,SAAA;MAAA0H,QAAA,gBACI5H,OAAA,CAACJ,cAAc;QACX6I,UAAU,EAAErC,cAAe;QAC3B/C,cAAc,EAAEA;MAAe;QAAAmE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eAEF3H,OAAA,CAACgC,WAAW;QAAA4F,QAAA,EACPrE,QAAQ,IAAIA,QAAQ,CAACwC,KAAK,GAAG,MAAM;QAAA;QAAM;QACtC/F,OAAA,CAACH,MAAM;UAACuH,OAAO,EAAEN,gBAAiB;UAAAc,QAAA,EAAC;QAEnC;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MACX;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACQ,CAAC;IAAA,eAChB,CACL,EAEAlE,SAAS,iBACNzD,OAAA,CAACgC,WAAW;MAAA4F,QAAA,eACR5H,OAAA,CAACH,MAAM;QAACuH,OAAO,EAAEA,CAAA,KAAM/E,QAAQ,CAAC,GAAG,CAAE;QAAAuF,QAAA,EAAC;MAEtC;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAChB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAExB,CAAC;AAACxF,EAAA,CA9TID,SAAS;EAAA,QACI7C,SAAS,EACPC,WAAW,EACJE,WAAW,EAClBC,OAAO;AAAA;AAAAiJ,IAAA,GAJtBxG,SAAS;AAgUf,eAAeA,SAAS;AAAC,IAAA7B,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAE,IAAA,EAAAyG,IAAA;AAAAC,YAAA,CAAAtI,EAAA;AAAAsI,YAAA,CAAApI,GAAA;AAAAoI,YAAA,CAAAjI,GAAA;AAAAiI,YAAA,CAAA/H,GAAA;AAAA+H,YAAA,CAAA7H,GAAA;AAAA6H,YAAA,CAAA1H,GAAA;AAAA0H,YAAA,CAAAxH,GAAA;AAAAwH,YAAA,CAAApH,GAAA;AAAAoH,YAAA,CAAAjH,GAAA;AAAAiH,YAAA,CAAA/G,GAAA;AAAA+G,YAAA,CAAA5G,GAAA;AAAA4G,YAAA,CAAA1G,IAAA;AAAA0G,YAAA,CAAAD,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}