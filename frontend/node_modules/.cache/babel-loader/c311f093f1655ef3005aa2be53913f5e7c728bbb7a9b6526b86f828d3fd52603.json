{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authAPI, userAPI } from '../api';\n\n// Создаем контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Провайдер контекста\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Инициализация пользователя при загрузке страницы\n  useEffect(() => {\n    const initAuth = async () => {\n      try {\n        setLoading(true);\n\n        // Проверяем наличие токена\n        const token = localStorage.getItem('token');\n        if (token) {\n          try {\n            // Проверяем валидность токена\n            await authAPI.verifyAuth(token);\n            // Получаем данные пользователя\n            const userData = await userAPI.getCurrentUser();\n            setUser(userData.data);\n            setLoading(false);\n            return;\n          } catch (err) {\n            // Если токен невалиден, удаляем его\n            localStorage.removeItem('token');\n          }\n        }\n\n        // Если нет токена или он невалиден, пробуем авторизацию через Telegram\n        if (window.Telegram && window.Telegram.WebApp) {\n          const initData = localStorage.getItem('telegram_init_data');\n          if (initData) {\n            const authData = await authAPI.telegramAuth();\n            if (authData.token) {\n              localStorage.setItem('token', authData.token);\n              const userData = await userAPI.getCurrentUser();\n              setUser(userData.data);\n            }\n          }\n        }\n      } catch (err) {\n        console.error('Auth initialization error:', err);\n        setError(err.message || 'Ошибка авторизации');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initAuth();\n  }, []);\n\n  // Функция выхода\n  const logout = async () => {\n    try {\n      await authAPI.logout();\n      localStorage.removeItem('token');\n      setUser(null);\n    } catch (err) {\n      console.error('Logout error:', err);\n      setError(err.message || 'Ошибка при выходе из системы');\n    }\n  };\n\n  // Обновление данных пользователя\n  const refreshUserData = async () => {\n    try {\n      setLoading(true);\n      const userData = await userAPI.getCurrentUser();\n      setUser(userData.data);\n    } catch (err) {\n      console.error('Error refreshing user data:', err);\n      setError(err.message || 'Ошибка обновления данных пользователя');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    logout,\n    refreshUserData,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 12\n  }, this);\n};\n\n// Хук для использования контекста\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","authAPI","userAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","initAuth","token","localStorage","getItem","verifyAuth","userData","getCurrentUser","data","err","removeItem","window","Telegram","WebApp","initData","authData","telegramAuth","setItem","console","message","logout","refreshUserData","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\nimport { authAPI, userAPI } from '../api';\n\n// Создаем контекст\nconst AuthContext = createContext(null);\n\n// Провайдер контекста\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Инициализация пользователя при загрузке страницы\n    useEffect(() => {\n        const initAuth = async () => {\n            try {\n                setLoading(true);\n\n                // Проверяем наличие токена\n                const token = localStorage.getItem('token');\n                if (token) {\n                    try {\n                        // Проверяем валидность токена\n                        await authAPI.verifyAuth(token);\n                        // Получаем данные пользователя\n                        const userData = await userAPI.getCurrentUser();\n                        setUser(userData.data);\n                        setLoading(false);\n                        return;\n                    } catch (err) {\n                        // Если токен невалиден, удаляем его\n                        localStorage.removeItem('token');\n                    }\n                }\n\n                // Если нет токена или он невалиден, пробуем авторизацию через Telegram\n                if (window.Telegram && window.Telegram.WebApp) {\n                    const initData = localStorage.getItem('telegram_init_data');\n                    if (initData) {\n                        const authData = await authAPI.telegramAuth();\n                        if (authData.token) {\n                            localStorage.setItem('token', authData.token);\n                            const userData = await userAPI.getCurrentUser();\n                            setUser(userData.data);\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error('Auth initialization error:', err);\n                setError(err.message || 'Ошибка авторизации');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        initAuth();\n    }, []);\n\n    // Функция выхода\n    const logout = async () => {\n        try {\n            await authAPI.logout();\n            localStorage.removeItem('token');\n            setUser(null);\n        } catch (err) {\n            console.error('Logout error:', err);\n            setError(err.message || 'Ошибка при выходе из системы');\n        }\n    };\n\n    // Обновление данных пользователя\n    const refreshUserData = async () => {\n        try {\n            setLoading(true);\n            const userData = await userAPI.getCurrentUser();\n            setUser(userData.data);\n        } catch (err) {\n            console.error('Error refreshing user data:', err);\n            setError(err.message || 'Ошибка обновления данных пользователя');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const value = {\n        user,\n        loading,\n        error,\n        logout,\n        refreshUserData,\n        isAuthenticated: !!user,\n    };\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Хук для использования контекста\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}