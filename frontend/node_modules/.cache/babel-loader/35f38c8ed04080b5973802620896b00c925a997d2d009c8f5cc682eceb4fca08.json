{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleKeyboard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Контейнер для клавиатуры\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KeyboardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 10px 0;\n`;\n\n// Ряд клавиатуры\n_c = KeyboardContainer;\nconst KeyboardRow = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 8px;\n`;\n\n// Стили для клавиши\n_c2 = KeyboardRow;\nconst Key = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 20px;\n  flex: ${props => props.flex || 1};\n  height: 48px;\n  margin: 0 3px;\n  border-radius: 4px;\n  border: none;\n  background-color: ${props => {\n  if (props.status === 'correct') return 'var(--tile-correct-color, #6aaa64)';\n  if (props.status === 'present') return 'var(--tile-present-color, #c9b458)';\n  if (props.status === 'absent') return 'var(--tile-absent-color, #787c7e)';\n  return 'var(--tg-theme-secondary-bg-color, #e1e1e1)';\n}};\n  color: ${props => {\n  if (props.status) return 'white';\n  return 'var(--tg-theme-text-color, #000000)';\n}};\n  font-weight: bold;\n  font-size: 14px;\n  text-transform: uppercase;\n  cursor: pointer;\n  user-select: none;\n  transition: all 0.2s;\n  \n  &:active {\n    opacity: 0.7;\n  }\n  \n  @media (max-width: 400px) {\n    height: 40px;\n    font-size: 12px;\n  }\n`;\n\n// Определение рядов клавиатуры\n_c3 = Key;\nconst firstRow = ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ'];\nconst secondRow = ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'];\nconst thirdRow = ['Enter', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'Backspace'];\n\n/**\n * Компонент клавиатуры для Wordle\n * @param {Object} props - Свойства компонента\n * @param {Function} props.onKeyPress - Обработчик нажатия на клавишу\n * @param {Object} props.letterStatuses - Объект со статусами букв ('correct', 'present', 'absent')\n */\nconst WordleKeyboard = ({\n  onKeyPress,\n  letterStatuses = {}\n}) => {\n  _s();\n  const handleKeyClick = key => {\n    onKeyPress(key);\n  };\n\n  // Функция создания ряда клавиатуры\n  const createKeyboardRow = keys => {\n    return /*#__PURE__*/_jsxDEV(KeyboardRow, {\n      children: keys.map(key => {\n        // Определяем размер специальных клавиш\n        let flex = 1;\n        if (key === 'Enter') flex = 1.5;\n        if (key === 'Backspace') flex = 1.5;\n\n        // Получаем статус буквы (если есть)\n        const status = letterStatuses[key.toLowerCase()];\n        return /*#__PURE__*/_jsxDEV(Key, {\n          flex: flex,\n          status: status,\n          onClick: () => handleKeyClick(key),\n          children: key === 'Backspace' ? '⌫' : key\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this);\n  };\n\n  // Глобальный обработчик нажатия клавиш на физической клавиатуре\n  React.useEffect(() => {\n    const handleKeyDown = e => {\n      const key = e.key.toLowerCase();\n      if (key === 'enter') {\n        onKeyPress('Enter');\n      } else if (key === 'backspace') {\n        onKeyPress('Backspace');\n      } else if (/^[а-яё]$/.test(key)) {\n        onKeyPress(key);\n      }\n    };\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [onKeyPress]);\n  return /*#__PURE__*/_jsxDEV(KeyboardContainer, {\n    children: [createKeyboardRow(firstRow), createKeyboardRow(secondRow), createKeyboardRow(thirdRow)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(WordleKeyboard, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c4 = WordleKeyboard;\nexport default WordleKeyboard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"KeyboardContainer\");\n$RefreshReg$(_c2, \"KeyboardRow\");\n$RefreshReg$(_c3, \"Key\");\n$RefreshReg$(_c4, \"WordleKeyboard\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","KeyboardContainer","div","_c","KeyboardRow","_c2","Key","button","props","flex","status","_c3","firstRow","secondRow","thirdRow","WordleKeyboard","onKeyPress","letterStatuses","_s","handleKeyClick","key","createKeyboardRow","keys","children","map","toLowerCase","onClick","fileName","_jsxFileName","lineNumber","columnNumber","useEffect","handleKeyDown","e","test","window","addEventListener","removeEventListener","_c4","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleKeyboard.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n// Контейнер для клавиатуры\nconst KeyboardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  max-width: 500px;\n  margin: 0 auto;\n  padding: 10px 0;\n`;\n\n// Ряд клавиатуры\nconst KeyboardRow = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  margin-bottom: 8px;\n`;\n\n// Стили для клавиши\nconst Key = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: 20px;\n  flex: ${props => props.flex || 1};\n  height: 48px;\n  margin: 0 3px;\n  border-radius: 4px;\n  border: none;\n  background-color: ${props => {\n        if (props.status === 'correct') return 'var(--tile-correct-color, #6aaa64)';\n        if (props.status === 'present') return 'var(--tile-present-color, #c9b458)';\n        if (props.status === 'absent') return 'var(--tile-absent-color, #787c7e)';\n        return 'var(--tg-theme-secondary-bg-color, #e1e1e1)';\n    }};\n  color: ${props => {\n        if (props.status) return 'white';\n        return 'var(--tg-theme-text-color, #000000)';\n    }};\n  font-weight: bold;\n  font-size: 14px;\n  text-transform: uppercase;\n  cursor: pointer;\n  user-select: none;\n  transition: all 0.2s;\n  \n  &:active {\n    opacity: 0.7;\n  }\n  \n  @media (max-width: 400px) {\n    height: 40px;\n    font-size: 12px;\n  }\n`;\n\n// Определение рядов клавиатуры\nconst firstRow = ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'х', 'ъ'];\nconst secondRow = ['ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'ж', 'э'];\nconst thirdRow = ['Enter', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'б', 'ю', 'Backspace'];\n\n/**\n * Компонент клавиатуры для Wordle\n * @param {Object} props - Свойства компонента\n * @param {Function} props.onKeyPress - Обработчик нажатия на клавишу\n * @param {Object} props.letterStatuses - Объект со статусами букв ('correct', 'present', 'absent')\n */\nconst WordleKeyboard = ({ onKeyPress, letterStatuses = {} }) => {\n    const handleKeyClick = (key) => {\n        onKeyPress(key);\n    };\n\n    // Функция создания ряда клавиатуры\n    const createKeyboardRow = (keys) => {\n        return (\n            <KeyboardRow>\n                {keys.map((key) => {\n                    // Определяем размер специальных клавиш\n                    let flex = 1;\n                    if (key === 'Enter') flex = 1.5;\n                    if (key === 'Backspace') flex = 1.5;\n\n                    // Получаем статус буквы (если есть)\n                    const status = letterStatuses[key.toLowerCase()];\n\n                    return (\n                        <Key\n                            key={key}\n                            flex={flex}\n                            status={status}\n                            onClick={() => handleKeyClick(key)}\n                        >\n                            {key === 'Backspace' ? '⌫' : key}\n                        </Key>\n                    );\n                })}\n            </KeyboardRow>\n        );\n    };\n\n    // Глобальный обработчик нажатия клавиш на физической клавиатуре\n    React.useEffect(() => {\n        const handleKeyDown = (e) => {\n            const key = e.key.toLowerCase();\n\n            if (key === 'enter') {\n                onKeyPress('Enter');\n            } else if (key === 'backspace') {\n                onKeyPress('Backspace');\n            } else if (/^[а-яё]$/.test(key)) {\n                onKeyPress(key);\n            }\n        };\n\n        window.addEventListener('keydown', handleKeyDown);\n\n        return () => {\n            window.removeEventListener('keydown', handleKeyDown);\n        };\n    }, [onKeyPress]);\n\n    return (\n        <KeyboardContainer>\n            {createKeyboardRow(firstRow)}\n            {createKeyboardRow(secondRow)}\n            {createKeyboardRow(thirdRow)}\n        </KeyboardContainer>\n    );\n};\n\nexport default WordleKeyboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}