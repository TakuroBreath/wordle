{"ast":null,"code":"import axios from 'axios';\n\n// Создаем экземпляр axios с базовым URL для API\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  },\n  withCredentials: false // Отключаем отправку куки для решения проблем с CORS\n});\n\n// Добавляем перехватчик для обработки ошибок\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.message === 'Network Error') {\n    console.error('Ошибка сети (возможно CORS):', error);\n  }\n  return Promise.reject(error);\n});\n\n// Функция для установки токена авторизации\nconst setAuthToken = token => {\n  console.log('Установка токена авторизации:', token ? 'токен установлен' : 'токен удален');\n  if (token) {\n    // Проверяем, начинается ли токен с \"Bearer \"\n    const bearerToken = token.startsWith('Bearer ') ? token : `Bearer ${token}`;\n    apiClient.defaults.headers.common['Authorization'] = bearerToken;\n    console.log('Установлен токен:', bearerToken.substring(0, 15) + '...');\n\n    // Сохраняем токен в localStorage для последующих запросов\n    localStorage.setItem('token', token);\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n    console.log('Токен авторизации удален');\n\n    // Удаляем токен из localStorage\n    localStorage.removeItem('token');\n  }\n  console.log('Текущие заголовки:', apiClient.defaults.headers);\n};\n\n// Функция для установки инициализационных данных Telegram Mini App\nconst setTelegramInitData = initData => {\n  if (initData) {\n    // Сохраняем текущий токен, если он есть\n    const currentToken = localStorage.getItem('token');\n    if (currentToken) {\n      // Если у нас уже есть токен, используем его вместо TMA данных\n      setAuthToken(currentToken);\n    } else {\n      // Иначе используем TMA данные\n      apiClient.defaults.headers.common['Authorization'] = `tma ${initData}`;\n      console.log('Установлены TMA данные в заголовок Authorization');\n    }\n  } else {\n    // Проверяем, есть ли сохраненный токен\n    const savedToken = localStorage.getItem('token');\n    if (savedToken) {\n      // Если есть сохраненный токен, используем его\n      setAuthToken(savedToken);\n    } else {\n      // Иначе удаляем заголовок авторизации\n      delete apiClient.defaults.headers.common['Authorization'];\n      console.log('Заголовок авторизации удален (нет TMA данных и сохраненного токена)');\n    }\n  }\n};\n\n// API для работы с аутентификацией\nconst auth = {\n  // Аутентификация через Telegram Mini App\n  telegramAuth: async data => {\n    console.log('Отправка запроса на аутентификацию:', data);\n    // Создаем отдельный экземпляр axios для запроса аутентификации\n    const authClient = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      },\n      withCredentials: false\n    });\n    try {\n      const response = await authClient.post('/auth/telegram', data);\n      console.log('Успешный ответ при аутентификации:', {\n        status: response.status,\n        data: response.data\n      });\n      return response;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error('Ошибка при аутентификации:', {\n        message: error.message,\n        response: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data,\n        status: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status\n      });\n      throw error;\n    }\n  },\n  // Проверка валидности токена\n  verifyToken: data => {\n    return apiClient.post('/auth/verify', data);\n  },\n  // Выход из аккаунта\n  logout: data => {\n    return apiClient.post('/auth/logout', data);\n  }\n};\n\n// API для работы с пользователями\nconst user = {\n  // Получение данных текущего пользователя\n  getCurrent: () => {\n    return apiClient.get('/users/me');\n  },\n  // Получение баланса пользователя\n  getBalance: () => {\n    return apiClient.get('/users/balance');\n  },\n  // Запрос на вывод средств\n  requestWithdraw: data => {\n    return apiClient.post('/users/withdraw', data);\n  },\n  // Получение истории выводов\n  getWithdrawHistory: params => {\n    return apiClient.get('/users/withdrawals', {\n      params\n    });\n  },\n  // Генерация адреса кошелька\n  generateWallet: () => {\n    return apiClient.post('/users/wallet');\n  }\n};\n\n// API для работы с играми\nconst game = {\n  // Создание новой игры\n  create: data => {\n    return apiClient.post('/games', data);\n  },\n  // Получение информации об игре по ID\n  get: id => {\n    return apiClient.get(`/games/${id}`);\n  },\n  // Получение списка активных игр\n  getActive: params => {\n    return apiClient.get('/games', {\n      params\n    });\n  },\n  // Получение списка игр, созданных пользователем\n  getMy: params => {\n    return apiClient.get('/games/my', {\n      params\n    });\n  },\n  // Удаление игры\n  delete: id => {\n    return apiClient.delete(`/games/${id}`);\n  },\n  // Пополнение reward pool игры\n  addReward: (id, data) => {\n    return apiClient.post(`/games/${id}/reward`, data);\n  },\n  // Активация игры\n  activate: id => {\n    return apiClient.post(`/games/${id}/activate`);\n  },\n  // Деактивация игры\n  deactivate: id => {\n    return apiClient.post(`/games/${id}/deactivate`);\n  }\n};\n\n// API для работы с лобби\nconst lobby = {\n  // Присоединение к игре (создание лобби)\n  join: async data => {\n    try {\n      // Проверяем наличие токена авторизации в заголовках\n      const authHeader = apiClient.defaults.headers.common['Authorization'];\n      console.log('Текущий заголовок авторизации:', authHeader ? 'Присутствует' : 'Отсутствует');\n      if (!authHeader) {\n        // Если токена нет в заголовках, проверяем localStorage\n        const token = localStorage.getItem('token');\n        console.log('Токен из localStorage:', token ? `${token.substring(0, 15)}...` : 'Отсутствует');\n        if (!token) {\n          // Проверяем, есть ли initData для режима разработки\n          if (process.env.NODE_ENV === 'development') {\n            console.log('Режим разработки: используем тестовый токен');\n            // В режиме разработки используем тестовый токен\n            const devToken = 'dev_test_token_for_development_only';\n            setAuthToken(devToken);\n            console.log('Установлен тестовый токен для режима разработки');\n          } else {\n            throw new Error('Требуется авторизация');\n          }\n        } else {\n          // Устанавливаем токен в заголовки запроса\n          setAuthToken(token);\n          console.log('Токен установлен из localStorage для запроса на создание лобби');\n        }\n      } else {\n        console.log('Токен авторизации уже присутствует в заголовках');\n      }\n\n      // Проверяем наличие необходимых данных\n      if (!data.game_id) {\n        throw new Error('ID игры не указан');\n      }\n      if (!data.bet_amount || data.bet_amount <= 0) {\n        throw new Error('Некорректная сумма ставки');\n      }\n      const requestData = {\n        game_id: data.game_id,\n        bet_amount: data.bet_amount\n      };\n\n      // Повторно проверяем заголовки перед отправкой запроса\n      const finalAuthHeader = apiClient.defaults.headers.common['Authorization'];\n      console.log('Финальный заголовок авторизации перед отправкой:', finalAuthHeader ? `${finalAuthHeader.substring(0, 20)}...` : 'Отсутствует');\n      console.log('Подготовка запроса на создание лобби:', {\n        url: '/lobbies',\n        method: 'POST',\n        data: requestData,\n        headers: {\n          ...apiClient.defaults.headers,\n          Authorization: apiClient.defaults.headers.common['Authorization'] ? apiClient.defaults.headers.common['Authorization'].substring(0, 20) + '...' : undefined\n        }\n      });\n      const response = await apiClient.post('/lobbies', requestData);\n      console.log('Успешный ответ сервера:', {\n        status: response.status,\n        data: response.data,\n        headers: response.headers\n      });\n\n      // Проверяем формат ответа и нормализуем его\n      if (response.data && !response.data.id && response.data.lobby) {\n        // Если сервер вернул данные в формате { lobby: { id: ... } }\n        response.data = response.data.lobby;\n      }\n      return response;\n    } catch (error) {\n      var _error$config, _error$config2, _error$config3, _error$config4, _error$config5, _error$config5$header, _error$config6, _error$config6$header, _error$response3, _error$response4, _error$response5, _error$response6, _error$response7, _error$response8, _error$response8$data, _error$response8$data2;\n      console.error('Ошибка при создании лобби:', {\n        message: error.message,\n        request: {\n          url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n          method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n          data: JSON.parse(((_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.data) || '{}'),\n          headers: {\n            ...((_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.headers),\n            Authorization: (_error$config5 = error.config) !== null && _error$config5 !== void 0 && (_error$config5$header = _error$config5.headers) !== null && _error$config5$header !== void 0 && _error$config5$header.Authorization ? ((_error$config6 = error.config) === null || _error$config6 === void 0 ? void 0 : (_error$config6$header = _error$config6.headers) === null || _error$config6$header === void 0 ? void 0 : _error$config6$header.Authorization.substring(0, 20)) + '...' : undefined\n          }\n        },\n        response: {\n          status: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status,\n          statusText: (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.statusText,\n          data: (_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data,\n          headers: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.headers\n        }\n      });\n\n      // Если это ошибка 500 и сообщение об отсутствии активного лобби,\n      // пробуем создать лобби еще раз\n      if (((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.status) === 500 && (_error$response8 = error.response) !== null && _error$response8 !== void 0 && (_error$response8$data = _error$response8.data) !== null && _error$response8$data !== void 0 && (_error$response8$data2 = _error$response8$data.error) !== null && _error$response8$data2 !== void 0 && _error$response8$data2.includes('active lobby not found')) {\n        console.log('Повторная попытка создания лобби...');\n        try {\n          // Используем те же данные, что и в первом запросе\n          const retryData = {\n            game_id: data.game_id,\n            bet_amount: data.bet_amount\n          };\n          const retryResponse = await apiClient.post('/lobbies', retryData);\n          console.log('Успешный ответ сервера при повторной попытке:', {\n            status: retryResponse.status,\n            data: retryResponse.data,\n            headers: retryResponse.headers\n          });\n          return retryResponse;\n        } catch (retryError) {\n          var _retryError$response, _retryError$response2, _retryError$config, _retryError$config2, _retryError$config3, _retryError$config4, _retryError$config5, _retryError$config5$h, _retryError$config6, _retryError$config6$h, _retryError$response3, _retryError$response4, _retryError$response5, _retryError$response6;\n          console.error('Ошибка при повторной попытке создания лобби:', {\n            status: (_retryError$response = retryError.response) === null || _retryError$response === void 0 ? void 0 : _retryError$response.status,\n            data: (_retryError$response2 = retryError.response) === null || _retryError$response2 === void 0 ? void 0 : _retryError$response2.data,\n            message: retryError.message,\n            request: {\n              url: (_retryError$config = retryError.config) === null || _retryError$config === void 0 ? void 0 : _retryError$config.url,\n              method: (_retryError$config2 = retryError.config) === null || _retryError$config2 === void 0 ? void 0 : _retryError$config2.method,\n              data: JSON.parse(((_retryError$config3 = retryError.config) === null || _retryError$config3 === void 0 ? void 0 : _retryError$config3.data) || '{}'),\n              headers: {\n                ...((_retryError$config4 = retryError.config) === null || _retryError$config4 === void 0 ? void 0 : _retryError$config4.headers),\n                Authorization: (_retryError$config5 = retryError.config) !== null && _retryError$config5 !== void 0 && (_retryError$config5$h = _retryError$config5.headers) !== null && _retryError$config5$h !== void 0 && _retryError$config5$h.Authorization ? ((_retryError$config6 = retryError.config) === null || _retryError$config6 === void 0 ? void 0 : (_retryError$config6$h = _retryError$config6.headers) === null || _retryError$config6$h === void 0 ? void 0 : _retryError$config6$h.Authorization.substring(0, 20)) + '...' : undefined\n              }\n            },\n            response: {\n              status: (_retryError$response3 = retryError.response) === null || _retryError$response3 === void 0 ? void 0 : _retryError$response3.status,\n              statusText: (_retryError$response4 = retryError.response) === null || _retryError$response4 === void 0 ? void 0 : _retryError$response4.statusText,\n              data: (_retryError$response5 = retryError.response) === null || _retryError$response5 === void 0 ? void 0 : _retryError$response5.data,\n              headers: (_retryError$response6 = retryError.response) === null || _retryError$response6 === void 0 ? void 0 : _retryError$response6.headers\n            }\n          });\n          throw retryError;\n        }\n      }\n      throw error;\n    }\n  },\n  // Получение информации о лобби по ID\n  get: id => {\n    return apiClient.get(`/lobbies/${id}`);\n  },\n  // Получение активного лобби пользователя\n  getActive: () => {\n    return apiClient.get('/lobbies/active');\n  },\n  // Получение всех лобби пользователя\n  getAll: params => {\n    return apiClient.get('/lobbies', {\n      params\n    });\n  },\n  // Отправка попытки угадать слово\n  makeAttempt: (id, data) => {\n    return apiClient.post(`/lobbies/${id}/attempt`, data);\n  },\n  // Получение истории попыток\n  getAttempts: id => {\n    return apiClient.get(`/lobbies/${id}/attempts`);\n  },\n  // Продление времени лобби\n  extendTime: (id, data) => {\n    return apiClient.post(`/lobbies/${id}/extend`, data);\n  }\n};\n\n// API для работы с транзакциями\nconst transaction = {\n  // Получение всех транзакций пользователя\n  getAll: params => {\n    return apiClient.get('/transactions', {\n      params\n    });\n  },\n  // Получение транзакции по ID\n  get: id => {\n    return apiClient.get(`/transactions/${id}`);\n  },\n  // Создание депозита\n  createDeposit: data => {\n    return apiClient.post('/transactions/deposit', data);\n  },\n  // Проверка статуса депозита\n  verifyDeposit: data => {\n    return apiClient.post('/transactions/verify', data);\n  }\n};\n\n// Собираем все API методы в один объект\nconst apiService = {\n  setAuthToken,\n  setTelegramInitData,\n  auth,\n  user,\n  game,\n  lobby,\n  transaction\n};\nexport default apiService;","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","withCredentials","interceptors","response","use","error","message","console","Promise","reject","setAuthToken","token","log","bearerToken","startsWith","defaults","common","substring","localStorage","setItem","removeItem","setTelegramInitData","initData","currentToken","getItem","savedToken","auth","telegramAuth","data","authClient","post","status","_error$response","_error$response2","verifyToken","logout","user","getCurrent","get","getBalance","requestWithdraw","getWithdrawHistory","params","generateWallet","game","id","getActive","getMy","delete","addReward","activate","deactivate","lobby","join","authHeader","NODE_ENV","devToken","Error","game_id","bet_amount","requestData","finalAuthHeader","url","method","Authorization","undefined","_error$config","_error$config2","_error$config3","_error$config4","_error$config5","_error$config5$header","_error$config6","_error$config6$header","_error$response3","_error$response4","_error$response5","_error$response6","_error$response7","_error$response8","_error$response8$data","_error$response8$data2","request","config","JSON","parse","statusText","includes","retryData","retryResponse","retryError","_retryError$response","_retryError$response2","_retryError$config","_retryError$config2","_retryError$config3","_retryError$config4","_retryError$config5","_retryError$config5$h","_retryError$config6","_retryError$config6$h","_retryError$response3","_retryError$response4","_retryError$response5","_retryError$response6","getAll","makeAttempt","getAttempts","extendTime","transaction","createDeposit","verifyDeposit","apiService"],"sources":["/Users/takuro/Projects/wordle/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Создаем экземпляр axios с базовым URL для API\nconst apiClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n    headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n    },\n    withCredentials: false // Отключаем отправку куки для решения проблем с CORS\n});\n\n// Добавляем перехватчик для обработки ошибок\napiClient.interceptors.response.use(\n    (response) => {\n        return response;\n    },\n    (error) => {\n        if (error.message === 'Network Error') {\n            console.error('Ошибка сети (возможно CORS):', error);\n        }\n        return Promise.reject(error);\n    }\n);\n\n// Функция для установки токена авторизации\nconst setAuthToken = (token) => {\n    console.log('Установка токена авторизации:', token ? 'токен установлен' : 'токен удален');\n    if (token) {\n        // Проверяем, начинается ли токен с \"Bearer \"\n        const bearerToken = token.startsWith('Bearer ') ? token : `Bearer ${token}`;\n        apiClient.defaults.headers.common['Authorization'] = bearerToken;\n        console.log('Установлен токен:', bearerToken.substring(0, 15) + '...');\n\n        // Сохраняем токен в localStorage для последующих запросов\n        localStorage.setItem('token', token);\n    } else {\n        delete apiClient.defaults.headers.common['Authorization'];\n        console.log('Токен авторизации удален');\n\n        // Удаляем токен из localStorage\n        localStorage.removeItem('token');\n    }\n    console.log('Текущие заголовки:', apiClient.defaults.headers);\n};\n\n// Функция для установки инициализационных данных Telegram Mini App\nconst setTelegramInitData = (initData) => {\n    if (initData) {\n        // Сохраняем текущий токен, если он есть\n        const currentToken = localStorage.getItem('token');\n        if (currentToken) {\n            // Если у нас уже есть токен, используем его вместо TMA данных\n            setAuthToken(currentToken);\n        } else {\n            // Иначе используем TMA данные\n            apiClient.defaults.headers.common['Authorization'] = `tma ${initData}`;\n            console.log('Установлены TMA данные в заголовок Authorization');\n        }\n    } else {\n        // Проверяем, есть ли сохраненный токен\n        const savedToken = localStorage.getItem('token');\n        if (savedToken) {\n            // Если есть сохраненный токен, используем его\n            setAuthToken(savedToken);\n        } else {\n            // Иначе удаляем заголовок авторизации\n            delete apiClient.defaults.headers.common['Authorization'];\n            console.log('Заголовок авторизации удален (нет TMA данных и сохраненного токена)');\n        }\n    }\n};\n\n// API для работы с аутентификацией\nconst auth = {\n    // Аутентификация через Telegram Mini App\n    telegramAuth: async (data) => {\n        console.log('Отправка запроса на аутентификацию:', data);\n        // Создаем отдельный экземпляр axios для запроса аутентификации\n        const authClient = axios.create({\n            baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            },\n            withCredentials: false\n        });\n\n        try {\n            const response = await authClient.post('/auth/telegram', data);\n            console.log('Успешный ответ при аутентификации:', {\n                status: response.status,\n                data: response.data\n            });\n            return response;\n        } catch (error) {\n            console.error('Ошибка при аутентификации:', {\n                message: error.message,\n                response: error.response?.data,\n                status: error.response?.status\n            });\n            throw error;\n        }\n    },\n\n    // Проверка валидности токена\n    verifyToken: (data) => {\n        return apiClient.post('/auth/verify', data);\n    },\n\n    // Выход из аккаунта\n    logout: (data) => {\n        return apiClient.post('/auth/logout', data);\n    },\n};\n\n// API для работы с пользователями\nconst user = {\n    // Получение данных текущего пользователя\n    getCurrent: () => {\n        return apiClient.get('/users/me');\n    },\n\n    // Получение баланса пользователя\n    getBalance: () => {\n        return apiClient.get('/users/balance');\n    },\n\n    // Запрос на вывод средств\n    requestWithdraw: (data) => {\n        return apiClient.post('/users/withdraw', data);\n    },\n\n    // Получение истории выводов\n    getWithdrawHistory: (params) => {\n        return apiClient.get('/users/withdrawals', { params });\n    },\n\n    // Генерация адреса кошелька\n    generateWallet: () => {\n        return apiClient.post('/users/wallet');\n    },\n};\n\n// API для работы с играми\nconst game = {\n    // Создание новой игры\n    create: (data) => {\n        return apiClient.post('/games', data);\n    },\n\n    // Получение информации об игре по ID\n    get: (id) => {\n        return apiClient.get(`/games/${id}`);\n    },\n\n    // Получение списка активных игр\n    getActive: (params) => {\n        return apiClient.get('/games', { params });\n    },\n\n    // Получение списка игр, созданных пользователем\n    getMy: (params) => {\n        return apiClient.get('/games/my', { params });\n    },\n\n    // Удаление игры\n    delete: (id) => {\n        return apiClient.delete(`/games/${id}`);\n    },\n\n    // Пополнение reward pool игры\n    addReward: (id, data) => {\n        return apiClient.post(`/games/${id}/reward`, data);\n    },\n\n    // Активация игры\n    activate: (id) => {\n        return apiClient.post(`/games/${id}/activate`);\n    },\n\n    // Деактивация игры\n    deactivate: (id) => {\n        return apiClient.post(`/games/${id}/deactivate`);\n    },\n};\n\n// API для работы с лобби\nconst lobby = {\n    // Присоединение к игре (создание лобби)\n    join: async (data) => {\n        try {\n            // Проверяем наличие токена авторизации в заголовках\n            const authHeader = apiClient.defaults.headers.common['Authorization'];\n            console.log('Текущий заголовок авторизации:', authHeader ? 'Присутствует' : 'Отсутствует');\n            \n            if (!authHeader) {\n                // Если токена нет в заголовках, проверяем localStorage\n                const token = localStorage.getItem('token');\n                console.log('Токен из localStorage:', token ? `${token.substring(0, 15)}...` : 'Отсутствует');\n                \n                if (!token) {\n                    // Проверяем, есть ли initData для режима разработки\n                    if (process.env.NODE_ENV === 'development') {\n                        console.log('Режим разработки: используем тестовый токен');\n                        // В режиме разработки используем тестовый токен\n                        const devToken = 'dev_test_token_for_development_only';\n                        setAuthToken(devToken);\n                        console.log('Установлен тестовый токен для режима разработки');\n                    } else {\n                        throw new Error('Требуется авторизация');\n                    }\n                } else {\n                    // Устанавливаем токен в заголовки запроса\n                    setAuthToken(token);\n                    console.log('Токен установлен из localStorage для запроса на создание лобби');\n                }\n            } else {\n                console.log('Токен авторизации уже присутствует в заголовках');\n            }\n\n            // Проверяем наличие необходимых данных\n            if (!data.game_id) {\n                throw new Error('ID игры не указан');\n            }\n            if (!data.bet_amount || data.bet_amount <= 0) {\n                throw new Error('Некорректная сумма ставки');\n            }\n\n            const requestData = {\n                game_id: data.game_id,\n                bet_amount: data.bet_amount\n            };\n\n            // Повторно проверяем заголовки перед отправкой запроса\n            const finalAuthHeader = apiClient.defaults.headers.common['Authorization'];\n            console.log('Финальный заголовок авторизации перед отправкой:', \n                finalAuthHeader ? `${finalAuthHeader.substring(0, 20)}...` : 'Отсутствует');\n\n            console.log('Подготовка запроса на создание лобби:', {\n                url: '/lobbies',\n                method: 'POST',\n                data: requestData,\n                headers: {\n                    ...apiClient.defaults.headers,\n                    Authorization: apiClient.defaults.headers.common['Authorization'] ? \n                        apiClient.defaults.headers.common['Authorization'].substring(0, 20) + '...' : undefined\n                }\n            });\n\n            const response = await apiClient.post('/lobbies', requestData);\n\n            console.log('Успешный ответ сервера:', {\n                status: response.status,\n                data: response.data,\n                headers: response.headers\n            });\n\n            // Проверяем формат ответа и нормализуем его\n            if (response.data && !response.data.id && response.data.lobby) {\n                // Если сервер вернул данные в формате { lobby: { id: ... } }\n                response.data = response.data.lobby;\n            }\n\n            return response;\n        } catch (error) {\n            console.error('Ошибка при создании лобби:', {\n                message: error.message,\n                request: {\n                    url: error.config?.url,\n                    method: error.config?.method,\n                    data: JSON.parse(error.config?.data || '{}'),\n                    headers: {\n                        ...error.config?.headers,\n                        Authorization: error.config?.headers?.Authorization ? \n                            error.config?.headers?.Authorization.substring(0, 20) + '...' : undefined\n                    }\n                },\n                response: {\n                    status: error.response?.status,\n                    statusText: error.response?.statusText,\n                    data: error.response?.data,\n                    headers: error.response?.headers\n                }\n            });\n\n            // Если это ошибка 500 и сообщение об отсутствии активного лобби,\n            // пробуем создать лобби еще раз\n            if (error.response?.status === 500 &&\n                error.response?.data?.error?.includes('active lobby not found')) {\n                console.log('Повторная попытка создания лобби...');\n                try {\n                    // Используем те же данные, что и в первом запросе\n                    const retryData = {\n                        game_id: data.game_id,\n                        bet_amount: data.bet_amount\n                    };\n                    const retryResponse = await apiClient.post('/lobbies', retryData);\n                    console.log('Успешный ответ сервера при повторной попытке:', {\n                        status: retryResponse.status,\n                        data: retryResponse.data,\n                        headers: retryResponse.headers\n                    });\n                    return retryResponse;\n                } catch (retryError) {\n                    console.error('Ошибка при повторной попытке создания лобби:', {\n                        status: retryError.response?.status,\n                        data: retryError.response?.data,\n                        message: retryError.message,\n                        request: {\n                            url: retryError.config?.url,\n                            method: retryError.config?.method,\n                            data: JSON.parse(retryError.config?.data || '{}'),\n                            headers: {\n                                ...retryError.config?.headers,\n                                Authorization: retryError.config?.headers?.Authorization ? \n                                    retryError.config?.headers?.Authorization.substring(0, 20) + '...' : undefined\n                            }\n                        },\n                        response: {\n                            status: retryError.response?.status,\n                            statusText: retryError.response?.statusText,\n                            data: retryError.response?.data,\n                            headers: retryError.response?.headers\n                        }\n                    });\n                    throw retryError;\n                }\n            }\n\n            throw error;\n        }\n    },\n\n    // Получение информации о лобби по ID\n    get: (id) => {\n        return apiClient.get(`/lobbies/${id}`);\n    },\n\n    // Получение активного лобби пользователя\n    getActive: () => {\n        return apiClient.get('/lobbies/active');\n    },\n\n    // Получение всех лобби пользователя\n    getAll: (params) => {\n        return apiClient.get('/lobbies', { params });\n    },\n\n    // Отправка попытки угадать слово\n    makeAttempt: (id, data) => {\n        return apiClient.post(`/lobbies/${id}/attempt`, data);\n    },\n\n    // Получение истории попыток\n    getAttempts: (id) => {\n        return apiClient.get(`/lobbies/${id}/attempts`);\n    },\n\n    // Продление времени лобби\n    extendTime: (id, data) => {\n        return apiClient.post(`/lobbies/${id}/extend`, data);\n    },\n};\n\n// API для работы с транзакциями\nconst transaction = {\n    // Получение всех транзакций пользователя\n    getAll: (params) => {\n        return apiClient.get('/transactions', { params });\n    },\n\n    // Получение транзакции по ID\n    get: (id) => {\n        return apiClient.get(`/transactions/${id}`);\n    },\n\n    // Создание депозита\n    createDeposit: (data) => {\n        return apiClient.post('/transactions/deposit', data);\n    },\n\n    // Проверка статуса депозита\n    verifyDeposit: (data) => {\n        return apiClient.post('/transactions/verify', data);\n    },\n};\n\n// Собираем все API методы в один объект\nconst apiService = {\n    setAuthToken,\n    setTelegramInitData,\n    auth,\n    user,\n    game,\n    lobby,\n    transaction,\n};\n\nexport default apiService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}