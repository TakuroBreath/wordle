{"ast":null,"code":"var We = Object.defineProperty;\nvar Ue = (s, e, t) => e in s ? We(s, e, {\n  enumerable: !0,\n  configurable: !0,\n  writable: !0,\n  value: t\n}) : s[e] = t;\nvar c = (s, e, t) => (Ue(s, typeof e != \"symbol\" ? e + \"\" : e, t), t);\nfunction oe(s, e) {\n  let t;\n  const n = () => {\n    t !== void 0 && e && e(t), t = void 0;\n  };\n  return [() => t === void 0 ? t = s(n) : t, n];\n}\nfunction ae(s) {\n  const e = M(),\n    {\n      count: t\n    } = e;\n  e.unsubscribe(s), t && !e.count && it();\n}\nfunction He(s) {\n  return M().subscribe(s), () => ae(s);\n}\nclass Oe {\n  constructor(e, t = {}) {\n    this.scope = e, this.options = t;\n  }\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  print(e, ...t) {\n    const n = /* @__PURE__ */new Date(),\n      r = Intl.DateTimeFormat(\"en-GB\", {\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        fractionalSecondDigits: 3,\n        timeZone: \"UTC\"\n      }).format(n),\n      {\n        textColor: i,\n        bgColor: o\n      } = this.options,\n      a = \"font-weight: bold;padding: 0 5px;border-radius:5px\";\n    console[e](`%c${r}%c / %c${this.scope}`, `${a};background-color: lightblue;color:black`, \"\", `${a};${i ? `color:${i};` : \"\"}${o ? `background-color:${o}` : \"\"}`, ...t);\n  }\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...e) {\n    this.print(\"error\", ...e);\n  }\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...e) {\n    this.print(\"log\", ...e);\n  }\n}\nconst F = new Oe(\"SDK\", {\n  bgColor: \"forestgreen\",\n  textColor: \"white\"\n});\nlet O = !1;\nconst se = ({\n  name: s,\n  payload: e\n}) => {\n  F.log(\"Event received:\", e ? {\n    name: s,\n    payload: e\n  } : {\n    name: s\n  });\n};\nfunction Kt(s) {\n  O !== s && (O = s, s ? He(se) : ae(se));\n}\nfunction Ge(...s) {\n  O && F.log(...s);\n}\nclass R {\n  constructor() {\n    c(this, \"listeners\", /* @__PURE__ */new Map());\n    c(this, \"listenersCount\", 0);\n    c(this, \"subscribeListeners\", []);\n  }\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear(), this.subscribeListeners = [];\n  }\n  /**\n   * Returns count of bound listeners.\n   */\n  get count() {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n  emit(e, ...t) {\n    this.subscribeListeners.forEach(r => r({\n      event: e,\n      args: t\n    })), (this.listeners.get(e) || []).forEach(([r, i]) => {\n      r(...t), i && this.off(e, r);\n    });\n  }\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on(e, t, n) {\n    let r = this.listeners.get(e);\n    return r || this.listeners.set(e, r = []), r.push([t, n]), this.listenersCount += 1, () => this.off(e, t);\n  }\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off(e, t) {\n    const n = this.listeners.get(e) || [];\n    for (let r = 0; r < n.length; r += 1) if (t === n[r][0]) {\n      n.splice(r, 1), this.listenersCount -= 1;\n      return;\n    }\n  }\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(e) {\n    return this.subscribeListeners.push(e), () => this.unsubscribe(e);\n  }\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(e) {\n    for (let t = 0; t < this.subscribeListeners.length; t += 1) if (this.subscribeListeners[t] === e) {\n      this.subscribeListeners.splice(t, 1);\n      return;\n    }\n  }\n}\nfunction G(s, e, t) {\n  return window.addEventListener(s, e, t), () => window.removeEventListener(s, e, t);\n}\nfunction J(...s) {\n  let e = !1;\n  const t = s.flat(1);\n  return [n => !e && t.push(n), () => {\n    e || (e = !0, t.forEach(n => n()));\n  }, e];\n}\nclass V extends Error {\n  constructor(e, t, n) {\n    super(t, {\n      cause: n\n    }), this.type = e, Object.setPrototypeOf(this, V.prototype);\n  }\n}\nfunction f(s, e, t) {\n  return new V(s, e, t);\n}\nconst je = \"ERR_METHOD_UNSUPPORTED\",\n  ze = \"ERR_METHOD_PARAMETER_UNSUPPORTED\",\n  Fe = \"ERR_UNKNOWN_ENV\",\n  Je = \"ERR_INVOKE_CUSTOM_METHOD_RESPONSE\",\n  Qe = \"ERR_TIMED_OUT\",\n  Ye = \"ERR_UNEXPECTED_TYPE\",\n  ce = \"ERR_PARSE\",\n  Ze = \"ERR_NAVIGATION_LIST_EMPTY\",\n  Ke = \"ERR_NAVIGATION_CURSOR_INVALID\",\n  Xt = \"ERR_NAVIGATION_ITEM_INVALID\",\n  es = \"ERR_SSR_INIT\",\n  Xe = \"ERR_INVALID_PATH_BASE\";\nfunction E() {\n  return f(Ye, \"Value has unexpected type\");\n}\nclass D {\n  constructor(e, t, n) {\n    this.parser = e, this.isOptional = t, this.type = n;\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(e) {\n    if (!(this.isOptional && e === void 0)) try {\n      return this.parser(e);\n    } catch (t) {\n      throw f(ce, `Unable to parse value${this.type ? ` as ${this.type}` : \"\"}`, t);\n    }\n  }\n  optional() {\n    return this.isOptional = !0, this;\n  }\n}\nfunction S(s, e) {\n  return () => new D(s, !1, e);\n}\nconst b = S(s => {\n  if (typeof s == \"boolean\") return s;\n  const e = String(s);\n  if (e === \"1\" || e === \"true\") return !0;\n  if (e === \"0\" || e === \"false\") return !1;\n  throw E();\n}, \"boolean\");\nfunction pe(s, e) {\n  const t = {};\n  for (const n in s) {\n    const r = s[n];\n    if (!r) continue;\n    let i, o;\n    if (typeof r == \"function\" || \"parse\" in r) i = n, o = typeof r == \"function\" ? r : r.parse.bind(r);else {\n      const {\n        type: a\n      } = r;\n      i = r.from || n, o = typeof a == \"function\" ? a : a.parse.bind(a);\n    }\n    try {\n      const a = o(e(i));\n      a !== void 0 && (t[n] = a);\n    } catch (a) {\n      throw f(ce, `Unable to parse field \"${n}\"`, a);\n    }\n  }\n  return t;\n}\nfunction he(s) {\n  let e = s;\n  if (typeof e == \"string\" && (e = JSON.parse(e)), typeof e != \"object\" || e === null || Array.isArray(e)) throw E();\n  return e;\n}\nfunction g(s, e) {\n  return new D(t => {\n    const n = he(t);\n    return pe(s, r => n[r]);\n  }, !1, e);\n}\nconst y = S(s => {\n    if (typeof s == \"number\") return s;\n    if (typeof s == \"string\") {\n      const e = Number(s);\n      if (!Number.isNaN(e)) return e;\n    }\n    throw E();\n  }, \"number\"),\n  h = S(s => {\n    if (typeof s == \"string\" || typeof s == \"number\") return s.toString();\n    throw E();\n  }, \"string\");\nfunction ue(s) {\n  return g({\n    eventType: h(),\n    eventData: e => e\n  }).parse(s);\n}\nfunction et() {\n  [\"TelegramGameProxy_receiveEvent\", \"TelegramGameProxy\", \"Telegram\"].forEach(s => {\n    delete window[s];\n  });\n}\nfunction j(s, e) {\n  window.dispatchEvent(new MessageEvent(\"message\", {\n    data: JSON.stringify({\n      eventType: s,\n      eventData: e\n    }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent\n  }));\n}\nfunction tt() {\n  [[\"TelegramGameProxy_receiveEvent\"],\n  // Windows Phone.\n  [\"TelegramGameProxy\", \"receiveEvent\"],\n  // Desktop.\n  [\"Telegram\", \"WebView\", \"receiveEvent\"]\n  // Android and iOS.\n  ].forEach(s => {\n    let e = window;\n    s.forEach((t, n, r) => {\n      if (n === r.length - 1) {\n        e[t] = j;\n        return;\n      }\n      t in e || (e[t] = {}), e = e[t];\n    });\n  });\n}\nconst st = {\n  clipboard_text_received: g({\n    req_id: h(),\n    data: s => s === null ? s : h().optional().parse(s)\n  }),\n  custom_method_invoked: g({\n    req_id: h(),\n    result: s => s,\n    error: h().optional()\n  }),\n  popup_closed: {\n    parse(s) {\n      return g({\n        button_id: e => e == null ? void 0 : h().parse(e)\n      }).parse(s ?? {});\n    }\n  },\n  viewport_changed: g({\n    height: y(),\n    width: s => s == null ? window.innerWidth : y().parse(s),\n    is_state_stable: b(),\n    is_expanded: b()\n  })\n};\nfunction nt() {\n  const s = new R(),\n    e = new R();\n  e.subscribe(n => {\n    s.emit(\"event\", {\n      name: n.event,\n      payload: n.args[0]\n    });\n  }), tt();\n  const [, t] = J(\n  // Don't forget to remove created handlers.\n  et,\n  // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n  // Desktop version of Telegram is sometimes not sending the viewport_changed\n  // event. For example, when the MainButton is shown. That's why we should\n  // add our own listener to make sure, viewport information is always fresh.\n  // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10\n  G(\"resize\", () => {\n    e.emit(\"viewport_changed\", {\n      width: window.innerWidth,\n      height: window.innerHeight,\n      is_state_stable: !0,\n      is_expanded: !0\n    });\n  }),\n  // Add listener, which handles events sent from the Telegram web application and also events\n  // generated by the local emitEvent function.\n  G(\"message\", n => {\n    if (n.source !== window.parent) return;\n    let r;\n    try {\n      r = ue(n.data);\n    } catch {\n      return;\n    }\n    const {\n        eventType: i,\n        eventData: o\n      } = r,\n      a = st[i];\n    try {\n      const p = a ? a.parse(o) : o;\n      e.emit(...(p ? [i, p] : [i]));\n    } catch (p) {\n      F.error(`An error occurred processing the \"${i}\" event from the Telegram application.\nPlease, file an issue here:\nhttps://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose`, r, p);\n    }\n  }),\n  // Clear emitters.\n  () => s.clear(), () => e.clear());\n  return [{\n    on: e.on.bind(e),\n    off: e.off.bind(e),\n    subscribe(n) {\n      return s.on(\"event\", n);\n    },\n    unsubscribe(n) {\n      s.off(\"event\", n);\n    },\n    get count() {\n      return e.count + s.count;\n    }\n  }, t];\n}\nconst [rt, it] = oe(s => {\n  const [e, t] = nt(),\n    n = e.off.bind(e);\n  return e.off = (r, i) => {\n    const {\n      count: o\n    } = e;\n    n(r, i), o && !e.count && s();\n  }, [e, t];\n}, ([, s]) => s());\nfunction M() {\n  return rt()[0];\n}\nfunction B(s, e) {\n  M().off(s, e);\n}\nfunction w(s, e, t) {\n  return M().on(s, e, t);\n}\nfunction k(s) {\n  return typeof s == \"object\" && s !== null && !Array.isArray(s);\n}\nfunction ot(s, e) {\n  const t = s.split(\".\"),\n    n = e.split(\".\"),\n    r = Math.max(t.length, n.length);\n  for (let i = 0; i < r; i += 1) {\n    const o = parseInt(t[i] || \"0\", 10),\n      a = parseInt(n[i] || \"0\", 10);\n    if (o !== a) return o > a ? 1 : -1;\n  }\n  return 0;\n}\nfunction _(s, e) {\n  return ot(s, e) <= 0;\n}\nfunction v(s, e, t) {\n  if (typeof t == \"string\") {\n    if (s === \"web_app_open_link\") {\n      if (e === \"try_instant_view\") return _(\"6.4\", t);\n      if (e === \"try_browser\") return _(\"7.6\", t);\n    }\n    if (s === \"web_app_set_header_color\" && e === \"color\") return _(\"6.9\", t);\n    if (s === \"web_app_close\" && e === \"return_back\") return _(\"7.6\", t);\n  }\n  switch (s) {\n    case \"web_app_open_tg_link\":\n    case \"web_app_open_invoice\":\n    case \"web_app_setup_back_button\":\n    case \"web_app_set_background_color\":\n    case \"web_app_set_header_color\":\n    case \"web_app_trigger_haptic_feedback\":\n      return _(\"6.1\", e);\n    case \"web_app_open_popup\":\n      return _(\"6.2\", e);\n    case \"web_app_close_scan_qr_popup\":\n    case \"web_app_open_scan_qr_popup\":\n    case \"web_app_read_text_from_clipboard\":\n      return _(\"6.4\", e);\n    case \"web_app_switch_inline_query\":\n      return _(\"6.7\", e);\n    case \"web_app_invoke_custom_method\":\n    case \"web_app_request_write_access\":\n    case \"web_app_request_phone\":\n      return _(\"6.9\", e);\n    case \"web_app_setup_settings_button\":\n      return _(\"6.10\", e);\n    case \"web_app_biometry_get_info\":\n    case \"web_app_biometry_open_settings\":\n    case \"web_app_biometry_request_access\":\n    case \"web_app_biometry_request_auth\":\n    case \"web_app_biometry_update_token\":\n      return _(\"7.2\", e);\n    case \"web_app_setup_swipe_behavior\":\n      return _(\"7.7\", e);\n    default:\n      return [\"iframe_ready\", \"iframe_will_reload\", \"web_app_close\", \"web_app_data_send\", \"web_app_expand\", \"web_app_open_link\", \"web_app_ready\", \"web_app_request_theme\", \"web_app_request_viewport\", \"web_app_setup_main_button\", \"web_app_setup_closing_behavior\"].includes(s);\n  }\n}\nfunction le(s) {\n  return \"external\" in s && k(s.external) && \"notify\" in s.external && typeof s.external.notify == \"function\";\n}\nfunction de(s) {\n  return \"TelegramWebviewProxy\" in s && k(s.TelegramWebviewProxy) && \"postEvent\" in s.TelegramWebviewProxy && typeof s.TelegramWebviewProxy.postEvent == \"function\";\n}\nfunction _e() {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return !0;\n  }\n}\nconst at = \"https://web.telegram.org\";\nlet fe = at;\nfunction ts(s) {\n  fe = s;\n}\nfunction ct() {\n  return fe;\n}\nfunction A(s, e, t) {\n  let n = {},\n    r;\n  if (!e && !t ? n = {} : e && t ? (n = t, r = e) : e && (\"targetOrigin\" in e ? n = e : r = e), Ge(\"Posting event:\", r ? {\n    event: s,\n    data: r\n  } : {\n    event: s\n  }), _e()) return window.parent.postMessage(JSON.stringify({\n    eventType: s,\n    eventData: r\n  }), n.targetOrigin || ct());\n  if (le(window)) {\n    window.external.notify(JSON.stringify({\n      eventType: s,\n      eventData: r\n    }));\n    return;\n  }\n  if (de(window)) {\n    window.TelegramWebviewProxy.postEvent(s, JSON.stringify(r));\n    return;\n  }\n  throw f(Fe, \"Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.\");\n}\nfunction pt(s) {\n  return (e, t) => {\n    if (!v(e, s)) throw f(je, `Method \"${e}\" is unsupported in Mini Apps version ${s}`);\n    if (k(t) && e === \"web_app_set_header_color\" && \"color\" in t && !v(e, \"color\", s)) throw f(ze, `Parameter \"color\" of \"${e}\" method is unsupported in Mini Apps version ${s}`);\n    return A(e, t);\n  };\n}\nfunction ge(s) {\n  return ({\n    req_id: e\n  }) => e === s;\n}\nfunction we(s) {\n  return f(Qe, `Timeout reached: ${s}ms`);\n}\nfunction be(s, e) {\n  return Promise.race([typeof s == \"function\" ? s() : s, new Promise((t, n) => {\n    setTimeout(() => {\n      n(we(e));\n    }, e);\n  })]);\n}\nasync function d(s) {\n  let e;\n  const t = new Promise(a => e = a),\n    {\n      event: n,\n      capture: r,\n      timeout: i\n    } = s,\n    [, o] = J(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(n) ? n : [n]).map(a => w(a, p => {\n      (!r || (Array.isArray(n) ? r({\n        event: a,\n        payload: p\n      }) : r(p))) && e(p);\n    })));\n  try {\n    return (s.postEvent || A)(s.method, s.params), await (i ? be(t, i) : t);\n  } finally {\n    o();\n  }\n}\nasync function C(s, e, t, n = {}) {\n  const {\n    result: r,\n    error: i\n  } = await d({\n    ...n,\n    method: \"web_app_invoke_custom_method\",\n    event: \"custom_method_invoked\",\n    params: {\n      method: s,\n      params: e,\n      req_id: t\n    },\n    capture: ge(t)\n  });\n  if (i) throw f(Je, i);\n  return r;\n}\nfunction z(...s) {\n  return s.map(e => {\n    if (typeof e == \"string\") return e;\n    if (k(e)) return z(Object.entries(e).map(t => t[1] && t[0]));\n    if (Array.isArray(e)) return z(...e);\n  }).filter(Boolean).join(\" \");\n}\nfunction ss(...s) {\n  return s.reduce((e, t) => (k(t) && Object.entries(t).forEach(([n, r]) => {\n    const i = z(e[n], r);\n    i.length && (e[n] = i);\n  }), e), {});\n}\nfunction Q(s) {\n  return /^#[\\da-f]{6}$/i.test(s);\n}\nfunction ht(s) {\n  return /^#[\\da-f]{3}$/i.test(s);\n}\nfunction me(s) {\n  const e = s.replace(/\\s/g, \"\").toLowerCase();\n  if (Q(e)) return e;\n  if (ht(e)) {\n    let n = \"#\";\n    for (let r = 0; r < 3; r += 1) n += e[1 + r].repeat(2);\n    return n;\n  }\n  const t = e.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/) || e.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n  if (!t) throw new Error(`Value \"${s}\" does not satisfy any of known RGB formats.`);\n  return t.slice(1).reduce((n, r) => {\n    const i = parseInt(r, 10).toString(16);\n    return n + (i.length === 1 ? \"0\" : \"\") + i;\n  }, \"#\");\n}\nfunction ye(s) {\n  const e = me(s);\n  return Math.sqrt([0.299, 0.587, 0.114].reduce((t, n, r) => {\n    const i = parseInt(e.slice(1 + r * 2, 1 + (r + 1) * 2), 16);\n    return t + i * i * n;\n  }, 0)) < 120;\n}\nclass ut {\n  constructor(e) {\n    c(this, \"ee\", new R());\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    this.state = e;\n  }\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone() {\n    return {\n      ...this.state\n    };\n  }\n  set(e, t) {\n    Object.entries(typeof e == \"string\" ? {\n      [e]: t\n    } : e).reduce((r, [i, o]) => this.state[i] === o || o === void 0 ? r : (this.state[i] = o, this.ee.emit(`change:${i}`, o), !0), !1) && this.ee.emit(\"change\", this.state);\n  }\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get(e) {\n    return this.state[e];\n  }\n}\nclass Y {\n  constructor(e) {\n    c(this, \"state\");\n    /**\n     * Gets the state value.\n     */\n    c(this, \"get\");\n    /**\n     * Sets the state value.\n     */\n    c(this, \"set\");\n    /**\n     * Clones the current state.\n     */\n    c(this, \"clone\");\n    this.state = new ut(e), this.set = this.state.set.bind(this.state), this.get = this.state.get.bind(this.state), this.clone = this.state.clone.bind(this.state);\n  }\n}\nfunction ve(s, e) {\n  return t => v(e[t], s);\n}\nclass Z extends Y {\n  constructor(t, n, r) {\n    super(t);\n    /**\n     * @returns True, if specified method is supported by the current component.\n     */\n    c(this, \"supports\");\n    this.supports = ve(n, r);\n  }\n}\nclass lt extends Z {\n  constructor(t, n, r) {\n    super({\n      isVisible: t\n    }, n, {\n      show: \"web_app_setup_back_button\",\n      hide: \"web_app_setup_back_button\"\n    });\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (t, n) => t === \"click\" ? w(\"back_button_pressed\", n) : this.state.on(t, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (t, n) => t === \"click\" ? B(\"back_button_pressed\", n) : this.state.off(t, n));\n    this.postEvent = r;\n  }\n  set isVisible(t) {\n    this.set(\"isVisible\", t), this.postEvent(\"web_app_setup_back_button\", {\n      is_visible: t\n    });\n  }\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the BackButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the BackButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst Ee = S(s => s instanceof Date ? s : new Date(y().parse(s) * 1e3), \"Date\");\nfunction K(s, e) {\n  return new D(t => {\n    if (typeof t != \"string\" && !(t instanceof URLSearchParams)) throw E();\n    const n = typeof t == \"string\" ? new URLSearchParams(t) : t;\n    return pe(s, r => {\n      const i = n.get(r);\n      return i === null ? void 0 : i;\n    });\n  }, !1, e);\n}\nconst dt = g({\n    id: y(),\n    type: h(),\n    title: h(),\n    photoUrl: {\n      type: h().optional(),\n      from: \"photo_url\"\n    },\n    username: h().optional()\n  }, \"Chat\").optional(),\n  ne = g({\n    addedToAttachmentMenu: {\n      type: b().optional(),\n      from: \"added_to_attachment_menu\"\n    },\n    allowsWriteToPm: {\n      type: b().optional(),\n      from: \"allows_write_to_pm\"\n    },\n    firstName: {\n      type: h(),\n      from: \"first_name\"\n    },\n    id: y(),\n    isBot: {\n      type: b().optional(),\n      from: \"is_bot\"\n    },\n    isPremium: {\n      type: b().optional(),\n      from: \"is_premium\"\n    },\n    languageCode: {\n      type: h().optional(),\n      from: \"language_code\"\n    },\n    lastName: {\n      type: h().optional(),\n      from: \"last_name\"\n    },\n    photoUrl: {\n      type: h().optional(),\n      from: \"photo_url\"\n    },\n    username: h().optional()\n  }, \"User\").optional();\nfunction Se() {\n  return K({\n    authDate: {\n      type: Ee(),\n      from: \"auth_date\"\n    },\n    canSendAfter: {\n      type: y().optional(),\n      from: \"can_send_after\"\n    },\n    chat: dt,\n    chatInstance: {\n      type: h().optional(),\n      from: \"chat_instance\"\n    },\n    chatType: {\n      type: h().optional(),\n      from: \"chat_type\"\n    },\n    hash: h(),\n    queryId: {\n      type: h().optional(),\n      from: \"query_id\"\n    },\n    receiver: ne,\n    startParam: {\n      type: h().optional(),\n      from: \"start_param\"\n    },\n    user: ne\n  }, \"InitData\");\n}\nconst _t = S(s => me(h().parse(s)), \"rgb\");\nfunction ft(s) {\n  return s.replace(/_[a-z]/g, e => e[1].toUpperCase());\n}\nfunction gt(s) {\n  return s.replace(/[A-Z]/g, e => `_${e.toLowerCase()}`);\n}\nconst Pe = S(s => {\n  const e = _t().optional();\n  return Object.entries(he(s)).reduce((t, [n, r]) => (t[ft(n)] = e.parse(r), t), {});\n}, \"ThemeParams\");\nfunction X(s) {\n  return K({\n    botInline: {\n      type: b().optional(),\n      from: \"tgWebAppBotInline\"\n    },\n    initData: {\n      type: Se().optional(),\n      from: \"tgWebAppData\"\n    },\n    initDataRaw: {\n      type: h().optional(),\n      from: \"tgWebAppData\"\n    },\n    platform: {\n      type: h(),\n      from: \"tgWebAppPlatform\"\n    },\n    showSettings: {\n      type: b().optional(),\n      from: \"tgWebAppShowSettings\"\n    },\n    startParam: {\n      type: h().optional(),\n      from: \"tgWebAppStartParam\"\n    },\n    themeParams: {\n      type: Pe(),\n      from: \"tgWebAppThemeParams\"\n    },\n    version: {\n      type: h(),\n      from: \"tgWebAppVersion\"\n    }\n  }).parse(s);\n}\nfunction xe(s) {\n  return X(s.replace(/^[^?#]*[?#]/, \"\").replace(/[?#]/g, \"&\"));\n}\nfunction wt() {\n  return xe(window.location.href);\n}\nfunction Ce() {\n  return performance.getEntriesByType(\"navigation\")[0];\n}\nfunction bt() {\n  const s = Ce();\n  if (!s) throw new Error(\"Unable to get first navigation entry.\");\n  return xe(s.name);\n}\nfunction Te(s) {\n  return `telegram-apps/${s.replace(/[A-Z]/g, e => `-${e.toLowerCase()}`)}`;\n}\nfunction Re(s, e) {\n  sessionStorage.setItem(Te(s), JSON.stringify(e));\n}\nfunction Ae(s) {\n  const e = sessionStorage.getItem(Te(s));\n  try {\n    return e ? JSON.parse(e) : void 0;\n  } catch {}\n}\nfunction mt() {\n  return X(Ae(\"launchParams\") || \"\");\n}\nfunction Ie(s) {\n  return JSON.stringify(Object.fromEntries(Object.entries(s).map(([e, t]) => [gt(e), t])));\n}\nfunction yt(s) {\n  const {\n      initDataRaw: e,\n      themeParams: t,\n      platform: n,\n      version: r,\n      showSettings: i,\n      startParam: o,\n      botInline: a\n    } = s,\n    p = new URLSearchParams();\n  return p.set(\"tgWebAppPlatform\", n), p.set(\"tgWebAppThemeParams\", Ie(t)), p.set(\"tgWebAppVersion\", r), e && p.set(\"tgWebAppData\", e), o && p.set(\"tgWebAppStartParam\", o), typeof i == \"boolean\" && p.set(\"tgWebAppShowSettings\", i ? \"1\" : \"0\"), typeof a == \"boolean\" && p.set(\"tgWebAppBotInline\", a ? \"1\" : \"0\"), p.toString();\n}\nfunction qe(s) {\n  Re(\"launchParams\", yt(s));\n}\nfunction vt() {\n  const s = [];\n  for (const e of [\n  // Try to retrieve launch parameters from the current location. This method can return\n  // nothing in case, location was changed, and then the page was reloaded.\n  wt,\n  // Then, try using the lower level API - window.performance.\n  bt,\n  // Finally, try to extract launch parameters from the session storage.\n  mt]) try {\n    const t = e();\n    return qe(t), t;\n  } catch (t) {\n    s.push(t instanceof Error ? t.message : JSON.stringify(t));\n  }\n  throw new Error([`Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?\n`, \"📖 Refer to docs for more information:\", `https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/environment\n`, \"Collected errors:\", s.map(e => `— ${e}`)].join(`\n`));\n}\nfunction ke() {\n  const s = Ce();\n  return !!(s && s.type === \"reload\");\n}\nfunction Et() {\n  let s = 0;\n  return () => (s += 1).toString();\n}\nconst [St] = oe(Et);\nfunction l(s, e) {\n  return () => {\n    const t = vt(),\n      n = {\n        ...t,\n        postEvent: pt(t.version),\n        createRequestId: St()\n      };\n    if (typeof s == \"function\") return s(n);\n    const [r, i, o] = J(),\n      a = e({\n        ...n,\n        // State should only be passed only in case, current page was reloaded. If we don't add\n        // this check, state restoration will work improperly in the web version of Telegram,\n        // when we are always working in the same \"session\" (tab).\n        state: ke() ? Ae(s) : void 0,\n        addCleanup: r\n      }),\n      p = u => (o || r(u.on(\"change\", $e => {\n        Re(s, $e);\n      })), u);\n    return [a instanceof Promise ? a.then(p) : p(a), i];\n  };\n}\nconst ns = l(\"backButton\", ({\n  postEvent: s,\n  version: e,\n  state: t = {\n    isVisible: !1\n  }\n}) => new lt(t.isVisible, e, s));\nclass P extends Z {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds a new event listener.\n     */\n    c(this, \"on\", this.state.on.bind(this.state));\n    /**\n     * Removes the event listener.\n     */\n    c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nfunction Ne(s) {\n  const e = s.available ? s : {\n    available: !1,\n    device_id: \"\",\n    token_saved: !1,\n    access_requested: !1,\n    access_granted: !1,\n    type: \"\"\n  };\n  return {\n    available: !0,\n    type: e.type,\n    deviceId: e.device_id,\n    tokenSaved: e.token_saved,\n    accessRequested: e.access_requested,\n    accessGranted: e.access_granted\n  };\n}\nclass Pt extends P {\n  constructor({\n    postEvent: t,\n    version: n,\n    ...r\n  }) {\n    super(r, n, {\n      auth: \"web_app_biometry_request_auth\",\n      openSettings: \"web_app_biometry_open_settings\",\n      requestAccess: \"web_app_biometry_request_access\",\n      updateToken: \"web_app_biometry_update_token\"\n    });\n    c(this, \"postEvent\");\n    c(this, \"authPromise\");\n    c(this, \"accessPromise\");\n    this.postEvent = t;\n  }\n  /**\n   * Shows whether biometry is available.\n   */\n  get available() {\n    return this.get(\"available\");\n  }\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted() {\n    return this.get(\"accessGranted\");\n  }\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested() {\n    return this.get(\"accessRequested\");\n  }\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason: t,\n    ...n\n  }) {\n    return this.authPromise || (this.authPromise = d({\n      ...n,\n      method: \"web_app_biometry_request_auth\",\n      event: \"biometry_auth_requested\",\n      postEvent: this.postEvent,\n      params: {\n        // TODO: Check if reason is empty works fine.\n        reason: (t || \"\").trim()\n      }\n    }).then(({\n      token: r\n    }) => r).finally(() => this.authPromise = void 0)), this.authPromise;\n  }\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId() {\n    return this.get(\"deviceId\");\n  }\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings() {\n    this.postEvent(\"web_app_biometry_open_settings\");\n  }\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({\n    reason: t,\n    ...n\n  } = {}) {\n    return this.accessPromise || (this.accessPromise = d({\n      ...n,\n      postEvent: this.postEvent,\n      method: \"web_app_biometry_request_access\",\n      event: \"biometry_info_received\",\n      params: {\n        reason: t || \"\"\n      }\n    }).then(r => {\n      const i = Ne(r);\n      return this.set(i), i.accessGranted;\n    }).finally(() => this.accessPromise = void 0)), this.accessPromise;\n  }\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType() {\n    return this.get(\"biometryType\");\n  }\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved() {\n    return this.get(\"tokenSaved\");\n  }\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({\n    token: t,\n    ...n\n  } = {}) {\n    return [\"removed\", \"updated\"].includes((await d({\n      ...n,\n      postEvent: this.postEvent,\n      method: \"web_app_biometry_update_token\",\n      event: \"biometry_token_updated\",\n      params: {\n        token: t || \"\"\n      }\n    })).status);\n  }\n}\nasync function xt(s) {\n  return Ne(await d({\n    ...(s || {}),\n    method: \"web_app_biometry_get_info\",\n    event: \"biometry_info_received\"\n  }));\n}\nconst rs = l(\"biometryManager\", async ({\n  postEvent: s,\n  version: e,\n  state: t\n}) => new Pt({\n  ...(t || v(\"web_app_biometry_get_info\", e) ? t || (await xt({\n    timeout: 1e3\n  })) : {\n    available: !1,\n    accessGranted: !1,\n    accessRequested: !1,\n    tokenSaved: !1,\n    deviceId: \"\"\n  }),\n  version: e,\n  postEvent: s\n}));\nclass ee extends Y {\n  constructor() {\n    super(...arguments);\n    /**\n     * Adds a new event listener.\n     */\n    c(this, \"on\", this.state.on.bind(this.state));\n    /**\n     * Removes the event listener.\n     */\n    c(this, \"off\", this.state.off.bind(this.state));\n  }\n}\nclass Ct extends ee {\n  constructor(e, t) {\n    super({\n      isConfirmationNeeded: e\n    }), this.postEvent = t;\n  }\n  set isConfirmationNeeded(e) {\n    this.set(\"isConfirmationNeeded\", e), this.postEvent(\"web_app_setup_closing_behavior\", {\n      need_confirmation: e\n    });\n  }\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded() {\n    return this.get(\"isConfirmationNeeded\");\n  }\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation() {\n    this.isConfirmationNeeded = !1;\n  }\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation() {\n    this.isConfirmationNeeded = !0;\n  }\n}\nconst is = l(\"closingBehavior\", ({\n  postEvent: s,\n  state: e = {\n    isConfirmationNeeded: !1\n  }\n}) => new Ct(e.isConfirmationNeeded, s));\nclass te {\n  constructor(e, t) {\n    /**\n     * @returns True, if specified method is supported by the current component.\n     */\n    c(this, \"supports\");\n    this.supports = ve(e, t);\n  }\n}\nfunction Tt(s) {\n  if (Array.isArray(s)) return s;\n  if (typeof s == \"string\") try {\n    const e = JSON.parse(s);\n    if (Array.isArray(e)) return e;\n  } catch {}\n  throw E();\n}\nclass Rt extends D {\n  constructor(t, n, r) {\n    super(Tt, n, r);\n    c(this, \"itemParser\");\n    this.itemParser = typeof t == \"function\" ? t : t.parse.bind(t);\n  }\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(t) {\n    const n = super.parse(t);\n    return n === void 0 ? n : n.map(this.itemParser);\n  }\n  of(t) {\n    return this.itemParser = typeof t == \"function\" ? t : t.parse.bind(t), this;\n  }\n}\nfunction At(s) {\n  return new Rt(e => e, !1, s);\n}\nfunction re(s, e) {\n  return Object.fromEntries(s.map(t => [t, e]));\n}\nclass It extends te {\n  constructor(e, t, n) {\n    super(e, {\n      delete: \"web_app_invoke_custom_method\",\n      get: \"web_app_invoke_custom_method\",\n      getKeys: \"web_app_invoke_custom_method\",\n      set: \"web_app_invoke_custom_method\"\n    }), this.createRequestId = t, this.postEvent = n;\n  }\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(e, t = {}) {\n    const n = Array.isArray(e) ? e : [e];\n    n.length && (await C(\"deleteStorageValues\", {\n      keys: n\n    }, this.createRequestId(), {\n      ...t,\n      postEvent: this.postEvent\n    }));\n  }\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(e = {}) {\n    return At().of(h()).parse(await C(\"getStorageKeys\", {}, this.createRequestId(), {\n      ...e,\n      postEvent: this.postEvent\n    }));\n  }\n  async get(e, t = {}) {\n    const n = Array.isArray(e) ? e : [e];\n    if (!n.length) return re(n, \"\");\n    const r = await C(\"getStorageValues\", {\n        keys: n\n      }, this.createRequestId(), {\n        ...t,\n        postEvent: this.postEvent\n      }),\n      i = g(re(n, h()), \"CloudStorageData\").parse(r);\n    return Array.isArray(e) ? i : i[e];\n  }\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(e, t, n = {}) {\n    await C(\"saveStorageValue\", {\n      key: e,\n      value: t\n    }, this.createRequestId(), {\n      ...n,\n      postEvent: this.postEvent\n    });\n  }\n}\nconst os = l(({\n  createRequestId: s,\n  postEvent: e,\n  version: t\n}) => new It(t, s, e));\nclass qt extends te {\n  constructor(e, t) {\n    super(e, {\n      impactOccurred: \"web_app_trigger_haptic_feedback\",\n      notificationOccurred: \"web_app_trigger_haptic_feedback\",\n      selectionChanged: \"web_app_trigger_haptic_feedback\"\n    }), this.postEvent = t;\n  }\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(e) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"impact\",\n      impact_style: e\n    });\n  }\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(e) {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"notification\",\n      notification_type: e\n    });\n  }\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged() {\n    this.postEvent(\"web_app_trigger_haptic_feedback\", {\n      type: \"selection_change\"\n    });\n  }\n}\nconst as = l(({\n  version: s,\n  postEvent: e\n}) => new qt(s, e));\nclass kt {\n  constructor(e) {\n    this.initData = e;\n  }\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate() {\n    return this.initData.authDate;\n  }\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter() {\n    return this.initData.canSendAfter;\n  }\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate() {\n    const {\n      canSendAfter: e\n    } = this;\n    return e ? new Date(this.authDate.getTime() + e * 1e3) : void 0;\n  }\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat() {\n    return this.initData.chat;\n  }\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType() {\n    return this.initData.chatType;\n  }\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance() {\n    return this.initData.chatInstance;\n  }\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash() {\n    return this.initData.hash;\n  }\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId() {\n    return this.initData.queryId;\n  }\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver() {\n    return this.initData.receiver;\n  }\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam() {\n    return this.initData.startParam;\n  }\n  /**\n   * @see InitDataParsed.user\n   */\n  get user() {\n    return this.initData.user;\n  }\n}\nconst cs = l(({\n  initData: s\n}) => s ? new kt(s) : void 0);\nfunction ps(s) {\n  return Se().parse(s);\n}\nclass Nt extends P {\n  constructor(e, t, n) {\n    super({\n      isOpened: e\n    }, t, {\n      open: \"web_app_open_invoice\"\n    }), this.postEvent = n;\n  }\n  set isOpened(e) {\n    this.set(\"isOpened\", e);\n  }\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(e, t) {\n    if (this.isOpened) throw new Error(\"Invoice is already opened\");\n    let n;\n    if (!t) n = e;else {\n      const {\n        hostname: r,\n        pathname: i\n      } = new URL(e, window.location.href);\n      if (r !== \"t.me\") throw new Error(`Incorrect hostname: ${r}`);\n      const o = i.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!o) throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      [,, n] = o;\n    }\n    this.isOpened = !0;\n    try {\n      return (await d({\n        method: \"web_app_open_invoice\",\n        event: \"invoice_closed\",\n        params: {\n          slug: n\n        },\n        postEvent: this.postEvent,\n        capture(i) {\n          return n === i.slug;\n        }\n      })).status;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst hs = l(({\n  version: s,\n  postEvent: e\n}) => new Nt(!1, s, e));\nclass Vt extends Y {\n  constructor({\n    postEvent: t,\n    ...n\n  }) {\n    super(n);\n    c(this, \"postEvent\");\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (t, n) => t === \"click\" ? w(\"main_button_pressed\", n) : this.state.on(t, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (t, n) => t === \"click\" ? B(\"main_button_pressed\", n) : this.state.off(t, n));\n    this.postEvent = t;\n  }\n  /**\n   * The MainButton background color.\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  commit() {\n    this.text !== \"\" && this.postEvent(\"web_app_setup_main_button\", {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor\n    });\n  }\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable() {\n    return this.isEnabled = !1, this;\n  }\n  /**\n   * Enables the MainButton.\n   */\n  enable() {\n    return this.isEnabled = !0, this;\n  }\n  /**\n   * Hides the MainButton.\n   */\n  hide() {\n    return this.isVisible = !1, this;\n  }\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader() {\n    return this.isLoaderVisible = !1, this;\n  }\n  set isEnabled(t) {\n    this.setParams({\n      isEnabled: t\n    });\n  }\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled() {\n    return this.get(\"isEnabled\");\n  }\n  set isLoaderVisible(t) {\n    this.setParams({\n      isLoaderVisible: t\n    });\n  }\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible() {\n    return this.get(\"isLoaderVisible\");\n  }\n  set isVisible(t) {\n    this.setParams({\n      isVisible: t\n    });\n  }\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show() {\n    return this.isVisible = !0, this;\n  }\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader() {\n    return this.isLoaderVisible = !0, this;\n  }\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(t) {\n    return this.setParams({\n      text: t\n    });\n  }\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(t) {\n    return this.setParams({\n      textColor: t\n    });\n  }\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(t) {\n    return this.setParams({\n      bgColor: t\n    });\n  }\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(t) {\n    return this.set(t), this.commit(), this;\n  }\n  /**\n   * The MainButton text.\n   */\n  get text() {\n    return this.get(\"text\");\n  }\n  /**\n   * The MainButton text color.\n   */\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst us = l(\"mainButton\", ({\n  postEvent: s,\n  themeParams: e,\n  state: t = {\n    isVisible: !1,\n    isEnabled: !1,\n    text: \"\",\n    isLoaderVisible: !1,\n    textColor: e.buttonTextColor || \"#ffffff\",\n    bgColor: e.buttonColor || \"#000000\"\n  }\n}) => new Vt({\n  ...t,\n  postEvent: s\n}));\nfunction Dt() {\n  return K({\n    contact: g({\n      userId: {\n        type: y(),\n        from: \"user_id\"\n      },\n      phoneNumber: {\n        type: h(),\n        from: \"phone_number\"\n      },\n      firstName: {\n        type: h(),\n        from: \"first_name\"\n      },\n      lastName: {\n        type: h().optional(),\n        from: \"last_name\"\n      }\n    }),\n    authDate: {\n      type: Ee(),\n      from: \"auth_date\"\n    },\n    hash: h()\n  }, \"RequestedContact\");\n}\nfunction Ve(s, e) {\n  return t => {\n    const [n, r] = e[t];\n    return v(n, r, s);\n  };\n}\nfunction Mt(s) {\n  return new Promise(e => {\n    setTimeout(e, s);\n  });\n}\nclass Bt extends P {\n  constructor({\n    postEvent: t,\n    createRequestId: n,\n    version: r,\n    botInline: i,\n    ...o\n  }) {\n    super(o, r, {\n      requestPhoneAccess: \"web_app_request_phone\",\n      requestWriteAccess: \"web_app_request_write_access\",\n      switchInlineQuery: \"web_app_switch_inline_query\",\n      setHeaderColor: \"web_app_set_header_color\",\n      setBackgroundColor: \"web_app_set_background_color\"\n    });\n    c(this, \"botInline\");\n    c(this, \"postEvent\");\n    c(this, \"createRequestId\");\n    c(this, \"requestPhoneAccessPromise\");\n    c(this, \"requestWriteAccessPromise\");\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    c(this, \"supportsParam\");\n    this.createRequestId = n, this.postEvent = t, this.botInline = i;\n    const a = this.supports.bind(this);\n    this.supports = p => a(p) ? p !== \"switchInlineQuery\" || i : !1, this.supportsParam = Ve(r, {\n      \"setHeaderColor.color\": [\"web_app_set_header_color\", \"color\"],\n      \"close.returnBack\": [\"web_app_close\", \"return_back\"]\n    });\n  }\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  async getRequestedContact({\n    timeout: t = 1e4\n  } = {}) {\n    return Dt().parse(await C(\"getRequestedContact\", {}, this.createRequestId(), {\n      postEvent: this.postEvent,\n      timeout: t\n    }));\n  }\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(t) {\n    this.postEvent(\"web_app_close\", this.supportsParam(\"close.returnBack\") ? {\n      return_back: t\n    } : {});\n  }\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor() {\n    return this.get(\"headerColor\");\n  }\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline() {\n    return this.botInline;\n  }\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark() {\n    return ye(this.bgColor);\n  }\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready() {\n    this.postEvent(\"web_app_ready\");\n  }\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({\n    timeout: t = 5e3\n  } = {}) {\n    try {\n      return await this.getRequestedContact();\n    } catch {}\n    if ((await this.requestPhoneAccess()) !== \"sent\") throw new Error(\"Access denied.\");\n    const r = Date.now() + t;\n    let i = 50;\n    return be(async () => {\n      for (; Date.now() < r;) {\n        try {\n          return await this.getRequestedContact();\n        } catch {}\n        await Mt(i), i += 50;\n      }\n      throw we(t);\n    }, t);\n  }\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(t = {}) {\n    return this.requestPhoneAccessPromise || (this.requestPhoneAccessPromise = d({\n      ...t,\n      method: \"web_app_request_phone\",\n      event: \"phone_requested\",\n      postEvent: this.postEvent\n    }).then(({\n      status: n\n    }) => n).finally(() => this.requestPhoneAccessPromise = void 0)), this.requestPhoneAccessPromise;\n  }\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(t = {}) {\n    return this.requestWriteAccessPromise || (this.requestWriteAccessPromise = d({\n      ...t,\n      method: \"web_app_request_write_access\",\n      event: \"write_access_requested\",\n      postEvent: this.postEvent\n    }).then(({\n      status: n\n    }) => n).finally(() => this.requestWriteAccessPromise = void 0)), this.requestWriteAccessPromise;\n  }\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(t) {\n    const {\n      size: n\n    } = new Blob([t]);\n    if (!n || n > 4096) throw new Error(`Passed data has incorrect size: ${n}`);\n    this.postEvent(\"web_app_data_send\", {\n      data: t\n    });\n  }\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(t) {\n    this.postEvent(\"web_app_set_header_color\", Q(t) ? {\n      color: t\n    } : {\n      color_key: t\n    }), this.set(\"headerColor\", t);\n  }\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(t) {\n    this.postEvent(\"web_app_set_background_color\", {\n      color: t\n    }), this.set(\"bgColor\", t);\n  }\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(t, n = []) {\n    if (!this.supports(\"switchInlineQuery\") && !this.isBotInline) throw new Error(\"Method is unsupported because Mini App should be launched in inline mode.\");\n    this.postEvent(\"web_app_switch_inline_query\", {\n      query: t,\n      chat_types: n\n    });\n  }\n}\nconst ls = l(\"miniApp\", ({\n  themeParams: s,\n  botInline: e = !1,\n  state: t = {\n    bgColor: s.bgColor || \"#ffffff\",\n    headerColor: s.headerBgColor || \"#000000\"\n  },\n  ...n\n}) => new Bt({\n  ...n,\n  ...t,\n  botInline: e\n}));\nfunction Lt(s) {\n  const e = s.message.trim(),\n    t = (s.title || \"\").trim(),\n    n = s.buttons || [];\n  let r;\n  if (t.length > 64) throw new Error(`Title has incorrect size: ${t.length}`);\n  if (!e.length || e.length > 256) throw new Error(`Message has incorrect size: ${e.length}`);\n  if (n.length > 3) throw new Error(`Buttons have incorrect size: ${n.length}`);\n  return n.length ? r = n.map(i => {\n    const {\n      id: o = \"\"\n    } = i;\n    if (o.length > 64) throw new Error(`Button ID has incorrect size: ${o}`);\n    if (!i.type || i.type === \"default\" || i.type === \"destructive\") {\n      const a = i.text.trim();\n      if (!a.length || a.length > 64) {\n        const p = i.type || \"default\";\n        throw new Error(`Button text with type \"${p}\" has incorrect size: ${i.text.length}`);\n      }\n      return {\n        ...i,\n        text: a,\n        id: o\n      };\n    }\n    return {\n      ...i,\n      id: o\n    };\n  }) : r = [{\n    type: \"close\",\n    id: \"\"\n  }], {\n    title: t,\n    message: e,\n    buttons: r\n  };\n}\nclass $t extends P {\n  constructor(e, t, n) {\n    super({\n      isOpened: e\n    }, t, {\n      open: \"web_app_open_popup\"\n    }), this.postEvent = n;\n  }\n  set isOpened(e) {\n    this.set(\"isOpened\", e);\n  }\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(e) {\n    if (this.isOpened) throw new Error(\"Popup is already opened.\");\n    this.isOpened = !0;\n    try {\n      const {\n        button_id: t = null\n      } = await d({\n        event: \"popup_closed\",\n        method: \"web_app_open_popup\",\n        postEvent: this.postEvent,\n        params: Lt(e)\n      });\n      return t;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n}\nconst ds = l(({\n  postEvent: s,\n  version: e\n}) => new $t(!1, e, s));\nclass Wt extends P {\n  constructor(e, t, n) {\n    super({\n      isOpened: e\n    }, t, {\n      close: \"web_app_close_scan_qr_popup\",\n      open: \"web_app_open_scan_qr_popup\"\n    }), this.postEvent = n;\n  }\n  /**\n   * Closes the scanner.\n   */\n  close() {\n    this.postEvent(\"web_app_close_scan_qr_popup\"), this.isOpened = !1;\n  }\n  set isOpened(e) {\n    this.set(\"isOpened\", e);\n  }\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened() {\n    return this.get(\"isOpened\");\n  }\n  async open(e) {\n    if (this.isOpened) throw new Error(\"The scanner is already opened\");\n    const {\n      text: t,\n      capture: n\n    } = (typeof e == \"string\" ? {\n      text: e\n    } : e) || {};\n    this.isOpened = !0;\n    try {\n      const i = ((await d({\n        method: \"web_app_open_scan_qr_popup\",\n        event: [\"qr_text_received\", \"scan_qr_popup_closed\"],\n        postEvent: this.postEvent,\n        params: {\n          text: t\n        },\n        capture(o) {\n          return o.event === \"scan_qr_popup_closed\" || !n || n(o.payload);\n        }\n      })) || {}).data || null;\n      return i && this.close(), i;\n    } finally {\n      this.isOpened = !1;\n    }\n  }\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\nconst _s = l(({\n  version: s,\n  postEvent: e\n}) => new Wt(!1, s, e));\nclass Ut extends Z {\n  constructor(t, n, r) {\n    super({\n      isVisible: t\n    }, n, {\n      show: \"web_app_setup_settings_button\",\n      hide: \"web_app_setup_settings_button\"\n    });\n    /**\n     * Adds a new event listener.\n     * @param event - event to listen.\n     * @param listener - listener to add.\n     */\n    c(this, \"on\", (t, n) => t === \"click\" ? w(\"settings_button_pressed\", n) : this.state.on(t, n));\n    /**\n     * Removes the event listener.\n     * @param event - event to listen.\n     * @param listener - listener to remove.\n     */\n    c(this, \"off\", (t, n) => t === \"click\" ? B(\"settings_button_pressed\", n) : this.state.off(t, n));\n    this.postEvent = r;\n  }\n  set isVisible(t) {\n    this.set(\"isVisible\", t), this.postEvent(\"web_app_setup_settings_button\", {\n      is_visible: t\n    });\n  }\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible() {\n    return this.get(\"isVisible\");\n  }\n  /**\n   * Hides the SettingsButton.\n   */\n  hide() {\n    this.isVisible = !1;\n  }\n  /**\n   * Shows the SettingsButton.\n   */\n  show() {\n    this.isVisible = !0;\n  }\n}\nconst fs = l(\"settingsButton\", ({\n  version: s,\n  postEvent: e,\n  state: t = {\n    isVisible: !1\n  }\n}) => new Ut(t.isVisible, s, e));\nclass Ht extends P {\n  constructor(e, t, n) {\n    super({\n      isVerticalSwipeEnabled: e\n    }, t, {\n      disableVerticalSwipe: \"web_app_setup_swipe_behavior\",\n      enableVerticalSwipe: \"web_app_setup_swipe_behavior\"\n    }), this.postEvent = n;\n  }\n  set isVerticalSwipeEnabled(e) {\n    this.set(\"isVerticalSwipeEnabled\", e), this.postEvent(\"web_app_setup_swipe_behavior\", {\n      allow_vertical_swipe: e\n    });\n  }\n  /**\n   * True, if the vertical swipe enabled.\n   */\n  get isVerticalSwipeEnabled() {\n    return this.get(\"isVerticalSwipeEnabled\");\n  }\n  /**\n   * Disables the vertical swipe.\n   */\n  disableVerticalSwipe() {\n    this.isVerticalSwipeEnabled = !1;\n  }\n  /**\n   * Enables the vertical swipe.\n   */\n  enableVerticalSwipe() {\n    this.isVerticalSwipeEnabled = !0;\n  }\n}\nconst gs = l(\"swipeBehavior\", ({\n  postEvent: s,\n  state: e = {\n    isVerticalSwipeEnabled: !0\n  },\n  version: t\n}) => new Ht(e.isVerticalSwipeEnabled, t, s));\nfunction De(s) {\n  return Pe().parse(s);\n}\nclass Ot extends ee {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor() {\n    return this.get(\"accentTextColor\");\n  }\n  get bgColor() {\n    return this.get(\"bgColor\");\n  }\n  get buttonColor() {\n    return this.get(\"buttonColor\");\n  }\n  get buttonTextColor() {\n    return this.get(\"buttonTextColor\");\n  }\n  get destructiveTextColor() {\n    return this.get(\"destructiveTextColor\");\n  }\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState() {\n    return this.clone();\n  }\n  /**\n   * @since v6.10\n   */\n  get headerBgColor() {\n    return this.get(\"headerBgColor\");\n  }\n  get hintColor() {\n    return this.get(\"hintColor\");\n  }\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark() {\n    return !this.bgColor || ye(this.bgColor);\n  }\n  get linkColor() {\n    return this.get(\"linkColor\");\n  }\n  get secondaryBgColor() {\n    return this.get(\"secondaryBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor() {\n    return this.get(\"sectionBgColor\");\n  }\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor() {\n    return this.get(\"sectionHeaderTextColor\");\n  }\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return w(\"theme_changed\", e => {\n      this.set(De(e.theme_params));\n    });\n  }\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor() {\n    return this.get(\"subtitleTextColor\");\n  }\n  get textColor() {\n    return this.get(\"textColor\");\n  }\n}\nconst ws = l(\"themeParams\", ({\n  themeParams: s,\n  state: e = s,\n  addCleanup: t\n}) => {\n  const n = new Ot(e);\n  return t(n.listen()), n;\n});\nfunction bs(s = {}) {\n  return d({\n    ...s,\n    method: \"web_app_request_theme\",\n    event: \"theme_changed\"\n  }).then(De);\n}\nfunction I(s, e) {\n  return s.startsWith(e) ? s : `${e}${s}`;\n}\nfunction q(s) {\n  return new URL(typeof s == \"string\" ? s : `${s.pathname || \"\"}${I(s.search || \"\", \"?\")}${I(s.hash || \"\", \"#\")}`, \"http://a\");\n}\nclass Gt extends te {\n  constructor(t, n, r) {\n    super(t, {\n      readTextFromClipboard: \"web_app_read_text_from_clipboard\"\n    });\n    /**\n     * Checks if specified method parameter is supported by current component.\n     */\n    c(this, \"supportsParam\");\n    this.version = t, this.createRequestId = n, this.postEvent = r, this.supportsParam = Ve(t, {\n      \"openLink.tryInstantView\": [\"web_app_open_link\", \"try_instant_view\"]\n    });\n  }\n  openLink(t, n) {\n    const r = q(t).toString();\n    if (!v(\"web_app_open_link\", this.version)) {\n      window.open(r, \"_blank\");\n      return;\n    }\n    const i = typeof n == \"boolean\" ? {\n      tryInstantView: n\n    } : n || {};\n    this.postEvent(\"web_app_open_link\", {\n      url: r,\n      try_browser: i.tryBrowser,\n      try_instant_view: i.tryInstantView\n    });\n  }\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(t) {\n    const {\n      hostname: n,\n      pathname: r,\n      search: i\n    } = new URL(t, \"https://t.me\");\n    if (n !== \"t.me\") throw new Error(`URL has not allowed hostname: ${n}. Only \"t.me\" is allowed`);\n    if (!v(\"web_app_open_tg_link\", this.version)) {\n      window.location.href = t;\n      return;\n    }\n    this.postEvent(\"web_app_open_tg_link\", {\n      path_full: r + i\n    });\n  }\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard() {\n    const t = this.createRequestId(),\n      {\n        data: n = null\n      } = await d({\n        method: \"web_app_read_text_from_clipboard\",\n        event: \"clipboard_text_received\",\n        postEvent: this.postEvent,\n        params: {\n          req_id: t\n        },\n        capture: ge(t)\n      });\n    return n;\n  }\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(t, n) {\n    this.openTelegramLink(\"https://t.me/share/url?\" + new URLSearchParams({\n      url: t,\n      text: n || \"\"\n    }).toString().replace(/\\+/g, \"%20\"));\n  }\n}\nconst ms = l(({\n  version: s,\n  postEvent: e,\n  createRequestId: t\n}) => new Gt(s, t, e));\nasync function Me(s = {}) {\n  const {\n    is_expanded: e,\n    is_state_stable: t,\n    ...n\n  } = await d({\n    ...s,\n    method: \"web_app_request_viewport\",\n    event: \"viewport_changed\"\n  });\n  return {\n    ...n,\n    isExpanded: e,\n    isStateStable: t\n  };\n}\nfunction x(s) {\n  return s < 0 ? 0 : s;\n}\nclass jt extends ee {\n  constructor({\n    postEvent: t,\n    stableHeight: n,\n    height: r,\n    width: i,\n    isExpanded: o\n  }) {\n    super({\n      height: x(r),\n      isExpanded: o,\n      stableHeight: x(n),\n      width: x(i)\n    });\n    c(this, \"postEvent\");\n    this.postEvent = t;\n  }\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(t) {\n    const {\n      isStateStable: n,\n      ...r\n    } = await Me(t);\n    this.set({\n      ...r,\n      stableHeight: n ? r.height : this.get(\"stableHeight\")\n    });\n  }\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height() {\n    return this.get(\"height\");\n  }\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight() {\n    return this.get(\"stableHeight\");\n  }\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen() {\n    return w(\"viewport_changed\", t => {\n      const {\n          height: n,\n          width: r,\n          is_expanded: i,\n          is_state_stable: o\n        } = t,\n        a = x(n);\n      this.set({\n        height: a,\n        isExpanded: i,\n        width: x(r),\n        ...(o ? {\n          stableHeight: a\n        } : {})\n      });\n    });\n  }\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded() {\n    return this.get(\"isExpanded\");\n  }\n  /**\n   * Current visible area width.\n   */\n  get width() {\n    return this.get(\"width\");\n  }\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand() {\n    this.postEvent(\"web_app_expand\"), this.set(\"isExpanded\", !0);\n  }\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable() {\n    return this.stableHeight === this.height;\n  }\n}\nconst ys = l(\"viewport\", async ({\n  state: s,\n  platform: e,\n  postEvent: t,\n  addCleanup: n\n}) => {\n  let r = !1,\n    i = 0,\n    o = 0,\n    a = 0;\n  if (s) r = s.isExpanded, i = s.height, o = s.width, a = s.stableHeight;else if ([\"macos\", \"tdesktop\", \"unigram\", \"webk\", \"weba\", \"web\"].includes(e)) r = !0, i = window.innerHeight, o = window.innerWidth, a = window.innerHeight;else {\n    const u = await Me({\n      timeout: 1e3,\n      postEvent: t\n    });\n    r = u.isExpanded, i = u.height, o = u.width, a = u.isStateStable ? i : 0;\n  }\n  const p = new jt({\n    postEvent: t,\n    height: i,\n    width: o,\n    stableHeight: a,\n    isExpanded: r\n  });\n  return n(p.listen()), p;\n});\nfunction m(s, e) {\n  document.documentElement.style.setProperty(s, e);\n}\nfunction vs(s, e, t) {\n  t || (t = a => `--tg-${a}-color`);\n  const n = t(\"header\"),\n    r = t(\"bg\"),\n    i = () => {\n      const {\n        headerColor: a\n      } = s;\n      if (Q(a)) m(n, a);else {\n        const {\n          bgColor: p,\n          secondaryBgColor: u\n        } = e;\n        a === \"bg_color\" && p ? m(n, p) : a === \"secondary_bg_color\" && u && m(n, u);\n      }\n      m(r, s.bgColor);\n    },\n    o = [e.on(\"change\", i), s.on(\"change\", i)];\n  return i(), () => o.forEach(a => a());\n}\nfunction Es(s, e) {\n  e || (e = n => `--tg-theme-${n.replace(/[A-Z]/g, r => `-${r.toLowerCase()}`)}`);\n  const t = () => {\n    Object.entries(s.getState()).forEach(([n, r]) => {\n      r && m(e(n), r);\n    });\n  };\n  return t(), s.on(\"change\", t);\n}\nfunction Ss(s, e) {\n  e || (e = u => `--tg-viewport-${u}`);\n  const [t, n, r] = [\"height\", \"width\", \"stable-height\"].map(u => e(u)),\n    i = () => m(t, `${s.height}px`),\n    o = () => m(n, `${s.width}px`),\n    a = () => m(r, `${s.stableHeight}px`),\n    p = [s.on(\"change:height\", i), s.on(\"change:width\", o), s.on(\"change:stableHeight\", a)];\n  return i(), o(), a(), () => p.forEach(u => u());\n}\nfunction Ps(s = !0) {\n  const e = [w(\"reload_iframe\", () => {\n      A(\"iframe_will_reload\"), window.location.reload();\n    })],\n    t = () => e.forEach(n => n());\n  if (s) {\n    const n = document.createElement(\"style\");\n    n.id = \"telegram-custom-styles\", document.head.appendChild(n), e.push(w(\"set_custom_style\", r => {\n      n.innerHTML = r;\n    }), () => document.head.removeChild(n));\n  }\n  return A(\"iframe_ready\", {\n    reload_supported: !0\n  }), t;\n}\nfunction xs() {\n  return typeof window > \"u\";\n}\nasync function Cs() {\n  if (de(window)) return !0;\n  try {\n    return await d({\n      method: \"web_app_request_theme\",\n      event: \"theme_changed\",\n      timeout: 100\n    }), !0;\n  } catch {\n    return !1;\n  }\n}\nfunction Ts(s) {\n  const e = typeof s == \"string\" ? X(s) : s;\n  qe(e);\n  function t(r) {\n    if (typeof r == \"string\") try {\n      const {\n        eventType: i\n      } = ue(r);\n      i === \"web_app_request_theme\" && j(\"theme_changed\", {\n        theme_params: JSON.parse(Ie(e.themeParams))\n      }), i === \"web_app_request_viewport\" && j(\"viewport_changed\", {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: !0,\n        is_expanded: !0\n      });\n    } catch {}\n  }\n  if (_e()) {\n    const r = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = i => {\n      t(i), r(i);\n    };\n    return;\n  }\n  if (le(window)) {\n    const r = window.external.notify.bind(window.external);\n    window.external.notify = i => {\n      t(i), r(i);\n    };\n    return;\n  }\n  const n = window.TelegramWebviewProxy;\n  window.TelegramWebviewProxy = {\n    ...(n || {}),\n    postEvent(...r) {\n      t(JSON.stringify({\n        eventType: r[0],\n        eventData: r[1]\n      })), n && n.postEvent(...r);\n    }\n  };\n}\nfunction zt(s) {\n  return s instanceof V;\n}\nfunction Rs(s, e) {\n  return zt(s) && s.type === e;\n}\nfunction L(s, e) {\n  let t, n, r;\n  return typeof s == \"string\" ? t = s : (t = s.pathname === void 0 ? e : s.pathname, n = s.params, r = s.id), Object.freeze({\n    id: r || (Math.random() * 2 ** 14 | 0).toString(16),\n    pathname: t,\n    params: n\n  });\n}\nclass Ft {\n  constructor(e, t, n = A) {\n    /**\n     * Navigation history.\n     */\n    c(this, \"history\");\n    c(this, \"ee\", new R());\n    /**\n     * True, if current navigator is currently attached.\n     */\n    c(this, \"attached\", !1);\n    /**\n     * Goes to the previous history item.\n     */\n    c(this, \"back\", () => this.go(-1));\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    if (this._index = t, this.postEvent = n, e.length === 0) throw f(Ze, \"History should not be empty.\");\n    if (t < 0 || t >= e.length) throw f(Ke, \"Index should not be zero and higher or equal than history size.\");\n    this.history = e.map(r => L(r, \"\"));\n  }\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach() {\n    this.attached || (this.attached = !0, this.sync(), w(\"back_button_pressed\", this.back));\n  }\n  /**\n   * Currently active history item.\n   */\n  get current() {\n    return this.history[this.index];\n  }\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach() {\n    this.attached = !1, B(\"back_button_pressed\", this.back);\n  }\n  /**\n   * Goes to the next history item.\n   */\n  forward() {\n    this.go(1);\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(e, t) {\n    const n = this.index + e,\n      r = Math.min(Math.max(0, n), this.history.length - 1);\n    (n === r || t) && this.replaceAndMove(r, this.history[r]);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(e, t) {\n    this.go(e - this.index, t);\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.index > 0;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.index !== this.history.length - 1;\n  }\n  /**\n   * Currently active history item index.\n   */\n  get index() {\n    return this._index;\n  }\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(e) {\n    this.hasNext && this.history.splice(this.index + 1), this.replaceAndMove(this.index + 1, L(e, this.current.pathname));\n  }\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(e) {\n    this.replaceAndMove(this.index, L(e, this.current.pathname));\n  }\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  replaceAndMove(e, t) {\n    const n = e - this.index;\n    if (!n && this.current === t) return;\n    const r = this.current;\n    if (this.index !== e) {\n      const i = this._index;\n      this._index = e, this.attached && i > 0 != e > 0 && this.sync();\n    }\n    this.history[e] = t, this.ee.emit(\"change\", {\n      navigator: this,\n      from: r,\n      to: this.current,\n      delta: n\n    });\n  }\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  sync() {\n    this.postEvent(\"web_app_setup_back_button\", {\n      is_visible: !!this.index\n    });\n  }\n}\nfunction $({\n  params: s,\n  ...e\n}) {\n  return {\n    ...(s || {\n      hash: \"\",\n      search: \"\"\n    }),\n    ...e\n  };\n}\nfunction N(s) {\n  const e = typeof s == \"string\" ? s.startsWith(\"/\") : !!(s.pathname && s.pathname.startsWith(\"/\")),\n    t = q(s);\n  return `${e ? t.pathname : t.pathname.slice(1)}${t.search}${t.hash}`;\n}\nfunction W(s, e, t) {\n  let n, r;\n  typeof s == \"string\" ? n = s : (n = N(s), t = s.state, r = s.id);\n  const {\n    pathname: i,\n    search: o,\n    hash: a\n  } = new URL(n, `http://a${I(e, \"/\")}`);\n  return {\n    id: r,\n    pathname: i,\n    params: {\n      hash: a,\n      search: o,\n      state: t\n    }\n  };\n}\nasync function T(s) {\n  return s === 0 ? !0 : Promise.race([new Promise(e => {\n    const t = G(\"popstate\", () => {\n      t(), e(!0);\n    });\n    window.history.go(s);\n  }),\n  // Usually, it takes about 1ms to emit this event, but we use some buffer.\n  new Promise(e => {\n    setTimeout(e, 50, !1);\n  })]);\n}\nasync function Jt() {\n  if (window.history.length <= 1 || (window.history.pushState(null, \"\"), await T(1 - window.history.length))) return;\n  let e = await T(-1);\n  for (; e;) e = await T(-1);\n}\nfunction Be(s) {\n  return q(s).pathname;\n}\nconst ie = 0,\n  U = 1,\n  H = 2;\nclass Le {\n  constructor(e, t, {\n    postEvent: n,\n    hashMode: r = \"classic\",\n    base: i\n  } = {}) {\n    c(this, \"navigator\");\n    c(this, \"ee\", new R());\n    c(this, \"hashMode\");\n    c(this, \"base\");\n    /**\n     * Shows whether the navigator is currently attached to the browser history.\n     */\n    c(this, \"attached\", !1);\n    /**\n     * Handles the window \"popstate\" event.\n     * @param state - event state.\n     */\n    c(this, \"onPopState\", ({\n      state: e\n    }) => {\n      if (e === null) return this.push(this.parsePath(window.location.href));\n      e === ie ? window.history.forward() : e === U && this.back(), e === H && this.forward();\n    });\n    /**\n     * Underlying navigator change event listener.\n     */\n    c(this, \"onNavigatorChange\", async ({\n      to: e,\n      from: t,\n      delta: n\n    }) => {\n      this.attached && (await this.syncHistory()), this.ee.emit(\"change\", {\n        delta: n,\n        from: $(t),\n        to: $(e),\n        navigator: this\n      });\n    });\n    /**\n     * Adds new event listener.\n     */\n    c(this, \"on\", this.ee.on.bind(this.ee));\n    /**\n     * Removes event listener.\n     */\n    c(this, \"off\", this.ee.off.bind(this.ee));\n    this.navigator = new Ft(e.map(o => W(o, \"/\")), t, n), this.navigator.on(\"change\", o => {\n      this.onNavigatorChange(o);\n    }), this.hashMode = r, this.base = Be(i || \"\");\n  }\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach() {\n    this.attached || (this.attached = !0, this.navigator.attach(), window.addEventListener(\"popstate\", this.onPopState), await this.syncHistory());\n  }\n  /**\n   * Goes back in history by 1.\n   */\n  back() {\n    this.navigator.back();\n  }\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = !1, this.navigator.detach(), window.removeEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Goes forward in history.\n   */\n  forward() {\n    return this.navigator.forward();\n  }\n  /**\n   * Current history cursor.\n   */\n  get index() {\n    return this.navigator.index;\n  }\n  /**\n   * Current history item identifier.\n   */\n  get id() {\n    return this.navigator.current.id;\n  }\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(e, t) {\n    return this.navigator.go(e, t);\n  }\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(e, t) {\n    this.navigator.goTo(e, t);\n  }\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash() {\n    return (this.navigator.current.params || {}).hash || \"\";\n  }\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev() {\n    return this.navigator.hasPrev;\n  }\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext() {\n    return this.navigator.hasNext;\n  }\n  /**\n   * Navigation history.\n   */\n  get history() {\n    return this.navigator.history.map($);\n  }\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path() {\n    return N(this);\n  }\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname() {\n    return this.navigator.current.pathname;\n  }\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(e) {\n    let t = q(e);\n    return this.hashMode && (t = q(t.hash.slice(1))), {\n      pathname: t.pathname,\n      search: t.search,\n      hash: t.hash\n    };\n  }\n  push(e, t) {\n    const n = W(e, this.path),\n      {\n        state: r = t\n      } = n.params;\n    this.navigator.push({\n      ...n,\n      params: {\n        ...n.params,\n        state: r\n      }\n    });\n  }\n  replace(e, t) {\n    const n = W(e, this.path),\n      {\n        state: r = t\n      } = n.params;\n    this.navigator.replace({\n      ...n,\n      params: {\n        ...n.params,\n        state: r\n      }\n    });\n  }\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(e) {\n    const t = (this.base.length === 1 ? \"\" : this.base) + I(N(e), \"/\");\n    return this.hashMode ? I(t.slice(1), this.hashMode === \"classic\" ? \"#\" : \"#/\") : t;\n  }\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  async syncHistory() {\n    window.removeEventListener(\"popstate\", this.onPopState);\n    const {\n        state: e\n      } = this,\n      t = this.renderPath(this);\n    await Jt(), this.hasPrev && this.hasNext ? (window.history.replaceState(U, \"\"), window.history.pushState(e, \"\", t), window.history.pushState(H, \"\"), await T(-1)) : this.hasPrev ? (window.history.replaceState(U, \"\"), window.history.pushState(e, \"\", t)) : this.hasNext ? (window.history.replaceState(e, t), window.history.pushState(H, \"\"), await T(-1)) : (window.history.replaceState(ie, \"\"), window.history.pushState(e, \"\", t)), window.addEventListener(\"popstate\", this.onPopState);\n  }\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search() {\n    return (this.navigator.current.params || {}).search || \"\";\n  }\n  /**\n   * Current history item state.\n   */\n  get state() {\n    return (this.navigator.current.params || {}).state;\n  }\n}\nfunction Qt(s) {\n  s || (s = {});\n  const {\n    href: e,\n    hash: t\n  } = window.location;\n  let n = N(s.hashMode === null ? e : t.includes(\"?\") ? t.slice(1) : `?${t.slice(1)}`);\n  const r = s.base ? Be(s.base) : void 0;\n  if (r) {\n    if (!n.startsWith(r)) throw f(Xe, `Path \"${n}\" expected to be starting with \"${r}\"`);\n    n = n.slice(r.length);\n  }\n  return new Le([n], 0, s);\n}\nfunction As(s) {\n  const e = s.match(/#(.+)/);\n  return e ? e[1] : null;\n}\nfunction Yt(s, e) {\n  if (ke()) {\n    const t = sessionStorage.getItem(s);\n    if (t) try {\n      const {\n        index: n,\n        history: r\n      } = JSON.parse(t);\n      return new Le(r, n, e);\n    } catch (n) {\n      console.error(\"Unable to restore hash navigator state.\", n);\n    }\n  }\n  return Qt(e);\n}\nfunction Is(s, e) {\n  const t = Yt(s, e),\n    n = () => sessionStorage.setItem(s, JSON.stringify({\n      index: t.index,\n      history: t.history\n    }));\n  return t.on(\"change\", n), n(), t;\n}\nexport { lt as BackButton, Ft as BasicNavigator, Pt as BiometryManager, Le as BrowserNavigator, Ct as ClosingBehavior, It as CloudStorage, Xe as ERR_INVALID_PATH_BASE, Je as ERR_INVOKE_CUSTOM_METHOD_RESPONSE, ze as ERR_METHOD_PARAMETER_UNSUPPORTED, je as ERR_METHOD_UNSUPPORTED, Ze as ERR_NAVIGATION_HISTORY_EMPTY, Ke as ERR_NAVIGATION_INDEX_INVALID, Xt as ERR_NAVIGATION_ITEM_INVALID, ce as ERR_PARSE, es as ERR_SSR_INIT, Qe as ERR_TIMED_OUT, Ye as ERR_UNEXPECTED_TYPE, Fe as ERR_UNKNOWN_ENV, R as EventEmitter, qt as HapticFeedback, kt as InitData, Nt as Invoice, Vt as MainButton, Bt as MiniApp, $t as Popup, Wt as QRScanner, V as SDKError, Ut as SettingsButton, Ht as SwipeBehavior, Ot as ThemeParams, Gt as Utils, jt as Viewport, At as array, vs as bindMiniAppCSSVars, Es as bindThemeParamsCSSVars, Ss as bindViewportCSSVars, b as boolean, ge as captureSameReq, z as classNames, ot as compareVersions, Qt as createBrowserNavigatorFromLocation, pt as createPostEvent, q as createSafeURL, Ee as date, As as getHash, Be as getPathname, ns as initBackButton, rs as initBiometryManager, is as initClosingBehavior, os as initCloudStorage, as as initHapticFeedback, cs as initInitData, hs as initInvoice, us as initMainButton, ls as initMiniApp, Is as initNavigator, ds as initPopup, _s as initQRScanner, fs as initSettingsButton, gs as initSwipeBehavior, ws as initThemeParams, ms as initUtils, ys as initViewport, Ps as initWeb, C as invokeCustomMethod, ye as isColorDark, _e as isIframe, ke as isPageReload, Q as isRGB, ht as isRGBShort, zt as isSDKError, Rs as isSDKErrorOfType, xs as isSSR, Cs as isTMA, g as json, ss as mergeClassNames, Ts as mockTelegramEnv, y as number, B as off, w as on, ps as parseInitData, X as parseLaunchParams, De as parseThemeParams, A as postEvent, d as request, xt as requestBiometryInfo, bs as requestThemeParams, Me as requestViewport, vt as retrieveLaunchParams, _t as rgb, K as searchParams, yt as serializeLaunchParams, Ie as serializeThemeParams, m as setCSSVar, Kt as setDebug, ts as setTargetOrigin, h as string, He as subscribe, v as supports, ct as targetOrigin, me as toRGB, ae as unsubscribe, N as urlToPath, be as withTimeout };","map":{"version":3,"names":["oe","s","e","t","n","reset","ae","M","count","unsubscribe","it","He","subscribe","Oe","constructor","scope","options","print","Date","r","Intl","DateTimeFormat","hour","minute","second","fractionalSecondDigits","timeZone","format","textColor","i","bgColor","o","a","console","error","log","F","O","se","onEvent","name","payload","Kt","Ge","R","c","Map","clear","listeners","subscribeListeners","listenersCount","length","emit","forEach","event","args","get","off","on","set","push","splice","G","window","addEventListener","removeEventListener","J","flat","V","Error","cause","type","Object","setPrototypeOf","prototype","f","je","ze","Fe","Je","Qe","Ye","ce","Ze","Ke","Xt","es","Xe","E","D","parser","isOptional","parse","optional","S","b","String","pe","bind","from","he","JSON","Array","isArray","g","y","Number","isNaN","h","toString","ue","eventType","eventData","et","j","dispatchEvent","MessageEvent","data","stringify","source","parent","tt","st","clipboard_text_received","req_id","custom_method_invoked","result","popup_closed","button_id","viewport_changed","height","width","innerWidth","is_state_stable","is_expanded","nt","innerHeight","p","rt","B","w","k","ot","split","Math","max","parseInt","_","v","includes","le","external","notify","de","TelegramWebviewProxy","postEvent","_e","self","top","at","fe","ts","ct","A","postMessage","targetOrigin","pt","ge","we","be","Promise","race","setTimeout","d","capture","timeout","map","method","params","C","z","entries","filter","Boolean","join","ss","reduce","Q","test","ht","me","replace","toLowerCase","repeat","match","slice","ye","sqrt","ut","ee","state","clone","Y","ve","Z","supports","lt","isVisible","show","hide","is_visible","Ee","K","URLSearchParams","dt","id","title","photoUrl","username","ne","addedToAttachmentMenu","allowsWriteToPm","firstName","isBot","isPremium","languageCode","lastName","Se","authDate","canSendAfter","chat","chatInstance","chatType","hash","queryId","receiver","startParam","user","_t","ft","toUpperCase","gt","Pe","X","botInline","initData","initDataRaw","platform","showSettings","themeParams","version","xe","wt","location","href","Ce","performance","getEntriesByType","bt","Te","Re","sessionStorage","setItem","Ae","getItem","mt","Ie","fromEntries","yt","qe","vt","message","ke","Et","St","l","createRequestId","addCleanup","u","$e","then","ns","P","arguments","Ne","available","device_id","token_saved","access_requested","access_granted","deviceId","tokenSaved","accessRequested","accessGranted","Pt","auth","openSettings","requestAccess","updateToken","authenticate","reason","authPromise","trim","token","finally","accessPromise","biometryType","status","xt","rs","Ct","isConfirmationNeeded","need_confirmation","disableConfirmation","enableConfirmation","is","te","Tt","Rt","itemParser","of","At","re","It","delete","getKeys","keys","key","value","os","qt","impactOccurred","notificationOccurred","selectionChanged","impact_style","notification_type","as","kt","canSendAfterDate","getTime","cs","ps","Nt","isOpened","open","hostname","pathname","URL","slug","hs","Vt","commit","text","is_active","isEnabled","is_progress_visible","isLoaderVisible","color","text_color","disable","enable","hideLoader","setParams","showLoader","setText","setTextColor","setBgColor","us","buttonTextColor","buttonColor","Dt","contact","userId","phoneNumber","Ve","Mt","Bt","requestPhoneAccess","requestWriteAccess","switchInlineQuery","setHeaderColor","setBackgroundColor","supportsParam","getRequestedContact","close","return_back","headerColor","isBotInline","isDark","ready","requestContact","now","requestPhoneAccessPromise","requestWriteAccessPromise","sendData","size","Blob","color_key","query","chat_types","ls","headerBgColor","Lt","buttons","$t","ds","Wt","_s","Ut","fs","Ht","isVerticalSwipeEnabled","disableVerticalSwipe","enableVerticalSwipe","allow_vertical_swipe","gs","De","Ot","accentTextColor","destructiveTextColor","getState","hintColor","linkColor","secondaryBgColor","sectionBgColor","sectionHeaderTextColor","sectionSeparatorColor","listen","theme_params","subtitleTextColor","ws","bs","I","startsWith","q","search","Gt","readTextFromClipboard","openLink","tryInstantView","url","try_browser","tryBrowser","try_instant_view","openTelegramLink","path_full","shareURL","ms","Me","isExpanded","isStateStable","x","jt","stableHeight","sync","expand","isStable","ys","m","document","documentElement","style","setProperty","vs","actualize","Es","Ss","setHeight","setWidth","setStableHeight","Ps","reload","cleanup","createElement","head","appendChild","innerHTML","removeChild","reload_supported","xs","Cs","Ts","zt","Rs","L","freeze","random","Ft","go","_index","history","attach","attached","back","current","index","detach","forward","min","replaceAndMove","goTo","hasPrev","hasNext","navigator","to","delta","$","N","W","T","Jt","pushState","Be","ie","U","H","Le","hashMode","base","parsePath","syncHistory","onNavigatorChange","onPopState","path","renderPath","replaceState","Qt","As","Yt","Is","saveState"],"sources":["/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/misc/createSingleton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/listening/unsubscribe.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/listening/subscribe.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/logger/Logger.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/debug/debug.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/events/event-emitter/EventEmitter.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/events/onWindow.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/misc/createCleanup.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/errors/SDKError.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/errors/createError.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/errors/errors.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/createTypeError.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/ValueParser/ValueParser.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/createValueParserGenerator.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/boolean.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parseBySchema.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/toRecord.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/json.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/number.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/string.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/parseMessage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/cleanupEventHandlers.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/emitMiniAppsEvent.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/event-handlers/defineEventHandlers.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/event-emitter/createMiniAppsEventEmitter.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/event-emitter/singleton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/listening/off.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/events/listening/on.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/misc/isRecord.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/version/compareVersions.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/supports.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/hasExternalNotify.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/hasWebviewProxy.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/isIframe.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/target-origin.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/methods/postEvent.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/methods/createPostEvent.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/captureSameReq.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/timeout/createTimeoutError.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/timeout/withTimeout.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/request.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/bridge/invokeCustomMethod.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classnames/classNames.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classnames/mergeClassNames.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/colors/isRGB.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/colors/isRGBShort.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/colors/toRGB.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/colors/isColorDark.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/State/State.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/WithStateUtils.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/supports/createSupportsFn.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/WithSupportsAndStateUtils.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BackButton/BackButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/date.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/searchParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/parsers/chat.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/parsers/user.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/parsers/initData.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/rgb.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/keys.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/themeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/parseLaunchParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromUrl.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromLocation.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/getFirstNavigationEntry.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromPerformance.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/storage/storage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/retrieveFromStorage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/serializeThemeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/serializeLaunchParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/saveToStorage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/launch-params/retrieveLaunchParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/isPageReload.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/request-id/createRequestIdGenerator.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/misc/createComponentInitFn/createComponentInitFn.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BackButton/initBackButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/WithSupportsAndTrackableState.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BiometryManager/formatEvent.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BiometryManager/BiometryManager.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BiometryManager/requestBiometryInfo.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/BiometryManager/initBiometryManager.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/WithTrackableState.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ClosingBehavior/ClosingBehavior.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ClosingBehavior/initClosingBehavior.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/classes/WithSupports.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/ArrayParser/ArrayParser.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/parsing/parsers/array.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/CloudStorage/CloudStorage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/CloudStorage/initCloudStorage.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/HapticFeedback/HapticFeedback.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/HapticFeedback/initHapticFeedback.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/InitData.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/initInitData.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/InitData/parseInitData.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Invoice/Invoice.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Invoice/initInvoice.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/MainButton/MainButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/MainButton/initMainButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/MiniApp/parsing/contact.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/supports/createSupportsParamFn.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/timeout/sleep.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/MiniApp/MiniApp.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/MiniApp/initMiniApp.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Popup/preparePopupParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Popup/Popup.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Popup/initPopup.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/QRScanner/QRScanner.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/QRScanner/initQRScanner.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/SettingsButton/SettingsButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/SettingsButton/initSettingsButton.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/SwipeBehavior/SwipeBehavior.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/SwipeBehavior/initSwipeBehavior.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/parsing/parseThemeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/ThemeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/initThemeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/ThemeParams/requestThemeParams.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/ensurePrefix.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/createSafeURL.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Utils/Utils.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Utils/initUtils.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Viewport/requestViewport.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Viewport/Viewport.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/components/Viewport/initViewport.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/css-vars/setCSSVar.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/css-vars/bindMiniAppCSSVars.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/css-vars/bindThemeParamsCSSVars.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/css-vars/bindViewportCSSVars.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/initWeb.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/isSSR.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/isTMA.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/env/mockTelegramEnv.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/errors/isSDKError.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/errors/isSDKErrorOfType.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BasicNavigator/prepareItem.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BasicNavigator/BasicNavigator.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/basicItemToBrowser.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/urlToPath.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/prepareItem.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/go.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/drop.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/getPathname.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/BrowserNavigator.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/getHash.ts","/Users/takuro/Projects/wordle/frontend/node_modules/@telegram-apps/sdk/src/navigation/initNavigator.ts"],"sourcesContent":["/**\n * Creates resettable singleton. We mostly need it for test purposes.\n * @param create - function which creates singleton entity.\n * @param onReset - function which will be called in case, singleton was reset.\n */\nexport function createSingleton<T>(\n  create: (reset: () => void) => T,\n  onReset?: (entity: T) => void,\n): [\n  /**\n   * Returns singleton entity.\n   */\n  get: () => T,\n  /**\n   * Resets last stored entity.\n   */\n  reset: () => void,\n] {\n  let cached: T | undefined;\n  const reset = () => {\n    cached !== undefined && onReset && onReset(cached);\n    cached = undefined;\n  };\n\n  return [() => (cached === undefined ? cached = create(reset) : cached), reset];\n}\n","import { miniAppsEventEmitter, resetMiniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Removes global event listener.\n * @param listener - event listener.\n */\nexport function unsubscribe(listener: MiniAppsSubscribeListener): void {\n  const ee = miniAppsEventEmitter();\n  const { count } = ee;\n  ee.unsubscribe(listener);\n\n  // If event emitter now has no listeners, we can make a cleanup.\n  if (count && !ee.count) {\n    resetMiniAppsEventEmitter();\n  }\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport { unsubscribe } from '../listening/unsubscribe.js';\nimport type { MiniAppsSubscribeListener } from '../types.js';\n\n/**\n * Subscribes to all events sent from the native Telegram application.\n * @param listener - event listener to bind.\n * @returns Function to remove bound event listener.\n */\nexport function subscribe(listener: MiniAppsSubscribeListener): RemoveEventListenerFn {\n  miniAppsEventEmitter().subscribe(listener);\n  return () => unsubscribe(listener);\n}\n","/**\n * Message log level.\n */\nexport type LogLevel = 'log' | 'error';\n\nexport interface LoggerOptions {\n  bgColor?: string;\n  textColor?: string;\n}\n\nexport class Logger implements Pick<Console, 'log' | 'error'> {\n  constructor(\n    private readonly scope: string,\n    private readonly options: LoggerOptions = {},\n  ) {\n  }\n\n  /**\n   * Prints message into a console in case, logger is currently enabled.\n   * @param level - log level.\n   * @param args - arguments.\n   */\n  private print(level: LogLevel, ...args: any[]): void {\n    const now = new Date();\n    const date = Intl\n      .DateTimeFormat('en-GB', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        fractionalSecondDigits: 3,\n        timeZone: 'UTC',\n      })\n      .format(now);\n\n    const { textColor, bgColor } = this.options;\n    const commonCss = 'font-weight: bold;padding: 0 5px;border-radius:5px';\n\n    console[level](\n      `%c${date}%c / %c${this.scope}`,\n      `${commonCss};background-color: lightblue;color:black`,\n      '',\n      `${commonCss};${textColor ? `color:${textColor};` : ''}${bgColor ? `background-color:${bgColor}` : ''}`,\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      ...args,\n    );\n  }\n\n  /**\n   * Prints error message into a console.\n   * @param args\n   */\n  error(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('error', ...args);\n  }\n\n  /**\n   * Prints log message into a console.\n   * @param args\n   */\n  log(...args: any[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    this.print('log', ...args);\n  }\n}\n","import { subscribe } from '@/bridge/events/listening/subscribe.js';\nimport { unsubscribe } from '@/bridge/events/listening/unsubscribe.js';\nimport { Logger } from '@/logger/Logger.js';\nimport type { MiniAppsSubscribeListener } from '@/bridge/events/types.js';\n\nexport const logger = new Logger('SDK', {\n  bgColor: 'forestgreen',\n  textColor: 'white',\n});\n\nlet debugEnabled = false;\n\nconst onEvent: MiniAppsSubscribeListener = ({ name, payload }) => {\n  logger.log('Event received:', payload ? { name, payload } : { name });\n};\n\n/**\n * Sets new debug mode. Enabling debug mode leads to printing additional messages in the console,\n * related to the processes inside the package.\n * @param enable - should debug be enabled.\n */\nexport function setDebug(enable: boolean): void {\n  if (debugEnabled !== enable) {\n    debugEnabled = enable;\n    enable ? subscribe(onEvent) : unsubscribe(onEvent);\n  }\n}\n\n/**\n * Logs info message into the console.\n * @param args - additional arguments.\n */\nexport function log(...args: any[]): void {\n  if (debugEnabled) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    logger.log(...args);\n  }\n}\n","import type { RemoveEventListenerFn } from '../types.js';\nimport type {\n  EmptyEventName,\n  EventListener,\n  EventName,\n  EventParams,\n  NonEmptyEventName,\n  SubscribeListener,\n} from './types.js';\n\nexport class EventEmitter<Schema> {\n  private readonly listeners: Map<\n    string,\n    [listener: EventListener<any>, once?: boolean][]\n  > = new Map();\n\n  private listenersCount = 0;\n\n  private subscribeListeners: SubscribeListener<Schema>[] = [];\n\n  /**\n   * Removes all event listeners.\n   */\n  clear() {\n    this.listeners.clear();\n    this.subscribeListeners = [];\n  }\n\n  /**\n   * Returns count of bound listeners.\n   */\n  get count(): number {\n    return this.listenersCount + this.subscribeListeners.length;\n  }\n\n  /**\n   * Emits known event which has no parameters.\n   * @param event - event name.\n   */\n  emit<E extends EmptyEventName<Schema>>(event: E): void;\n\n  /**\n   * Emits known event which has parameters.\n   * @param event - event name.\n   * @param args - list of event listener arguments.\n   */\n  emit<E extends NonEmptyEventName<Schema>>(event: E, ...args: EventParams<Schema[E]>): void;\n\n  emit(event: EventName<Schema>, ...args: any[]): void {\n    this.subscribeListeners.forEach((l) => l({\n      event,\n      args: args as EventParams<Schema[EventName<Schema>]>,\n    }));\n\n    const listeners = this.listeners.get(event) || [];\n\n    listeners.forEach(([listener, once]) => {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      listener(...args);\n      if (once) {\n        this.off(event, listener);\n      }\n    });\n  }\n\n  /**\n   * Adds new event listener.\n   * @param event - event name.\n   * @param listener - event listener.\n   * @param once - should listener be called only once.\n   * @returns Function to remove bound event listener.\n   */\n  on<E extends EventName<Schema>>(\n    event: E,\n    listener: EventListener<Schema[E]>,\n    once?: boolean,\n  ): RemoveEventListenerFn {\n    let listeners = this.listeners.get(event);\n    if (!listeners) {\n      this.listeners.set(event, listeners = []);\n    }\n\n    listeners.push([listener, once]);\n    this.listenersCount += 1;\n\n    return () => this.off(event, listener);\n  }\n\n  /**\n   * Removes event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param event - event name.\n   * @param listener - event listener.\n   */\n  off<E extends EventName<Schema>>(event: E, listener: EventListener<Schema[E]>): void {\n    const listeners = this.listeners.get(event) || [];\n    for (let i = 0; i < listeners.length; i += 1) {\n      if (listener === listeners[i][0]) {\n        listeners.splice(i, 1);\n        this.listenersCount -= 1;\n        return;\n      }\n    }\n  }\n\n  /**\n   * Adds a new event listener for all events.\n   * @param listener - event listener.\n   * @returns Function to remove event listener.\n   */\n  subscribe(listener: SubscribeListener<Schema>): RemoveEventListenerFn {\n    this.subscribeListeners.push(listener);\n    return () => this.unsubscribe(listener);\n  }\n\n  /**\n   * Removes global event listener. In case, specified listener was bound several times, it removes\n   * only a single one.\n   * @param listener - event listener.\n   */\n  unsubscribe(listener: SubscribeListener<Schema>): void {\n    for (let i = 0; i < this.subscribeListeners.length; i += 1) {\n      if (this.subscribeListeners[i] === listener) {\n        this.subscribeListeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n}\n","import type { RemoveEventListenerFn } from './types.js';\n\n/**\n * Adds new event listener using window.addEventListener.\n * @param type - event name.\n * @param listener - event listener.\n * @param options - listening options.\n * @returns Function to remove event listener.\n */\nexport function onWindow<K extends keyof WindowEventMap>(\n  type: K,\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions,\n): RemoveEventListenerFn {\n  window.addEventListener(type, listener, options);\n  return () => window.removeEventListener(type, listener, options);\n}\n","import { CleanupFn } from '@/types/index.js';\n\n/**\n * Returns a tuple, containing function to add cleanup, call cleanup, and flag showing whether\n * cleanup was called. Cleanup will not be performed in case, it was done before.\n */\nexport function createCleanup(...fns: (CleanupFn | CleanupFn[])[]): [\n  add: (fn: CleanupFn) => void,\n  cleanup: () => void,\n  cleanedUp: boolean,\n] {\n  let cleanedUp = false;\n  const cache = fns.flat(1);\n\n  return [\n    (fn) => !cleanedUp && cache.push(fn),\n    () => {\n      if (!cleanedUp) {\n        cleanedUp = true;\n        cache.forEach(clean => clean());\n      }\n    },\n    cleanedUp,\n  ];\n}","import type { ErrorType } from './errors.js';\n\n/**\n * Error used across the SDK.\n */\nexport class SDKError extends Error {\n  constructor(public readonly type: ErrorType, message?: string, cause?: unknown) {\n    super(message, { cause });\n    Object.setPrototypeOf(this, SDKError.prototype);\n  }\n}\n","import { SDKError } from './SDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Creates new error using specified type and message.\n * @param type - error code.\n * @param message - error message.\n * @param cause - original error.\n */\nexport function createError(type: ErrorType, message: string, cause?: unknown): SDKError {\n  return new SDKError(type, message, cause);\n}\n","/**\n * Specified Mini Apps method is unsupported.\n */\nexport const ERR_METHOD_UNSUPPORTED = 'ERR_METHOD_UNSUPPORTED';\n\n/**\n * Specified Mini Apps method parameter is unsupported.\n */\nexport const ERR_METHOD_PARAMETER_UNSUPPORTED = 'ERR_METHOD_PARAMETER_UNSUPPORTED';\n\n/**\n * Current environment is not Telegram application.\n */\nexport const ERR_UNKNOWN_ENV = 'ERR_UNKNOWN_ENV';\n\n/**\n * Telegram application returned and error while invoking custom method.\n */\nexport const ERR_INVOKE_CUSTOM_METHOD_RESPONSE = 'ERR_INVOKE_CUSTOM_METHOD_RESPONSE';\n\n/**\n * Timeout reached.\n */\nexport const ERR_TIMED_OUT = 'ERR_TIMED_OUT';\n\n/**\n * Value has unexpected type.\n */\nexport const ERR_UNEXPECTED_TYPE = 'ERR_UNEXPECTED_TYPE';\n\n/**\n * Something went wrong during value parsing.\n */\nexport const ERR_PARSE = 'ERR_PARSE';\n\n/**\n * Navigation entries list is empty.\n */\nexport const ERR_NAVIGATION_HISTORY_EMPTY = 'ERR_NAVIGATION_LIST_EMPTY';\n\n/**\n * Navigation entries cursor is invalid.\n */\nexport const ERR_NAVIGATION_INDEX_INVALID = 'ERR_NAVIGATION_CURSOR_INVALID';\n\n/**\n * Navigation entries item is invalid.\n */\nexport const ERR_NAVIGATION_ITEM_INVALID = 'ERR_NAVIGATION_ITEM_INVALID';\n\n/**\n * SSR component initialization failed.\n */\nexport const ERR_SSR_INIT = 'ERR_SSR_INIT';\n\n/**\n * Path starts from the invalid base.\n */\nexport const ERR_INVALID_PATH_BASE = 'ERR_INVALID_PATH_BASE';\n\nexport type ErrorType =\n  | typeof ERR_METHOD_UNSUPPORTED\n  | typeof ERR_METHOD_PARAMETER_UNSUPPORTED\n  | typeof ERR_UNKNOWN_ENV\n  | typeof ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n  | typeof ERR_TIMED_OUT\n  | typeof ERR_PARSE\n  | typeof ERR_UNEXPECTED_TYPE\n  | typeof ERR_NAVIGATION_HISTORY_EMPTY\n  | typeof ERR_NAVIGATION_INDEX_INVALID\n  | typeof ERR_NAVIGATION_ITEM_INVALID\n  | typeof ERR_SSR_INIT\n  | typeof ERR_INVALID_PATH_BASE;\n","import { createError } from '@/errors/createError.js';\nimport { ERR_UNEXPECTED_TYPE } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates instance of TypeError stating, that value has unexpected type.\n */\nexport function createTypeError(): SDKError {\n  return createError(ERR_UNEXPECTED_TYPE, 'Value has unexpected type');\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser } from '../types.js';\nimport type { ValueParserOptionalResult, ValueParserParseResult } from './types.js';\n\nexport class ValueParser<ResultType, IsOptional extends boolean> {\n  constructor(\n    protected parser: Parser<ResultType>,\n    protected isOptional: IsOptional,\n    protected type?: string,\n  ) {\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  parse(value: unknown): ValueParserParseResult<ResultType, IsOptional> {\n    // In case, parsing result is specified as optional, and passed value is considered as empty,\n    // we can return undefined. Otherwise, pass to parser.\n    if (this.isOptional && value === undefined) {\n      return undefined as ValueParserParseResult<ResultType, IsOptional>;\n    }\n\n    try {\n      return this.parser(value) as ValueParserParseResult<ResultType, IsOptional>;\n    } catch (cause) {\n      throw createError(\n        ERR_PARSE,\n        `Unable to parse value${this.type ? ` as ${this.type}` : ''}`,\n        cause,\n      );\n    }\n  }\n\n  optional(): ValueParserOptionalResult<this, ResultType> {\n    this.isOptional = true as IsOptional;\n    return this as ValueParserOptionalResult<this, ResultType>;\n  }\n}\n","import { ValueParser } from './ValueParser/ValueParser.js';\nimport type { Parser } from './types.js';\n\nexport type ValueParserGenerator<T> = () => ValueParser<T, false>;\n\n/**\n * Creates function which generates new scalar value parser based on the specified one.\n * @param parser - parser to use as basic.\n * @param type - type name.\n */\nexport function createValueParserGenerator<T>(\n  parser: Parser<T>,\n  type?: string,\n): ValueParserGenerator<T> {\n  return () => new ValueParser(parser, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as boolean.\n */\nexport const boolean: ValueParserGenerator<boolean> = createValueParserGenerator((value) => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  const asString = String(value);\n\n  if (asString === '1' || asString === 'true') {\n    return true;\n  }\n\n  if (asString === '0' || asString === 'false') {\n    return false;\n  }\n\n  throw createTypeError();\n}, 'boolean');\n","import { createError } from '@/errors/createError.js';\nimport { ERR_PARSE } from '@/errors/errors.js';\n\nimport type { Parser, Schema } from './types.js';\n\n/**\n * Parses external value by specified schema. Functions iterates over each schema field\n * and uses getField function to get its value from the external source.\n * @param schema - object schema.\n * @param getField - function which gets external value by its field name.\n */\nexport function parseBySchema<T>(\n  schema: Schema<T>,\n  getField: (field: string) => unknown,\n): T {\n  const result = {} as T;\n\n  for (const field in schema) {\n    const definition = schema[field];\n    if (!definition) {\n      continue;\n    }\n\n    let from: string;\n    let parser: Parser<any>;\n\n    // In case, definition has \"type\" property, then SchemaFieldDetailed was passed.\n    if (typeof definition === 'function' || 'parse' in definition) {\n      // Otherwise we are working with either parser function or instance.\n      from = field;\n      parser = typeof definition === 'function' ? definition : definition.parse.bind(definition);\n    } else {\n      const { type: definitionType } = definition;\n\n      from = definition.from || field;\n      parser = typeof definitionType === 'function'\n        ? definitionType\n        : definitionType.parse.bind(definitionType);\n    }\n\n    try {\n      const parsedValue = parser(getField(from));\n      if (parsedValue !== undefined) {\n        (result as any)[field] = parsedValue;\n      }\n    } catch (error) {\n      throw createError(ERR_PARSE, `Unable to parse field \"${field}\"`, error);\n    }\n  }\n\n  return result;\n}\n","import { createTypeError } from './createTypeError.js';\n\n/**\n * Converts value to record.\n * @param value - value to convert.\n * @throws {Error} Value passed as a string does not represent JSON object.\n * @throws {Error} Value is not convertable.\n */\nexport function toRecord(value: unknown): Record<string, unknown> {\n  let formattedValue: any = value;\n\n  // Convert value to JSON in case, it is string. We expect value to be JSON string.\n  if (typeof formattedValue === 'string') {\n    formattedValue = JSON.parse(formattedValue);\n  }\n\n  // We expect json to be usual object.\n  if (\n    typeof formattedValue !== 'object'\n    || formattedValue === null\n    || Array.isArray(formattedValue)\n  ) {\n    throw createTypeError();\n  }\n\n  return formattedValue as Record<string, unknown>;\n}\n","import { parseBySchema } from '../parseBySchema.js';\nimport { toRecord } from '../toRecord.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new Json parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function json<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    const record = toRecord(value);\n    return parseBySchema(schema, (field) => record[field]);\n  }, false, type);\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as number.\n */\nexport const number: ValueParserGenerator<number> = createValueParserGenerator((value) => {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const num = Number(value);\n\n    if (!Number.isNaN(num)) {\n      return num;\n    }\n  }\n\n  throw createTypeError();\n}, 'number');\n","import { createTypeError } from '../createTypeError.js';\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as string.\n */\nexport const string: ValueParserGenerator<string> = createValueParserGenerator((value) => {\n  if (typeof value === 'string' || typeof value === 'number') {\n    return value.toString();\n  }\n  throw createTypeError();\n}, 'string');\n","import { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\n\n/**\n * Message format used in communication between client and Telegram applications.\n */\nexport interface MiniAppsMessage {\n  /**\n   * Event name.\n   */\n  eventType: string;\n  /**\n   * Event parameters.\n   */\n  eventData?: unknown;\n}\n\n/**\n * Parses value as a message between client and Telegram applications.\n * @param value - value to parse.\n */\nexport function parseMessage(value: unknown): MiniAppsMessage {\n  return json({\n    eventType: string(),\n    eventData: (v) => v,\n  }).parse(value);\n}\n","/**\n * Removes global event handlers, used by the package.\n */\nexport function cleanupEventHandlers(): void {\n  ['TelegramGameProxy_receiveEvent', 'TelegramGameProxy', 'Telegram'].forEach((prop) => {\n    delete window[prop as keyof Window];\n  });\n}\n","/**\n * Emits event sent from Telegram native application like it was sent in\n * default web environment between 2 iframes. It dispatches new MessageEvent\n * and expects it to be handled via `window.addEventListener('message', ...)`\n * as developer would do it to handle messages sent from the parent iframe.\n * @param eventType - event name.\n * @param eventData - event payload.\n */\nexport function emitMiniAppsEvent(eventType: string, eventData: unknown): void {\n  window.dispatchEvent(new MessageEvent('message', {\n    data: JSON.stringify({ eventType, eventData }),\n    // We specify window.parent to imitate the case, the parent iframe sent us this event.\n    source: window.parent,\n  }));\n}\n","import { emitMiniAppsEvent } from './emitMiniAppsEvent.js';\n\n/**\n * Defines special handlers by known paths, which are recognized by\n * Telegram as ports to receive events. This function also sets special\n * function in global window object to prevent duplicate declaration.\n */\nexport function defineEventHandlers() {\n  // Iterate over each path, where \"receiveEvent\" function should be\n  // defined. This function is called by external environment in case,\n  // it wants to emit some event.\n  [\n    ['TelegramGameProxy_receiveEvent'], // Windows Phone.\n    ['TelegramGameProxy', 'receiveEvent'], // Desktop.\n    ['Telegram', 'WebView', 'receiveEvent'], // Android and iOS.\n  ].forEach((path) => {\n    // Path starts from the \"window\" object.\n    let pointer = window as any;\n\n    path.forEach((item, idx, arr) => {\n      // We are on the last iteration, where function property name is passed.\n      if (idx === arr.length - 1) {\n        pointer[item] = emitMiniAppsEvent;\n        return;\n      }\n\n      if (!(item in pointer)) {\n        pointer[item] = {};\n      }\n      pointer = pointer[item];\n    });\n  });\n}\n","import { logger } from '@/debug/debug.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { onWindow } from '@/events/onWindow.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport { type MiniAppsMessage, parseMessage } from '../../parseMessage.js';\nimport { cleanupEventHandlers } from '../event-handlers/cleanupEventHandlers.js';\nimport { defineEventHandlers } from '../event-handlers/defineEventHandlers.js';\nimport type {\n  MiniAppsEventName,\n  MiniAppsEventPayload,\n  MiniAppsEventEmitter,\n  MiniAppsEvents,\n} from '../types.js';\n\n/**\n * Parsers for problematic Mini Apps events.\n */\nconst parsers: {\n  [E in MiniAppsEventName]?: {\n    parse(value: unknown): MiniAppsEventPayload<E>;\n  }\n} = {\n  clipboard_text_received: json({\n    req_id: string(),\n    data: (value) => (value === null ? value : string().optional().parse(value)),\n  }),\n  custom_method_invoked: json({\n    req_id: string(),\n    result: (value) => value,\n    error: string().optional(),\n  }),\n  popup_closed: {\n    parse(value) {\n      return json({\n        button_id: (value) => (\n          value === null || value === undefined\n            ? undefined\n            : string().parse(value)\n        ),\n      }).parse(value ?? {});\n    },\n  },\n  viewport_changed: json({\n    height: number(),\n    width: (value) => (\n      value === null || value === undefined\n        ? window.innerWidth\n        : number().parse(value)\n    ),\n    is_state_stable: boolean(),\n    is_expanded: boolean(),\n  }),\n};\n\n/**\n * Creates new event emitter, which handles events from the Telegram application.\n */\nexport function createMiniAppsEventEmitter(): [\n  /**\n   * Created event emitter.\n   */\n  emitter: MiniAppsEventEmitter,\n  /**\n   * Function to dispose created emitter.\n   */\n  dispose: () => void,\n] {\n  // We use this event emitter for better developer experience, using the subscribe method.\n  const subEmitter = new EventEmitter<{ event: any[] }>();\n\n  // Event emitter processing all the incoming events.\n  const mainEmitter = new EventEmitter<MiniAppsEvents>();\n\n  mainEmitter.subscribe(event => {\n    subEmitter.emit('event', { name: event.event, payload: event.args[0] });\n  });\n\n  // Define event handles, which will proxy native method calls to their web version.\n  defineEventHandlers();\n\n  // List of cleanup functions, which should be called on dispose.\n  const [, cleanup] = createCleanup(\n    // Don't forget to remove created handlers.\n    cleanupEventHandlers,\n    // Add \"resize\" event listener to make sure, we always have fresh viewport information.\n    // Desktop version of Telegram is sometimes not sending the viewport_changed\n    // event. For example, when the MainButton is shown. That's why we should\n    // add our own listener to make sure, viewport information is always fresh.\n    // Issue: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/10\n    onWindow('resize', () => {\n      mainEmitter.emit('viewport_changed', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        is_state_stable: true,\n        is_expanded: true,\n      });\n    }),\n    // Add listener, which handles events sent from the Telegram web application and also events\n    // generated by the local emitEvent function.\n    onWindow('message', (event) => {\n      // Ignore non-parent window messages.\n      if (event.source !== window.parent) {\n        return;\n      }\n\n      // Parse incoming event data.\n      let message: MiniAppsMessage;\n      try {\n        message = parseMessage(event.data);\n      } catch {\n        // We ignore incorrect messages as they could be generated by any other code.\n        return;\n      }\n\n      const { eventType, eventData } = message;\n      const parser = parsers[eventType as keyof typeof parsers];\n\n      try {\n        const data = parser ? parser.parse(eventData) : eventData;\n        mainEmitter.emit(...(data ? [eventType, data] : [eventType]) as [any, any]);\n      } catch (cause) {\n        logger.error(\n          `An error occurred processing the \"${eventType}\" event from the Telegram application.\\nPlease, file an issue here:\\nhttps://github.com/Telegram-Mini-Apps/telegram-apps/issues/new/choose`,\n          message,\n          cause,\n        );\n      }\n    }),\n    // Clear emitters.\n    () => subEmitter.clear(),\n    () => mainEmitter.clear(),\n  );\n\n  return [{\n    on: mainEmitter.on.bind(mainEmitter),\n    off: mainEmitter.off.bind(mainEmitter),\n    subscribe(listener) {\n      return subEmitter.on('event', listener);\n    },\n    unsubscribe(listener) {\n      subEmitter.off('event', listener);\n    },\n    get count() {\n      return mainEmitter.count + subEmitter.count;\n    },\n  }, cleanup];\n}\n","import { createSingleton } from '@/misc/createSingleton.js';\n\nimport { createMiniAppsEventEmitter } from './createMiniAppsEventEmitter.js';\nimport type { MiniAppsEventEmitter } from '../types.js';\n\nconst [get, resetMiniAppsEventEmitter] = createSingleton(\n  (reset) => {\n    const [emitter, cleanup] = createMiniAppsEventEmitter();\n\n    // Rewire \"off\" method and make it reset singleton if no event listeners left.\n    const off = emitter.off.bind(emitter);\n    emitter.off = (event, listener) => {\n      const { count } = emitter;\n      off(event, listener);\n\n      // If event emitter now has no listeners, we can perform a reset.\n      if (count && !emitter.count) {\n        reset();\n      }\n    };\n\n    return [emitter, cleanup] as const;\n  },\n  ([, cleanup]) => cleanup(),\n);\n\n/**\n * Returns Mini Apps event emitter singleton.\n */\nexport function miniAppsEventEmitter(): MiniAppsEventEmitter {\n  return get()[0];\n}\n\nexport { resetMiniAppsEventEmitter };\n","import { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Removes listener from specified event.\n * @param event - event to listen.\n * @param listener - event listener to remove.\n */\nexport function off<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n): void {\n  miniAppsEventEmitter().off(event, listener);\n}\n","import type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { miniAppsEventEmitter } from '../event-emitter/singleton.js';\nimport type { MiniAppsEventListener, MiniAppsEventName } from '../types.js';\n\n/**\n * Adds new listener to the specified event. Returns handler\n * which allows to stop listening to event.\n * @param event - event name.\n * @param listener - event listener.\n * @param once - should listener be called only once.\n * @returns Function to remove bound event listener.\n */\nexport function on<E extends MiniAppsEventName>(\n  event: E,\n  listener: MiniAppsEventListener<E>,\n  once?: boolean,\n): RemoveEventListenerFn {\n  return miniAppsEventEmitter().on(event, listener, once);\n}\n","/**\n * States that passed value is Record and not Array.\n * @param value - value to check.\n */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n","import type { Version } from './types.js';\n\n/**\n * Returns 1 in case, version \"a\" is greater than \"b\".\n * Returns 0 in case, version \"a\" equal to \"b\".\n * Returns -1 in case, version \"a\" is lower than \"b\".\n * @param a - first version.\n * @param b - second version.\n */\nexport function compareVersions(a: Version, b: Version): number {\n  // Split both of the version by dot.\n  const aParts = a.split('.');\n  const bParts = b.split('.');\n\n  // Compute maximum length.\n  const len = Math.max(aParts.length, bParts.length);\n\n  // Iterate over each part of version and compare them. In case, part is\n  // missing, assume its value is equal to 0.\n  for (let i = 0; i < len; i += 1) {\n    const aVal = parseInt(aParts[i] || '0', 10);\n    const bVal = parseInt(bParts[i] || '0', 10);\n\n    if (aVal === bVal) {\n      continue;\n    }\n    return aVal > bVal ? 1 : -1;\n  }\n  return 0;\n}\n","import { compareVersions } from '@/version/compareVersions.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * Returns true if \"a\" version is less than or equal to \"b\" version.\n * @param a\n * @param b\n */\nfunction versionLessOrEqual(a: Version, b: Version): boolean {\n  return compareVersions(a, b) <= 0;\n}\n\n/**\n * Returns true in case, passed parameter in specified method is supported.\n * @param method - method name\n * @param param - method parameter\n * @param inVersion - platform version.\n */\nexport function supports<M extends MiniAppsMethodWithVersionedParams>(\n  method: M,\n  param: MiniAppsMethodVersionedParams<M>,\n  inVersion: Version,\n): boolean;\n\n/**\n * Returns true in case, specified method is supported in passed version.\n * @param method - method name.\n * @param inVersion - platform version.\n */\nexport function supports(method: MiniAppsMethodName, inVersion: Version): boolean;\n\nexport function supports(\n  method: MiniAppsMethodName,\n  paramOrVersion: Version | string,\n  inVersion?: string,\n): boolean {\n  // Method name, parameter, target version.\n  if (typeof inVersion === 'string') {\n    if (method === 'web_app_open_link') {\n      if (paramOrVersion === 'try_instant_view') {\n        return versionLessOrEqual('6.4', inVersion);\n      }\n      if (paramOrVersion === 'try_browser') {\n        return versionLessOrEqual('7.6', inVersion);\n      }\n    }\n\n    if (method === 'web_app_set_header_color') {\n      if (paramOrVersion === 'color') {\n        return versionLessOrEqual('6.9', inVersion);\n      }\n    }\n\n    if (method === 'web_app_close' && paramOrVersion === 'return_back') {\n      return versionLessOrEqual('7.6', inVersion);\n    }\n  }\n\n  switch (method) {\n    case 'web_app_open_tg_link':\n    case 'web_app_open_invoice':\n    case 'web_app_setup_back_button':\n    case 'web_app_set_background_color':\n    case 'web_app_set_header_color':\n    case 'web_app_trigger_haptic_feedback':\n      return versionLessOrEqual('6.1', paramOrVersion);\n    case 'web_app_open_popup':\n      return versionLessOrEqual('6.2', paramOrVersion);\n    case 'web_app_close_scan_qr_popup':\n    case 'web_app_open_scan_qr_popup':\n    case 'web_app_read_text_from_clipboard':\n      return versionLessOrEqual('6.4', paramOrVersion);\n    case 'web_app_switch_inline_query':\n      return versionLessOrEqual('6.7', paramOrVersion);\n    case 'web_app_invoke_custom_method':\n    case 'web_app_request_write_access':\n    case 'web_app_request_phone':\n      return versionLessOrEqual('6.9', paramOrVersion);\n    case 'web_app_setup_settings_button':\n      return versionLessOrEqual('6.10', paramOrVersion);\n    case 'web_app_biometry_get_info':\n    case 'web_app_biometry_open_settings':\n    case 'web_app_biometry_request_access':\n    case 'web_app_biometry_request_auth':\n    case 'web_app_biometry_update_token':\n      return versionLessOrEqual('7.2', paramOrVersion);\n    case 'web_app_setup_swipe_behavior':\n      return versionLessOrEqual('7.7', paramOrVersion);\n    default:\n      return [\n        'iframe_ready',\n        'iframe_will_reload',\n        'web_app_close',\n        'web_app_data_send',\n        'web_app_expand',\n        'web_app_open_link',\n        'web_app_ready',\n        'web_app_request_theme',\n        'web_app_request_viewport',\n        'web_app_setup_main_button',\n        'web_app_setup_closing_behavior',\n      ].includes(method);\n  }\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `external.notify` property and `notify` is a\n * function.\n * @param value - value to check.\n */\nexport function hasExternalNotify<T extends object>(value: T): value is (\n  T & {\n  external: {\n    notify: (...args: any) => any;\n  };\n}) {\n  return 'external' in value\n    && isRecord(value.external)\n    && 'notify' in value.external\n    && typeof value.external.notify === 'function';\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Returns true in case, passed value contains path `TelegramWebviewProxy.postEvent` property and\n * `postEvent` is a function.\n * @param value - value to check.\n */\nexport function hasWebviewProxy<T extends {}>(value: T): value is (\n  T & {\n  TelegramWebviewProxy: {\n    postEvent: (...args: unknown[]) => unknown;\n  }\n}) {\n  return 'TelegramWebviewProxy' in value\n    && isRecord(value.TelegramWebviewProxy)\n    && 'postEvent' in value.TelegramWebviewProxy\n    && typeof value.TelegramWebviewProxy.postEvent === 'function';\n}\n","/**\n * @see https://stackoverflow.com/a/326076\n * @returns True, if current environment is iframe.\n */\nexport function isIframe(): boolean {\n  try {\n    return window.self !== window.top;\n  } catch {\n    return true;\n  }\n}\n","const INITIAL_TARGET_ORIGIN = 'https://web.telegram.org'\n\nlet currentTargetOrigin = INITIAL_TARGET_ORIGIN;\n\n/**\n * Sets a new global targetOrigin, used by the `postEvent` method.\n * The default value is \"https://web.telegram.org\".\n * You don't need to use this method until you know what you are doing.\n *\n * This method could be used for test purposes.\n * @param value - new target origin.\n * @see postEvent\n */\nexport function setTargetOrigin(value: string): void {\n  currentTargetOrigin = value;\n}\n\n/**\n * Sets the initial target origin.\n */\nexport function resetTargetOrigin(): void {\n  setTargetOrigin(INITIAL_TARGET_ORIGIN);\n}\n\n/**\n * Returns current global target origin.\n */\nexport function targetOrigin(): string {\n  return currentTargetOrigin;\n}\n","import { log } from '@/debug/debug.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { createError } from '@/errors/createError.js';\nimport { ERR_UNKNOWN_ENV } from '@/errors/errors.js';\n\nimport { targetOrigin as targetOriginFn } from '../target-origin.js';\nimport type {\n  MiniAppsMethodName,\n  MiniAppsMethodParams,\n  MiniAppsMethodWithOptionalParams,\n  MiniAppsMethodWithoutParams,\n  MiniAppsMethodWithRequiredParams,\n} from './types/methods.js';\n\ninterface PostEventOptions {\n  /**\n   * Origin used while posting a message.\n   *\n   * This option is only used if the current environment is browser (Web version of Telegram)\n   * and could be used for test purposes.\n   * @default 'https://web.telegram.org'\n   */\n  targetOrigin?: string;\n}\n\nexport type PostEvent = typeof postEvent;\n\n/**\n * Calls Mini Apps methods requiring parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithRequiredParams>(\n  method: Method,\n  params: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps methods accepting optional parameters.\n * @param method - method name.\n * @param params - method parameters.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent<Method extends MiniAppsMethodWithOptionalParams>(\n  method: Method,\n  params?: MiniAppsMethodParams<Method>,\n  options?: PostEventOptions,\n): void;\n\n/**\n * Calls Mini Apps methods accepting optional or no parameters at all.\n * @param method - method name.\n * @param options - posting options.\n * @throws {SDKError} ERR_UNKNOWN_ENV\n * @see ERR_UNKNOWN_ENV\n */\nexport function postEvent(\n  method: MiniAppsMethodWithoutParams | MiniAppsMethodWithOptionalParams,\n  options?: PostEventOptions,\n): void;\n\nexport function postEvent(\n  eventType: MiniAppsMethodName,\n  paramsOrOptions?: MiniAppsMethodParams<MiniAppsMethodName> | PostEventOptions,\n  options?: PostEventOptions,\n): void {\n  let postOptions: PostEventOptions = {};\n  let eventData: any;\n\n  if (!paramsOrOptions && !options) {\n    // Parameters and options were not passed.\n    postOptions = {};\n  } else if (paramsOrOptions && options) {\n    // Both parameters and options passed.\n    postOptions = options;\n    eventData = paramsOrOptions;\n  } else if (paramsOrOptions) {\n    // Only parameters were passed.\n    if ('targetOrigin' in paramsOrOptions) {\n      postOptions = paramsOrOptions;\n    } else {\n      eventData = paramsOrOptions;\n    }\n  }\n\n  log('Posting event:', eventData\n    ? { event: eventType, data: eventData }\n    : { event: eventType });\n\n  // Telegram Web.\n  if (isIframe()) {\n    return window.parent.postMessage(\n      JSON.stringify({ eventType, eventData }),\n      postOptions.targetOrigin || targetOriginFn(),\n    );\n  }\n\n  // Telegram for Windows Phone or Android.\n  if (hasExternalNotify(window)) {\n    window.external.notify(JSON.stringify({ eventType, eventData }));\n    return;\n  }\n\n  // Telegram for iOS and macOS.\n  if (hasWebviewProxy(window)) {\n    window.TelegramWebviewProxy.postEvent(eventType, JSON.stringify(eventData));\n    return;\n  }\n\n  // Otherwise current environment is unknown, and we are not able to send event.\n  throw createError(\n    ERR_UNKNOWN_ENV,\n    'Unable to determine current environment and possible way to send event. You are probably trying to use Mini Apps method outside the Telegram application environment.',\n  );\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_METHOD_PARAMETER_UNSUPPORTED, ERR_METHOD_UNSUPPORTED } from '@/errors/errors.js';\nimport { isRecord } from '@/misc/isRecord.js';\nimport { supports } from '@/bridge/supports.js';\nimport type { Version } from '@/version/types.js';\n\nimport { type PostEvent, postEvent } from './postEvent.js';\n\n/**\n * Creates a function which checks if specified method and parameters are supported.\n *\n * If method or parameters are unsupported, an error will be thrown.\n * @param version - Telegram Mini Apps version.\n * @throws {SDKError} ERR_METHOD_UNSUPPORTED\n * @throws {SDKError} ERR_METHOD_PARAMETER_UNSUPPORTED\n * @see ERR_METHOD_UNSUPPORTED\n * @see ERR_METHOD_PARAMETER_UNSUPPORTED\n */\nexport function createPostEvent(version: Version): PostEvent {\n  return (method: any, params: any) => {\n    // Firstly, check if a method is supported.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    if (!supports(method, version)) {\n      throw createError(ERR_METHOD_UNSUPPORTED, `Method \"${method}\" is unsupported in Mini Apps version ${version}`);\n    }\n\n    // Method could use parameters, which are supported only in specific\n    // versions of Mini Apps.\n    // We are validating only those parameters, which are not backward compatible.\n    if (\n      isRecord(params)\n      && method === 'web_app_set_header_color'\n      && 'color' in params\n      && !supports(method, 'color', version)\n    ) {\n      throw createError(\n        ERR_METHOD_PARAMETER_UNSUPPORTED,\n        `Parameter \"color\" of \"${method}\" method is unsupported in Mini Apps version ${version}`,\n      );\n    }\n\n    return postEvent(method, params);\n  };\n}\n","type CaptureSameReqFn = (payload: { req_id: string }) => boolean;\n\n/**\n * Returns a function which can be used in `request` function `capture` property to capture\n * the event with the same request identifier.\n * @param reqId - request identifier.\n */\nexport function captureSameReq(reqId: string): CaptureSameReqFn {\n  return ({ req_id }) => req_id === reqId;\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_TIMED_OUT } from '@/errors/errors.js';\nimport type { SDKError } from '@/errors/SDKError.js';\n\n/**\n * Creates new timeout error.\n * @param timeout - timeout in ms.\n */\nexport function createTimeoutError(timeout: number): SDKError {\n  return createError(ERR_TIMED_OUT, `Timeout reached: ${timeout}ms`);\n}\n","import { createTimeoutError } from '@/timeout/createTimeoutError.js';\n\n/**\n * Runs passed function or promise with specified deadline presented via timeout argument.\n * @param funcOrPromise - function to execute or pending promise.\n * @param timeout - completion timeout.\n */\nexport function withTimeout<T>(\n  funcOrPromise: Promise<T> | (() => Promise<T>),\n  timeout: number,\n): Promise<T> {\n  return Promise.race([\n    typeof funcOrPromise === 'function' ? funcOrPromise() : funcOrPromise,\n    new Promise<never>((_, rej) => {\n      setTimeout(() => {\n        rej(createTimeoutError(timeout));\n      }, timeout);\n    }),\n  ]);\n}\n","import { withTimeout } from '@/timeout/withTimeout.js';\nimport type { ExecuteWithOptions, If, IsNever } from '@/types/index.js';\n\nimport { on } from './events/listening/on.js';\nimport { postEvent as defaultPostEvent } from './methods/postEvent.js';\nimport type { MiniAppsEventName, MiniAppsEventPayload } from './events/types.js';\nimport type { MiniAppsMethodName, MiniAppsMethodParams } from './methods/types/index.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\n/**\n * Returns all possible payloads for the specified events array.\n */\nexport type RequestEventsPayloads<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? MiniAppsEventPayload<U>\n    : never;\n\nexport type RequestCaptureEventsFn<E extends MiniAppsEventName[]> =\n  E extends (infer U extends MiniAppsEventName)[]\n    ? (payload: {\n      [K in U]: If<\n        IsNever<MiniAppsEventPayload<K>>,\n        { event: K },\n        { event: K; payload: MiniAppsEventPayload<K> }\n      >\n    }[U]) => boolean\n    : never;\n\nexport type RequestCaptureEventFn<E extends MiniAppsEventName> = If<\n  IsNever<MiniAppsEventPayload<E>>,\n  () => boolean,\n  (payload: MiniAppsEventPayload<E>) => boolean\n>;\n\n/**\n * `request` method options.\n * @see request\n */\nexport type RequestOptions<M extends MiniAppsMethodName, E, C> = {\n    /**\n     * Mini Apps method name.\n     */\n    method: M;\n    /**\n     * Tracked Mini Apps events.\n     */\n    event: E;\n    /**\n     * Should return true if this event should be captured.\n     * A request will be captured if this property is omitted.\n     */\n    capture?: C;\n  }\n  & ExecuteWithOptions\n  & If<IsNever<MiniAppsMethodParams<M>>, {}, {\n  /**\n   * List of method parameters.\n   */\n  params: MiniAppsMethodParams<M>\n}>;\n\ntype AnyRequestResult =\n  | MiniAppsEventPayload<MiniAppsEventName>\n  | RequestEventsPayloads<MiniAppsEventName[]>;\n\n/**\n * Calls specified Mini Apps method and captures specified event.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName>(\n  options: RequestOptions<M, E, RequestCaptureEventFn<E>>,\n): Promise<MiniAppsEventPayload<E>>;\n\n/**\n * Calls specified Mini Apps method and captures one of the specified events.\n * @param options - method options.\n * @returns Promise which will be resolved with data of the first captured event.\n */\nexport async function request<M extends MiniAppsMethodName, E extends MiniAppsEventName[]>(\n  options: RequestOptions<M, E, RequestCaptureEventsFn<E>>,\n): Promise<RequestEventsPayloads<E>>;\n\nexport async function request<M extends MiniAppsMethodName>(\n  options:\n    | RequestOptions<M, MiniAppsEventName, RequestCaptureEventFn<MiniAppsEventName>>\n    | RequestOptions<M, MiniAppsEventName[], RequestCaptureEventsFn<MiniAppsEventName[]>>,\n): Promise<AnyRequestResult> {\n  let resolve: (payload: AnyRequestResult) => void;\n  const promise = new Promise<AnyRequestResult>(res => resolve = res);\n\n  const { event, capture, timeout } = options;\n  const [, cleanup] = createCleanup(\n    // We need to iterate over all tracked events, and create their event listeners.\n    (Array.isArray(event) ? event : [event]).map((ev) => {\n      // Each event listener waits for the event to occur.\n      // Then, if the capture function was passed, we should check if the event should be captured.\n      // If the function is omitted, we instantly capture the event.\n      return on(ev, (payload) => {\n        if (!capture || (\n          Array.isArray(event)\n            ? (capture as RequestCaptureEventsFn<MiniAppsEventName[]>)({\n              event: ev,\n              payload: payload as any,\n            })\n            : (capture as RequestCaptureEventFn<MiniAppsEventName>)(payload)\n        )) {\n          resolve(payload);\n        }\n      });\n    }),\n  );\n\n  try {\n    (options.postEvent || defaultPostEvent)(options.method as any, (options as any).params);\n    return await (timeout ? withTimeout(promise, timeout) : promise);\n  } finally {\n    // After promise execution was completed, don't forget to remove all the listeners.\n    cleanup();\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVOKE_CUSTOM_METHOD_RESPONSE } from '@/errors/errors.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { captureSameReq } from './captureSameReq.js';\nimport { request } from './request.js';\nimport type { CustomMethodName, CustomMethodParams } from './methods/types/custom-methods.js';\n\n/**\n * Invokes known custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport async function invokeCustomMethod<M extends CustomMethodName>(\n  method: M,\n  params: CustomMethodParams<M>,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\n/**\n * Invokes unknown custom method. Returns method execution result.\n * @param method - method name.\n * @param params - method parameters.\n * @param requestId - request identifier.\n * @param options - additional options.\n * @throws {SDKError} ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n * @see ERR_INVOKE_CUSTOM_METHOD_RESPONSE\n */\nexport function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options?: ExecuteWithOptions,\n): Promise<unknown>;\n\nexport async function invokeCustomMethod(\n  method: string,\n  params: object,\n  requestId: string,\n  options: ExecuteWithOptions = {},\n): Promise<unknown> {\n  const {\n    result,\n    error,\n  } = await request({\n    ...options,\n    method: 'web_app_invoke_custom_method',\n    event: 'custom_method_invoked',\n    params: {\n      method,\n      params,\n      req_id: requestId,\n    },\n    capture: captureSameReq(requestId),\n  });\n\n  if (error) {\n    throw createError(ERR_INVOKE_CUSTOM_METHOD_RESPONSE, error);\n  }\n\n  return result;\n}\n","import { isRecord } from '@/misc/isRecord.js';\n\n/**\n * Function which joins passed values with space following these rules:\n * 1. If value is non-empty string, it will be added to output.\n * 2. If value is object, only those keys will be added, which values are truthy.\n * 3. If value is array, classNames will be called with this value spread.\n * 4. All other values are ignored.\n *\n * You can find this function to similar one from the package {@link https://www.npmjs.com/package/classnames|classnames}.\n * @param values - values array.\n * @returns Final class name.\n */\nexport function classNames(...values: any[]): string {\n  return values\n    .map((value) => {\n      if (typeof value === 'string') {\n        return value;\n      }\n\n      if (isRecord(value)) {\n        return classNames(Object.entries(value).map((entry) => entry[1] && entry[0]));\n      }\n\n      if (Array.isArray(value)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        return classNames(...value);\n      }\n    })\n    .filter(Boolean)\n    .join(' ');\n}\n","import { isRecord } from '@/misc/isRecord.js';\nimport type { UnionOptionalKeys, UnionRequiredKeys } from '@/types/unions.js';\n\nimport { classNames } from './classNames.js';\n\nexport type MergeClassNames<Tuple extends any[]> =\n  // Removes all types from union which will be ignored by the mergeClassNames function.\n  Exclude<Tuple[number], number | string | null | undefined | any[] | boolean> extends infer Union\n    ? {\n    [K in UnionRequiredKeys<Union>]: string;\n  } & {\n    [K in UnionOptionalKeys<Union>]?: string;\n  }\n    : never;\n\n/**\n * Merges 2 sets of parameters. Function expects passing an array of objects with values, which\n * could be passed to `classNames` function. As the result, it returns an object with keys\n * from all objects with merged values.\n * @see classNames\n */\nexport function mergeClassNames<T extends any[]>(...partials: T): MergeClassNames<T> {\n  return partials.reduce<MergeClassNames<T>>((acc, partial) => {\n    if (!isRecord(partial)) {\n      return acc;\n    }\n\n    Object.entries(partial).forEach(([key, value]) => {\n      const className = classNames((acc as any)[key], value);\n\n      if (className.length) {\n        (acc as any)[key] = className;\n      }\n    });\n\n    return acc;\n  }, {} as MergeClassNames<T>);\n}\n","import type { RGB } from './types.js';\n\n/**\n * Returns true in case, passed value has #RRGGBB format.\n * @param value - value to check.\n */\nexport function isRGB(value: string): value is RGB {\n  return /^#[\\da-f]{6}$/i.test(value);\n}\n","import type { RGBShort } from './types.js';\n\n/**\n * Returns true in case, passed value has #RGB format.\n * @param value - value to check.\n */\nexport function isRGBShort(value: string): value is RGBShort {\n  return /^#[\\da-f]{3}$/i.test(value);\n}\n","import { isRGB } from './isRGB.js';\nimport { isRGBShort } from './isRGBShort.js';\nimport type { RGB } from './types.js';\n\n/**\n * Converts passed value to #RRGGBB format. Accepts following color formats:\n * - `#RGB`\n * - `#RRGGBB`\n * - `rgb(1,2,3)`\n * - `rgba(1,2,3,4)`\n * @param value - value to convert.\n * @throws {Error} Passed value does not satisfy any of known RGB formats.\n */\nexport function toRGB(value: string): RGB {\n  // Remove all spaces.\n  const clean = value.replace(/\\s/g, '').toLowerCase();\n\n  // Value already has required format.\n  if (isRGB(clean)) {\n    return clean;\n  }\n\n  // Convert from #RGB.\n  if (isRGBShort(clean)) {\n    let color: RGB = '#';\n    for (let i = 0; i < 3; i += 1) {\n      color += clean[1 + i].repeat(2);\n    }\n    return color;\n  }\n\n  // Example valid values: rgb(0,3,10) rgba(32,114,8,0)\n  const match = clean.match(/^rgb\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3})\\)$/)\n    || clean.match(/^rgba\\((\\d{1,3}),(\\d{1,3}),(\\d{1,3}),\\d{1,3}\\)$/);\n\n  // In case, this didn't work as well, we can't extract RGB color from passed\n  // text.\n  if (!match) {\n    throw new Error(`Value \"${value}\" does not satisfy any of known RGB formats.`);\n  }\n\n  // Otherwise, take R, G and B components, convert to hex and create #RRGGBB\n  // string.\n  return match.slice(1).reduce((acc, component) => {\n    const formatted = parseInt(component, 10).toString(16);\n    return acc + (formatted.length === 1 ? '0' : '') + formatted;\n  }, '#') as RGB;\n}\n","import { toRGB } from './toRGB.js';\n\n/**\n * Returns true in case, the color is recognized as dark.\n * @param color - color in any format acceptable by toRGB function.\n * @see toRGB\n */\nexport function isColorDark(color: string): boolean {\n  // Convert color to RGB.\n  const rgb = toRGB(color);\n\n  // Real formula: hsp = Math.sqrt(0.299 * r * r + 0.587 * g * g + 0.114 * b * b)\n  // See: https://stackoverflow.com/a/596243\n  return Math.sqrt(\n    [0.299, 0.587, 0.114].reduce<number>((acc, modifier, idx) => {\n      // Extract part of #RRGGBB pattern and convert it to DEC.\n      const dec = parseInt(rgb.slice(1 + idx * 2, 1 + (idx + 1) * 2), 16);\n      return acc + dec * dec * modifier;\n    }, 0),\n  ) < 120;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { StringKeys } from '@/types/utils.js';\n\ntype Emitter<State extends object> = EventEmitter<StateEvents<State>>;\n\nexport class State<State extends object> {\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  constructor(\n    /**\n     * Initial state.\n     */\n    private readonly state: State,\n  ) {\n  }\n\n  /**\n   * Clones current state and returns its copy.\n   */\n  clone(): State {\n    return { ...this.state };\n  }\n\n  /**\n   * Sets value by key.\n   * @param key - state key.\n   * @param value - value to set.\n   */\n  set<K extends StringKeys<State>>(key: K, value: State[K]): void;\n  /**\n   * Sets several values simultaneously.\n   * @param state - partial state.\n   */\n  set(state: Partial<State>): void;\n  set(keyOrState: StringKeys<State> | Partial<State>, keyValue?: State[keyof State]): void {\n    const didChange = Object\n      .entries(typeof keyOrState === 'string' ? { [keyOrState]: keyValue } : keyOrState)\n      .reduce((acc, [key, value]) => {\n        // If value is the same or missing at all, we skip it.\n        if (this.state[key as keyof State] === value || value === undefined) {\n          return acc;\n        }\n\n        // Otherwise set new value and emit change event.\n        this.state[key as keyof State] = value;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        (this.ee as any).emit(`change:${key}`, value);\n\n        return true;\n      }, false);\n\n    if (didChange) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      (this.ee as any).emit('change', this.state);\n    }\n  }\n\n  /**\n   * Returns value by specified key.\n   * @param key - state key.\n   */\n  get<K extends StringKeys<State>>(key: K): State[K] {\n    return this.state[key];\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n}\n","import { State } from '@/classes/State/State.js';\n\nexport class WithStateUtils<Shape extends object> {\n  protected state: State<Shape>;\n\n  constructor(shape: Shape) {\n    this.state = new State(shape);\n    this.set = this.state.set.bind(this.state);\n    this.get = this.state.get.bind(this.state);\n    this.clone = this.state.clone.bind(this.state);\n  }\n\n  /**\n   * Gets the state value.\n   */\n  protected get: State<Shape>['get'];\n\n  /**\n   * Sets the state value.\n   */\n  protected set: State<Shape>['set'];\n\n  /**\n   * Clones the current state.\n   */\n  protected clone: State<Shape>['clone'];\n}\n","import { supports } from '@/bridge/supports.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport type SupportsSchema<Method extends string> = Record<Method, MiniAppsMethodName>;\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA method as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsFn<Method extends string>(\n  version: Version,\n  schema: SupportsSchema<Method>,\n): SupportsFn<Method> {\n  return (method) => supports(schema[method], version);\n}\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupportsAndStateUtils<StateShape extends object, SupportsMethod extends string>\nextends WithStateUtils<StateShape> {\n  constructor(\n    /**\n     * Initial state.\n     */\n    stateShape: StateShape,\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    super(stateShape);\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { BackButtonEvents, BackButtonState } from '@/components/BackButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<BackButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/back-button\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/back-button\n */\nexport class BackButton extends WithSupportsAndStateUtils<BackButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_back_button',\n      hide: 'web_app_setup_back_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_back_button', { is_visible: visible });\n  }\n\n  /**\n   * True if BackButton is currently visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the BackButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('back_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the BackButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { number } from './number.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as Date.\n */\nexport const date: ValueParserGenerator<Date> = createValueParserGenerator((value) => (\n  value instanceof Date\n    ? value\n    : new Date(number().parse(value) * 1000)\n), 'Date');\n","import { createTypeError } from '../createTypeError.js';\nimport { parseBySchema } from '../parseBySchema.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { Schema } from '../types.js';\n\n/**\n * Creates new search params parser according to passed schema.\n * @param schema - object schema.\n * @param type - parser type name.\n */\nexport function searchParams<T>(schema: Schema<T>, type?: string): ValueParser<T, false> {\n  return new ValueParser((value) => {\n    if (typeof value !== 'string' && !(value instanceof URLSearchParams)) {\n      throw createTypeError();\n    }\n\n    const params = typeof value === 'string' ? new URLSearchParams(value) : value;\n\n    return parseBySchema(schema, (field) => {\n      const paramValue = params.get(field);\n      return paramValue === null ? undefined : paramValue;\n    });\n  }, false, type);\n}\n","import { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { Chat } from '../types.js';\n\nexport const chat = json<Chat>({\n  id: number(),\n  type: string(),\n  title: string(),\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'Chat')\n  .optional();\n","import { boolean } from '@/parsing/parsers/boolean.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { User } from '../types.js';\n\nexport const user = json<User>({\n  addedToAttachmentMenu: {\n    type: boolean().optional(),\n    from: 'added_to_attachment_menu',\n  },\n  allowsWriteToPm: {\n    type: boolean().optional(),\n    from: 'allows_write_to_pm',\n  },\n  firstName: {\n    type: string(),\n    from: 'first_name',\n  },\n  id: number(),\n  isBot: {\n    type: boolean().optional(),\n    from: 'is_bot',\n  },\n  isPremium: {\n    type: boolean().optional(),\n    from: 'is_premium',\n  },\n  languageCode: {\n    type: string().optional(),\n    from: 'language_code',\n  },\n  lastName: {\n    type: string().optional(),\n    from: 'last_name',\n  },\n  photoUrl: {\n    type: string().optional(),\n    from: 'photo_url',\n  },\n  username: string().optional(),\n}, 'User')\n  .optional();\n","import { date } from '@/parsing/parsers/date.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport { chat } from './chat.js';\nimport { user } from './user.js';\nimport type { InitDataParsed } from '../types.js';\n\n/**\n * Returns parser used to parse init data, presented as search params.\n */\nexport function initData(): ValueParser<InitDataParsed, false> {\n  return searchParams<InitDataParsed>({\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    canSendAfter: {\n      type: number().optional(),\n      from: 'can_send_after',\n    },\n    chat,\n    chatInstance: {\n      type: string().optional(),\n      from: 'chat_instance',\n    },\n    chatType: {\n      type: string().optional(),\n      from: 'chat_type',\n    },\n    hash: string(),\n    queryId: {\n      type: string().optional(),\n      from: 'query_id',\n    },\n    receiver: user,\n    startParam: {\n      type: string().optional(),\n      from: 'start_param',\n    },\n    user,\n  }, 'InitData');\n}\n","import { toRGB } from '@/colors/toRGB.js';\nimport type { RGB } from '@/colors/types.js';\n\nimport { createValueParserGenerator } from '../createValueParserGenerator.js';\nimport { string } from './string.js';\nimport type { ValueParserGenerator } from '../createValueParserGenerator.js';\n\n/**\n * Returns parser to parse value as RGB color.\n */\nexport const rgb: ValueParserGenerator<RGB> = createValueParserGenerator((value) => toRGB(string().parse(value)), 'rgb');\n","/**\n * Converts a palette key from the Telegram application to the representation used by the package.\n * @param key - palette key.\n */\nexport function keyToLocal(key: string): string {\n  return key.replace(/_[a-z]/g, (match) => match[1].toUpperCase());\n}\n\n/**\n * Converts palette key from the local representation to the representation sent from the\n * Telegram application.\n * @param key - palette key.\n */\nexport function keyToExternal(key: string): string {\n  return key.replace(/[A-Z]/g, (match) => `_${match.toLowerCase()}`);\n}\n","import { createValueParserGenerator, type ValueParserGenerator } from '@/parsing/createValueParserGenerator.js';\nimport { rgb } from '@/parsing/parsers/rgb.js';\nimport { toRecord } from '@/parsing/toRecord.js';\n\nimport { keyToLocal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\nexport const themeParams: ValueParserGenerator<ThemeParamsParsed> = createValueParserGenerator(\n  (value) => {\n    const rgbOptional = rgb().optional();\n\n    return Object\n      .entries(toRecord(value))\n      .reduce<ThemeParamsParsed>((acc, [k, v]) => {\n        acc[keyToLocal(k)] = rgbOptional.parse(v);\n        return acc;\n      }, {});\n  },\n  'ThemeParams',\n);\n","import { initData } from '@/components/InitData/parsers/initData.js';\nimport { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\nimport { boolean } from '@/parsing/parsers/boolean.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Parses value as launch parameters.\n * @param value - value to parse.\n */\nexport function parseLaunchParams(value: unknown): LaunchParams {\n  return searchParams({\n    botInline: {\n      type: boolean().optional(),\n      from: 'tgWebAppBotInline',\n    },\n    initData: {\n      type: initData().optional(),\n      from: 'tgWebAppData',\n    },\n    initDataRaw: {\n      type: string().optional(),\n      from: 'tgWebAppData',\n    },\n    platform: {\n      type: string(),\n      from: 'tgWebAppPlatform',\n    },\n    showSettings: {\n      type: boolean().optional(),\n      from: 'tgWebAppShowSettings',\n    },\n    startParam: {\n      type: string().optional(),\n      from: 'tgWebAppStartParam',\n    },\n    themeParams: {\n      type: themeParams(),\n      from: 'tgWebAppThemeParams',\n    },\n    version: {\n      type: string(),\n      from: 'tgWebAppVersion',\n    },\n  }).parse(value);\n}\n","import { parseLaunchParams } from './parseLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @param urlString - URL to extract launch parameters from.\n * @returns Launch parameters from the specified URL.\n * @throws Error if function was unable to extract launch parameters from the passed URL.\n */\nexport function retrieveFromUrl(urlString: string): LaunchParams {\n  return parseLaunchParams(\n    urlString\n      // Replace everything before this first hashtag or question sign.\n      .replace(/^[^?#]*[?#]/, '')\n      // Replace all hashtags and question signs to make it look like some search params.\n      .replace(/[?#]/g, '&'),\n  );\n}\n","import { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from the current window location hash.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromLocation(): LaunchParams {\n  return retrieveFromUrl(window.location.href);\n}\n","/**\n * Returns the first navigation entry from window.performance.\n * @returns First navigation entry or null, in case performance functionality is not supported\n * or navigation entry was not found.\n */\nexport function getFirstNavigationEntry(): PerformanceNavigationTiming | undefined {\n  return performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;\n}\n","import { getFirstNavigationEntry } from '@/navigation/getFirstNavigationEntry.js';\n\nimport { retrieveFromUrl } from './retrieveFromUrl.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters based on the first navigation entry.\n * @throws Error if function was unable to extract launch parameters from the navigation entry.\n */\nexport function retrieveFromPerformance(): LaunchParams {\n  const navigationEntry = getFirstNavigationEntry();\n  if (!navigationEntry) {\n    throw new Error('Unable to get first navigation entry.');\n  }\n\n  return retrieveFromUrl(navigationEntry.name);\n}\n","import type { BackButtonState } from '@/components/BackButton/types.js';\nimport type { BiometryManagerState } from '@/components/BiometryManager/types.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\nimport type { MainButtonState } from '@/components/MainButton/types.js';\nimport type { MiniAppState } from '@/components/MiniApp/types.js';\nimport type { SettingsButtonState } from '@/components/SettingsButton/types.js';\nimport type { ThemeParamsParsed } from '@/components/ThemeParams/types.js';\nimport type { ViewportState } from '@/components/Viewport/types.js';\nimport type { SwipeBehaviorState } from '@/components/SwipeBehavior/types.js';\n\n/**\n * Describes storage keys and according values.\n */\nexport interface StorageParams {\n  backButton: BackButtonState;\n  biometryManager: BiometryManagerState;\n  closingBehavior: ClosingBehaviorState;\n  launchParams: string;\n  mainButton: MainButtonState;\n  miniApp: MiniAppState;\n  settingsButton: SettingsButtonState;\n  swipeBehavior: SwipeBehaviorState;\n  themeParams: ThemeParamsParsed;\n  viewport: ViewportState;\n}\n\n/**\n * Key which could be used to store data in the storage.\n */\nexport type StorageKey = keyof StorageParams;\n\n/**\n * Type specific to the specified storage key.\n */\nexport type StorageValue<K extends StorageKey> = StorageParams[K];\n\n/**\n * Converts passed storage key to the formatted state.\n * @param key - storage key.\n */\nfunction formatKey(key: StorageKey): string {\n  return `telegram-apps/${key.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n}\n\n/**\n * Saves value in the storage.\n * @param key - storage key.\n * @param value - storage value.\n */\nexport function setStorageValue<K extends StorageKey>(key: K, value: StorageValue<K>): void {\n  sessionStorage.setItem(formatKey(key), JSON.stringify(value));\n}\n\n/**\n * Extracts value from the storage.\n * @param key - storage key.\n */\nexport function getStorageValue<K extends StorageKey>(key: K): StorageValue<K> | undefined {\n  const value = sessionStorage.getItem(formatKey(key));\n  try {\n    return value ? JSON.parse(value) as StorageValue<K> : undefined;\n  } catch { /* empty */ }\n}\n","import { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport { getStorageValue } from '@/storage/storage.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\n\n/**\n * @returns Launch parameters stored in the session storage.\n * @throws Error if function was unable to extract launch parameters from the window location hash.\n */\nexport function retrieveFromStorage(): LaunchParams {\n  return parseLaunchParams(getStorageValue('launchParams') || '');\n}\n","import { keyToExternal } from '../keys.js';\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Serializes theme parameters to representation sent from the Telegram application.\n */\nexport function serializeThemeParams(themeParams: ThemeParamsParsed): string {\n  return JSON.stringify(\n    Object.fromEntries(\n      Object\n        .entries(themeParams)\n        .map(([key, value]) => [keyToExternal(key), value]),\n    ),\n  );\n}\n","import { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\n\nimport type { LaunchParams } from './types.js';\n\n/**\n * Converts launch parameters to its initial representation.\n * @param value - launch parameters.\n */\nexport function serializeLaunchParams(value: LaunchParams): string {\n  const {\n    initDataRaw,\n    themeParams,\n    platform,\n    version,\n    showSettings,\n    startParam,\n    botInline,\n  } = value;\n\n  const params = new URLSearchParams();\n\n  params.set('tgWebAppPlatform', platform);\n  params.set('tgWebAppThemeParams', serializeThemeParams(themeParams));\n  params.set('tgWebAppVersion', version);\n\n  if (initDataRaw) {\n    params.set('tgWebAppData', initDataRaw);\n  }\n\n  if (startParam) {\n    params.set('tgWebAppStartParam', startParam);\n  }\n\n  if (typeof showSettings === 'boolean') {\n    params.set('tgWebAppShowSettings', showSettings ? '1' : '0');\n  }\n\n  if (typeof botInline === 'boolean') {\n    params.set('tgWebAppBotInline', botInline ? '1' : '0');\n  }\n\n  return params.toString();\n}\n","import { setStorageValue } from '@/storage/storage.js';\n\nimport { serializeLaunchParams } from './serializeLaunchParams.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * Saves specified launch parameters in the session storage.\n * @param value - launch params to save.\n */\nexport function saveToStorage(value: LaunchParams): void {\n  setStorageValue('launchParams', serializeLaunchParams(value));\n}\n","import { retrieveFromLocation } from './retrieveFromLocation.js';\nimport { retrieveFromPerformance } from './retrieveFromPerformance.js';\nimport { retrieveFromStorage } from './retrieveFromStorage.js';\nimport { saveToStorage } from './saveToStorage.js';\nimport type { LaunchParams } from './types.js';\n\n/**\n * @returns Launch parameters from any known source.\n * @throws Error if extraction was unsuccessful.\n */\nexport function retrieveLaunchParams(): LaunchParams {\n  const errors: string[] = [];\n\n  for (const retrieve of [\n    // Try to retrieve launch parameters from the current location. This method can return\n    // nothing in case, location was changed, and then the page was reloaded.\n    retrieveFromLocation,\n    // Then, try using the lower level API - window.performance.\n    retrieveFromPerformance,\n    // Finally, try to extract launch parameters from the session storage.\n    retrieveFromStorage,\n  ]) {\n    try {\n      const lp = retrieve();\n      saveToStorage(lp);\n      return lp;\n    } catch (e) {\n      errors.push(e instanceof Error ? e.message : JSON.stringify(e));\n    }\n  }\n\n  throw new Error([\n    'Unable to retrieve launch parameters from any known source. Perhaps, you have opened your app outside Telegram?\\n',\n    '📖 Refer to docs for more information:',\n    'https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/environment\\n',\n    'Collected errors:',\n    errors.map(e => `— ${e}`),\n  ].join('\\n'));\n}\n","import { getFirstNavigationEntry } from './getFirstNavigationEntry.js';\n\n/**\n * @returns True, if current page was reloaded.\n * @see https://stackoverflow.com/a/36444134/11894710\n */\nexport function isPageReload(): boolean {\n  const entry = getFirstNavigationEntry();\n  return !!(entry && entry.type === 'reload');\n}\n","import type { CreateRequestIdFn } from './types.js';\n\n/**\n * Creates function which generated request identifiers.\n */\nexport function createRequestIdGenerator(): CreateRequestIdFn {\n  let requestId = 0;\n  return () => (requestId += 1).toString();\n}\n","import { createPostEvent } from '@/bridge/methods/createPostEvent.js';\nimport { retrieveLaunchParams } from '@/launch-params/retrieveLaunchParams.js';\nimport { createSingleton } from '@/misc/createSingleton.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport { createRequestIdGenerator } from '@/request-id/createRequestIdGenerator.js';\nimport type { StorageKey, StorageValue } from '@/storage/storage.js';\nimport { getStorageValue, setStorageValue } from '@/storage/storage.js';\nimport { createCleanup } from '@/misc/createCleanup.js';\n\nimport {\n  FactoryDynamic,\n  FactoryStatic,\n  InitStaticComponentFn,\n  InitDynamicComponentFn,\n  WithOnChange,\n} from './types.js';\n\nconst [createReqId] = createSingleton(createRequestIdGenerator);\n\n/**\n * Creates a new init function based on factory, creating a component, not synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n */\nexport function createComponentInitFn<R>(factory: FactoryStatic<R>): InitStaticComponentFn<R>;\n\n/**\n * Creates a new init function based on factory, creating a component, synchronizing its\n * state with the session storage.\n * @param factory - function creating new component instance.\n * @param storageKey - storage key to restore component from.\n */\nexport function createComponentInitFn<\n  SK extends StorageKey,\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n>(\n  storageKey: SK,\n  factory: FactoryDynamic<R, SK>,\n): InitDynamicComponentFn<R>;\n\nexport function createComponentInitFn<\n  R extends WithOnChange<StorageValue<SK>> | Promise<WithOnChange<StorageValue<SK>>>,\n  SK extends StorageKey,\n>(\n  factoryStaticOrSK: FactoryStatic<R> | SK,\n  factoryDynamic?: FactoryDynamic<R, SK>,\n): InitStaticComponentFn<R> | InitDynamicComponentFn<R> {\n  return () => {\n    const lp = retrieveLaunchParams();\n    const factoryOptions = {\n      ...lp,\n      postEvent: createPostEvent(lp.version),\n      createRequestId: createReqId(),\n    };\n\n    // In static init mode we have no reason to use the storage to restore the state. In this\n    // case we should just call the factory.\n    if (typeof factoryStaticOrSK === 'function') {\n      return factoryStaticOrSK(factoryOptions);\n    }\n\n    // Otherwise, we create a new component instance from the storage if possible and add\n    // required change listeners.\n    const [addCleanup, cleanup, cleanedUp] = createCleanup();\n\n    const result = factoryDynamic!({\n      ...factoryOptions,\n      // State should only be passed only in case, current page was reloaded. If we don't add\n      // this check, state restoration will work improperly in the web version of Telegram,\n      // when we are always working in the same \"session\" (tab).\n      state: isPageReload() ? getStorageValue(factoryStaticOrSK) : undefined,\n      addCleanup,\n    });\n\n    const bindChange = (value: WithOnChange<StorageValue<SK>>) => {\n      if (!cleanedUp) {\n        addCleanup(\n          value.on('change', (state) => {\n            setStorageValue(factoryStaticOrSK, state);\n          }),\n        );\n      }\n      return value;\n    };\n\n    return [\n      result instanceof Promise ? result.then(bindChange) : bindChange(result),\n      cleanup,\n    ] as unknown as R;\n  };\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { BackButton } from './BackButton.js';\n\n/**\n * @returns A new initialized instance of the `BackButton` class.\n * @see BackButton\n */\nexport const initBackButton = createComponentInitFn('backButton', ({\n  postEvent,\n  version,\n  state = { isVisible: false },\n}) => new BackButton(state.isVisible, version, postEvent));\n","import { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithSupportsAndTrackableState<StateShape extends object, SupportsMethod extends string>\n  extends WithSupportsAndStateUtils<StateShape, SupportsMethod> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import type { BiometryType, MiniAppsEventPayload } from '@/bridge/events/types.js';\n\nexport interface FormatBiometryInfoResult {\n  /**\n   * Shows whether biometry is available.\n   */\n  available: boolean;\n  /**\n   * Shows whether permission to use biometrics has been requested.\n   */\n  accessRequested: boolean;\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  accessGranted: boolean;\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  deviceId: string;\n  /**\n   * Show whether local storage contains previously saved token.\n   */\n  tokenSaved: boolean;\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  type: BiometryType;\n}\n\n/**\n * Converts `biometry_info_received` to some common shape.\n * @param event - event payload.\n * @see biometry_info_received\n */\nexport function formatEvent(\n  event: MiniAppsEventPayload<'biometry_info_received'>,\n): FormatBiometryInfoResult {\n  const data = event.available ? event : {\n    available: false,\n    device_id: '',\n    token_saved: false,\n    access_requested: false,\n    access_granted: false,\n    type: '',\n  };\n\n  return {\n    available: true,\n    type: data.type,\n    deviceId: data.device_id,\n    tokenSaved: data.token_saved,\n    accessRequested: data.access_requested,\n    accessGranted: data.access_granted,\n  };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { formatEvent } from '@/components/BiometryManager/formatEvent.js';\nimport type { BiometryType } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  BiometryManagerAuthenticateOptions,\n  BiometryManagerProps,\n  BiometryManagerRequestAccessOptions,\n  BiometryManagerState,\n  BiometryManagerUpdateTokenOptions,\n} from '@/components/BiometryManager/types.js';\n\nexport class BiometryManager extends WithSupportsAndTrackableState<BiometryManagerState,\n  | 'auth'\n  | 'openSettings'\n  | 'requestAccess'\n  | 'updateToken'\n> {\n  private readonly postEvent: PostEvent;\n\n  private authPromise?: Promise<string | undefined>;\n\n  private accessPromise?: Promise<boolean>;\n\n  constructor({ postEvent, version, ...rest }: BiometryManagerProps) {\n    super(rest, version, {\n      auth: 'web_app_biometry_request_auth',\n      openSettings: 'web_app_biometry_open_settings',\n      requestAccess: 'web_app_biometry_request_access',\n      updateToken: 'web_app_biometry_update_token',\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Shows whether biometry is available.\n   */\n  get available(): boolean {\n    return this.get('available');\n  }\n\n  /**\n   * Shows whether permission to use biometrics has been granted.\n   */\n  get accessGranted(): boolean {\n    return this.get('accessGranted');\n  }\n\n  /**\n   * Shows whether if permission to use biometrics has been requested.\n   */\n  get accessRequested(): boolean {\n    return this.get('accessRequested');\n  }\n\n  /**\n   * Authenticates the user using biometrics.\n   * @param options - method options.\n   * @since 7.2\n   * @returns Token from the local secure storage, if authentication was successful.\n   */\n  async authenticate({\n    reason,\n    ...rest\n  }: BiometryManagerAuthenticateOptions): Promise<string | undefined> {\n    if (!this.authPromise) {\n      this.authPromise = request({\n        ...rest,\n        method: 'web_app_biometry_request_auth',\n        event: 'biometry_auth_requested',\n        postEvent: this.postEvent,\n        params: {\n          // TODO: Check if reason is empty works fine.\n          reason: (reason || '').trim(),\n        },\n      })\n        .then(({ token }) => token)\n        .finally(() => this.authPromise = undefined);\n    }\n    return this.authPromise;\n  }\n\n  /**\n   * A unique device identifier that can be used to match the token to the device.\n   */\n  get deviceId(): string {\n    return this.get('deviceId');\n  }\n\n  /**\n   * Opens the biometric access settings for bots. Useful when you need to request biometrics\n   * access to users who haven't granted it yet.\n   *\n   * _Note that this method can be called only in response to user interaction with the Mini App\n   * interface (e.g. a click inside the Mini App or on the main button)_.\n   * @since 7.2\n   */\n  openSettings(): void {\n    this.postEvent('web_app_biometry_open_settings');\n  }\n\n  /**\n   * Requests permission to use biometrics.\n   * @since 7.2\n   * @returns Promise with true, if access was granted.\n   */\n  requestAccess({ reason, ...rest }: BiometryManagerRequestAccessOptions = {}): Promise<boolean> {\n    if (!this.accessPromise) {\n      this.accessPromise = request({\n        ...rest,\n        postEvent: this.postEvent,\n        method: 'web_app_biometry_request_access',\n        event: 'biometry_info_received',\n        params: { reason: reason || '' },\n      })\n        .then((response) => {\n          // Actualize local state.\n          const formatted = formatEvent(response);\n          this.set(formatted);\n\n          return formatted.accessGranted;\n        })\n        .finally(() => this.accessPromise = undefined);\n    }\n    return this.accessPromise;\n  }\n\n  /**\n   * The type of biometrics currently available on the device.\n   */\n  get biometryType(): BiometryType | undefined {\n    return this.get('biometryType');\n  }\n\n  /**\n   * Shows whether token was saved previously in the local secure storage.\n   */\n  get tokenSaved(): boolean {\n    return this.get('tokenSaved');\n  }\n\n  /**\n   * Updates the biometric token in a secure storage on the device.\n   * @returns Promise with `true`, if token was updated.\n   */\n  async updateToken({ token, ...rest }: BiometryManagerUpdateTokenOptions = {}): Promise<boolean> {\n    return ['removed', 'updated'].includes(\n      (\n        await request({\n          ...rest,\n          postEvent: this.postEvent,\n          method: 'web_app_biometry_update_token',\n          event: 'biometry_token_updated',\n          params: { token: token || '' },\n        })\n      ).status,\n    );\n  }\n}\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { formatEvent } from './formatEvent.js';\nimport type { FormatBiometryInfoResult } from './formatEvent.js';\n\n/**\n * Requests biometry information.\n * @param options - additional execution options.\n */\nexport async function requestBiometryInfo(\n  options?: ExecuteWithOptions,\n): Promise<FormatBiometryInfoResult> {\n  return formatEvent(\n    await request({\n      ...(options || {}),\n      method: 'web_app_biometry_get_info',\n      event: 'biometry_info_received',\n    }),\n  );\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\nimport { supports } from '@/bridge/supports.js';\n\nimport { BiometryManager } from './BiometryManager.js';\nimport { requestBiometryInfo } from './requestBiometryInfo.js';\n\n/**\n * @returns A promise with a new initialized instance of the `BiometryManager` class.\n * @see BiometryManager\n */\nexport const initBiometryManager = createComponentInitFn(\n  'biometryManager',\n  async ({ postEvent, version, state }) => {\n    return new BiometryManager({\n      ...(state || supports('web_app_biometry_get_info', version)\n        ? state || await requestBiometryInfo({ timeout: 1000 })\n        : {\n          available: false,\n          accessGranted: false,\n          accessRequested: false,\n          tokenSaved: false,\n          deviceId: '',\n        }),\n      version,\n      postEvent,\n    });\n  },\n);\n","import { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { StateEvents } from '@/classes/State/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter<StateShape extends object> = EventEmitter<StateEvents<StateShape>>;\n\nexport class WithTrackableState<StateShape extends object>\n  extends WithStateUtils<StateShape> {\n  /**\n   * Adds a new event listener.\n   */\n  on: Emitter<StateShape>['on'] = this.state.on.bind(this.state);\n\n  /**\n   * Removes the event listener.\n   */\n  off: Emitter<StateShape>['off'] = this.state.off.bind(this.state);\n}\n","import { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { ClosingBehaviorState } from '@/components/ClosingBehavior/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/closing-behavior\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/closing-behavior\n */\nexport class ClosingBehavior extends WithTrackableState<ClosingBehaviorState> {\n  constructor(isConfirmationNeeded: boolean, private readonly postEvent: PostEvent) {\n    super({ isConfirmationNeeded });\n  }\n\n  private set isConfirmationNeeded(value: boolean) {\n    this.set('isConfirmationNeeded', value);\n    this.postEvent('web_app_setup_closing_behavior', { need_confirmation: value });\n  }\n\n  /**\n   * True, if the confirmation dialog should be shown while the user is trying to close\n   * the Mini App.\n   */\n  get isConfirmationNeeded(): boolean {\n    return this.get('isConfirmationNeeded');\n  }\n\n  /**\n   * Disables the confirmation dialog when closing the Mini App.\n   */\n  disableConfirmation(): void {\n    this.isConfirmationNeeded = false;\n  }\n\n  /**\n   * Enables the confirmation dialog when closing the Mini App.\n   */\n  enableConfirmation(): void {\n    this.isConfirmationNeeded = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { ClosingBehavior } from './ClosingBehavior.js';\n\n/**\n * @returns A new initialized instance of the `ClosingBehavior` class.\n * @see ClosingBehavior\n */\nexport const initClosingBehavior = createComponentInitFn(\n  'closingBehavior',\n  ({\n    postEvent,\n    state = { isConfirmationNeeded: false },\n  }) => new ClosingBehavior(state.isConfirmationNeeded, postEvent),\n);\n","import { createSupportsFn } from '@/supports/createSupportsFn.js';\nimport type { MiniAppsMethodName } from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport class WithSupports<SupportsMethod extends string> {\n  constructor(\n    /**\n     * Mini Apps version.\n     */\n    version: Version,\n    /**\n     * Supports method schema.\n     */\n    supportsSchema: Record<SupportsMethod, MiniAppsMethodName>,\n  ) {\n    this.supports = createSupportsFn(version, supportsSchema);\n  }\n\n  /**\n   * @returns True, if specified method is supported by the current component.\n   */\n  supports: SupportsFn<SupportsMethod>;\n}\n","import { createTypeError } from '../createTypeError.js';\nimport { ValueParser } from '../ValueParser/ValueParser.js';\nimport type { ArrayParserOfResult } from '../ArrayParser/types.js';\nimport type { AnyParser, Parser } from '../types.js';\nimport type { ValueParserParseResult } from '../ValueParser/types.js';\n\n/**\n * Parses incoming value as array.\n * @param value - value to parse.\n */\nfunction parseArray(value: unknown): unknown[] {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    try {\n      const json = JSON.parse(value);\n\n      if (Array.isArray(json)) {\n        return json;\n      }\n    } catch {}\n  }\n  throw createTypeError();\n}\n\nexport class ArrayParser<ItemType, IsOptional extends boolean>\n  extends ValueParser<unknown[], IsOptional> {\n  private itemParser: Parser<any>;\n\n  constructor(\n    itemParser: AnyParser<ItemType>,\n    isOptional: IsOptional,\n    type?: string,\n  ) {\n    super(parseArray, isOptional, type);\n\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n  }\n\n  /**\n   * Attempts to parse passed value\n   * @param value - value to parse.\n   * @throws {SDKError} ERR_PARSE\n   * @see ERR_PARSE\n   */\n  override parse(value: unknown): ValueParserParseResult<ItemType[], IsOptional> {\n    const arr = super.parse(value);\n    return arr === undefined ? arr : arr.map(this.itemParser);\n  }\n\n  of<Item>(itemParser: AnyParser<Item>): ArrayParserOfResult<this, Item, IsOptional> {\n    this.itemParser = typeof itemParser === 'function'\n      ? itemParser\n      : itemParser.parse.bind(itemParser);\n\n    return this as ArrayParserOfResult<this, Item, IsOptional>;\n  }\n}\n","import { ArrayParser } from '@/parsing/ArrayParser/ArrayParser.js';\n\n/**\n * Parses incoming value as an array.\n * @param parserTypeName - parser type name.\n */\nexport function array(parserTypeName?: string): ArrayParser<unknown, false> {\n  return new ArrayParser((value) => value, false, parserTypeName);\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { array } from '@/parsing/parsers/array.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\nimport type { Version } from '@/version/types.js';\n\nfunction objectFromKeys<K extends string, V>(keys: K[], value: V): Record<K, V> {\n  return Object.fromEntries(keys.map((k) => [k, value])) as Record<K, V>;\n}\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/cloud-storage\n */\nexport class CloudStorage extends WithSupports<'delete' | 'get' | 'getKeys' | 'set'> {\n  constructor(\n    version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, {\n      delete: 'web_app_invoke_custom_method',\n      get: 'web_app_invoke_custom_method',\n      getKeys: 'web_app_invoke_custom_method',\n      set: 'web_app_invoke_custom_method',\n    });\n  }\n\n  /**\n   * Deletes specified key or keys from the cloud storage.\n   * @param keyOrKeys - key or keys to delete.\n   * @param options - request execution options.\n   */\n  async delete(keyOrKeys: string | string[], options: ExecuteWithTimeout = {}): Promise<void> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (keys.length) {\n      await invokeCustomMethod(\n        'deleteStorageValues',\n        { keys },\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      );\n    }\n  }\n\n  /**\n   * Returns list of all keys presented in the cloud storage.\n   * @param options - request execution options.\n   */\n  async getKeys(options: ExecuteWithTimeout = {}): Promise<string[]> {\n    return array().of(string()).parse(\n      await invokeCustomMethod(\n        'getStorageKeys',\n        {},\n        this.createRequestId(),\n        { ...options, postEvent: this.postEvent },\n      ),\n    );\n  }\n\n  /**\n   * Returns map, where key is one of the specified in keys argument, and value is according\n   * storage value.\n   * @param keys - keys list.\n   * @param options - request execution options.\n   */\n  get<K extends string>(keys: K[], options?: ExecuteWithTimeout): Promise<Record<K, string>>;\n\n  /**\n   * Returns value of the specified key.\n   * @param key - cloud storage key.\n   * @param options - request execution options.\n   * @return Value of the specified key. In case, key was not created previously, function\n   * will return empty string.\n   */\n  get(key: string, options?: ExecuteWithTimeout): Promise<string>;\n\n  async get(\n    keyOrKeys: string | string[],\n    options: ExecuteWithTimeout = {},\n  ): Promise<string | Record<string, string>> {\n    const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];\n    if (!keys.length) {\n      return objectFromKeys(keys, '');\n    }\n\n    const data = await invokeCustomMethod(\n      'getStorageValues',\n      { keys },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n    const result = json(objectFromKeys(keys, string()), 'CloudStorageData').parse(data);\n\n    return Array.isArray(keyOrKeys) ? result : result[keyOrKeys];\n  }\n\n  /**\n   * Saves specified value by key.\n   * @param key - storage key.\n   * @param value - storage value.\n   * @param options - request execution options.\n   */\n  async set(key: string, value: string, options: ExecuteWithTimeout = {}): Promise<void> {\n    await invokeCustomMethod(\n      'saveStorageValue',\n      { key, value },\n      this.createRequestId(),\n      { ...options, postEvent: this.postEvent },\n    );\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { CloudStorage } from './CloudStorage.js';\n\n/**\n * @returns A new initialized instance of the `CloudStorage` class.\n * @see CloudStorage\n */\nexport const initCloudStorage = createComponentInitFn(\n  ({ createRequestId, postEvent, version }) => {\n    return new CloudStorage(version, createRequestId, postEvent);\n  },\n);\n","import { WithSupports } from '@/classes/WithSupports.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  ImpactHapticFeedbackStyle,\n  NotificationHapticFeedbackType,\n} from '@/bridge/methods/types/haptic.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/haptic-feedback\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/haptic-feedback\n */\nexport class HapticFeedback\n  extends WithSupports<'impactOccurred' | 'notificationOccurred' | 'selectionChanged'> {\n  constructor(version: Version, private readonly postEvent: PostEvent) {\n    super(version, {\n      impactOccurred: 'web_app_trigger_haptic_feedback',\n      notificationOccurred: 'web_app_trigger_haptic_feedback',\n      selectionChanged: 'web_app_trigger_haptic_feedback',\n    });\n  }\n\n  /**\n   * A method tells that an impact occurred. The Telegram app may play the\n   * appropriate haptics based on style value passed.\n   * @param style - impact style.\n   */\n  impactOccurred(style: ImpactHapticFeedbackStyle): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'impact',\n      impact_style: style,\n    });\n  }\n\n  /**\n   * A method tells that a task or action has succeeded, failed, or produced\n   * a warning. The Telegram app may play the appropriate haptics based on\n   * type value passed.\n   * @param type - notification type.\n   */\n  notificationOccurred(type: NotificationHapticFeedbackType): void {\n    this.postEvent('web_app_trigger_haptic_feedback', {\n      type: 'notification',\n      notification_type: type,\n    });\n  }\n\n  /**\n   * A method tells that the user has changed a selection. The Telegram app\n   * may play the appropriate haptics.\n   *\n   * Do not use this feedback when the user makes or confirms a selection;\n   * use it only when the selection changes.\n   */\n  selectionChanged(): void {\n    this.postEvent('web_app_trigger_haptic_feedback', { type: 'selection_change' });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { HapticFeedback } from './HapticFeedback.js';\n\n/**\n * @returns A new initialized instance of the `HapticFeedback` class.\n * @see HapticFeedback\n */\nexport const initHapticFeedback = createComponentInitFn(\n  ({ version, postEvent }) => new HapticFeedback(version, postEvent),\n);\n","import type {\n  Chat,\n  ChatType,\n  InitDataParsed,\n  User,\n} from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/init-data\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/init-data\n */\nexport class InitData {\n  constructor(private readonly initData: InitDataParsed) {\n  }\n\n  /**\n   * @see InitDataParsed.authDate\n   */\n  get authDate(): Date {\n    return this.initData.authDate;\n  }\n\n  /**\n   * @see InitDataParsed.canSendAfter\n   */\n  get canSendAfter(): number | undefined {\n    return this.initData.canSendAfter;\n  }\n\n  /**\n   * Date after which it is allowed to call\n   * the [answerWebAppQuery](https://core.telegram.org/bots/api#answerwebappquery) method.\n   */\n  get canSendAfterDate(): Date | undefined {\n    const { canSendAfter } = this;\n\n    return canSendAfter\n      ? new Date(this.authDate.getTime() + canSendAfter * 1000)\n      : undefined;\n  }\n\n  /**\n   * @see InitDataParsed.chat\n   */\n  get chat(): Chat | undefined {\n    return this.initData.chat;\n  }\n\n  /**\n   * @see InitDataParsed.chatType\n   */\n  get chatType(): ChatType | undefined {\n    return this.initData.chatType;\n  }\n\n  /**\n   * @see InitDataParsed.chatInstance\n   */\n  get chatInstance(): string | undefined {\n    return this.initData.chatInstance;\n  }\n\n  /**\n   * @see InitDataParsed.hash\n   */\n  get hash(): string {\n    return this.initData.hash;\n  }\n\n  /**\n   * @see InitDataParsed.queryId\n   */\n  get queryId(): string | undefined {\n    return this.initData.queryId;\n  }\n\n  /**\n   * @see InitDataParsed.receiver\n   */\n  get receiver(): User | undefined {\n    return this.initData.receiver;\n  }\n\n  /**\n   * @see InitDataParsed.startParam\n   */\n  get startParam(): string | undefined {\n    return this.initData.startParam;\n  }\n\n  /**\n   * @see InitDataParsed.user\n   */\n  get user(): User | undefined {\n    return this.initData.user;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { InitData } from './InitData.js';\n\n/**\n * @returns A new initialized instance of the `InitData` class or undefined.\n * @see InitData\n */\nexport const initInitData = createComponentInitFn(\n  ({ initData }) => (initData ? new InitData(initData) : undefined),\n);\n","import { initData } from './parsers/initData.js';\nimport type { InitDataParsed } from './types.js';\n\n/**\n * Parses incoming value as init data.\n * @param value - value to parse.\n */\nexport function parseInitData(value: unknown): InitDataParsed {\n  return initData().parse(value);\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { InvoiceStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport type { InvoiceState } from './types.js';\n\n// TODO: Usage.\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/invoice\n */\nexport class Invoice extends WithSupportsAndTrackableState<InvoiceState, 'open'> {\n  constructor(\n    isOpened: boolean,\n    version: Version,\n    private readonly postEvent: PostEvent,\n  ) {\n    super({ isOpened }, version, { open: 'web_app_open_invoice' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if invoice is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens an invoice using its slug.\n   * @param slug - invoice slug.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(slug: string): Promise<InvoiceStatus>;\n\n  /**\n   * Opens an invoice using its url. It expects passing link in full format, with hostname \"t.me\".\n   * @param url - invoice URL.\n   * @param type - value type.\n   * @throws {Error} Invoice is already opened.\n   */\n  open(url: string, type: 'url'): Promise<InvoiceStatus>;\n\n  async open(urlOrSlug: string, type?: 'url'): Promise<InvoiceStatus> {\n    if (this.isOpened) {\n      throw new Error('Invoice is already opened');\n    }\n\n    let slug: string;\n    if (!type) {\n      slug = urlOrSlug;\n    } else {\n      const { hostname, pathname } = new URL(urlOrSlug, window.location.href);\n      if (hostname !== 't.me') {\n        throw new Error(`Incorrect hostname: ${hostname}`);\n      }\n\n      // Valid examples:\n      // \"/invoice/my-slug\"\n      // \"/$my-slug\"\n      const match = pathname.match(/^\\/(\\$|invoice\\/)([A-Za-z0-9\\-_=]+)$/);\n      if (!match) {\n        throw new Error('Link pathname has incorrect format. Expected to receive \"/invoice/{slug}\" or \"/${slug}\"');\n      }\n      [, , slug] = match;\n    }\n\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_invoice',\n        event: 'invoice_closed',\n        params: { slug },\n        postEvent: this.postEvent,\n        capture(data) {\n          return slug === data.slug;\n        },\n      });\n\n      return result.status;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Invoice } from './Invoice.js';\n\n/**\n * @returns A new initialized instance of the `Invoice` class.\n * @see Invoice\n */\nexport const initInvoice = createComponentInitFn(\n  ({ version, postEvent }) => new Invoice(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithStateUtils } from '@/classes/WithStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MainButtonEvents,\n  MainButtonParams,\n  MainButtonProps,\n  MainButtonState,\n} from '@/components/MainButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\n\ntype Emitter = EventEmitter<MainButtonEvents>;\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/main-button\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/main-button\n */\nexport class MainButton extends WithStateUtils<MainButtonState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, ...rest }: MainButtonProps) {\n    super(rest);\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * The MainButton background color.\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Sends current local state to the Telegram application.\n   */\n  private commit(): void {\n    // We should not commit changes until payload is correct. We could\n    // have some invalid values in case, button instance was created\n    // with empty values. Otherwise, an unexpected behavior could be received.\n    if (this.text === '') {\n      return;\n    }\n\n    this.postEvent('web_app_setup_main_button', {\n      is_visible: this.isVisible,\n      is_active: this.isEnabled,\n      is_progress_visible: this.isLoaderVisible,\n      text: this.text,\n      color: this.bgColor,\n      text_color: this.textColor,\n    });\n  }\n\n  /**\n   * Disables the MainButton.\n   * @see Does not work on Android: https://github.com/Telegram-Mini-Apps/issues/issues/1\n   */\n  disable(): this {\n    this.isEnabled = false;\n    return this;\n  }\n\n  /**\n   * Enables the MainButton.\n   */\n  enable(): this {\n    this.isEnabled = true;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton.\n   */\n  hide(): this {\n    this.isVisible = false;\n    return this;\n  }\n\n  /**\n   * Hides the MainButton loading indicator.\n   */\n  hideLoader(): this {\n    this.isLoaderVisible = false;\n    return this;\n  }\n\n  private set isEnabled(isEnabled: boolean) {\n    this.setParams({ isEnabled });\n  }\n\n  /**\n   * True if the MainButton is enabled.\n   */\n  get isEnabled(): boolean {\n    return this.get('isEnabled');\n  }\n\n  private set isLoaderVisible(isLoaderVisible: boolean) {\n    this.setParams({ isLoaderVisible });\n  }\n\n  /**\n   * True if the MainButton loader is visible.\n   */\n  get isLoaderVisible(): boolean {\n    return this.get('isLoaderVisible');\n  }\n\n  private set isVisible(isVisible: boolean) {\n    this.setParams({ isVisible });\n  }\n\n  /**\n   * True if the MainButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('main_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the MainButton.\n   *\n   * Note that opening the Mini App from the attachment menu hides the main button until the\n   * user interacts with the Mini App interface.\n   */\n  show(): this {\n    this.isVisible = true;\n    return this;\n  }\n\n  /**\n   * Shows a loading indicator on the Main Button.\n   */\n  showLoader(): this {\n    this.isLoaderVisible = true;\n    return this;\n  }\n\n  /**\n   * Sets a new MainButton text. Minimal length for the text is 1 symbol, and maximum is 64 symbols.\n   * @param text - a new text.\n   */\n  setText(text: string): this {\n    return this.setParams({ text });\n  }\n\n  /**\n   * Sets a new Main Button text color.\n   * @param textColor - new text color.\n   */\n  setTextColor(textColor: RGB): this {\n    return this.setParams({ textColor });\n  }\n\n  /**\n   * Updates current Main Button color.\n   * @param bgColor - color to set.\n   */\n  setBgColor(bgColor: RGB): this {\n    return this.setParams({ bgColor });\n  }\n\n  /**\n   * Allows setting multiple Main Button parameters.\n   * @param params - Main Button parameters.\n   */\n  setParams(params: Partial<MainButtonParams>): this {\n    this.set(params);\n    this.commit();\n    return this;\n  }\n\n  /**\n   * The MainButton text.\n   */\n  get text(): string {\n    return this.get('text');\n  }\n\n  /**\n   * The MainButton text color.\n   */\n  get textColor(): RGB {\n    return this.get('textColor');\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MainButton } from './MainButton.js';\n\n/**\n * @returns A new initialized instance of the `MainButton` class.\n * @see MainButton\n */\nexport const initMainButton = createComponentInitFn(\n  'mainButton',\n  ({\n    postEvent,\n    themeParams,\n    state = {\n      isVisible: false,\n      isEnabled: false,\n      text: '',\n      isLoaderVisible: false,\n      textColor: themeParams.buttonTextColor || '#ffffff',\n      bgColor: themeParams.buttonColor || '#000000',\n    },\n  }) => new MainButton({ ...state, postEvent }),\n);\n","import { date } from '@/parsing/parsers/date.js';\nimport { json } from '@/parsing/parsers/json.js';\nimport { number } from '@/parsing/parsers/number.js';\nimport { searchParams } from '@/parsing/parsers/searchParams.js';\nimport { string } from '@/parsing/parsers/string.js';\nimport type { ValueParser } from '@/parsing/ValueParser/ValueParser.js';\n\nimport type { RequestedContact } from '../types.js';\n\n/**\n * Returns function which parses incoming value as a contact information.\n */\nexport function contact(): ValueParser<RequestedContact, false> {\n  return searchParams({\n    contact: json({\n      userId: {\n        type: number(),\n        from: 'user_id',\n      },\n      phoneNumber: {\n        type: string(),\n        from: 'phone_number',\n      },\n      firstName: {\n        type: string(),\n        from: 'first_name',\n      },\n      lastName: {\n        type: string().optional(),\n        from: 'last_name',\n      },\n    }),\n    authDate: {\n      type: date(),\n      from: 'auth_date',\n    },\n    hash: string(),\n  }, 'RequestedContact');\n}\n","import { supports } from '@/bridge/supports.js';\nimport type {\n  MiniAppsMethodVersionedParams,\n  MiniAppsMethodWithVersionedParams,\n} from '@/bridge/methods/types/methods.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\ntype HasCheckSupportMethodTuple = {\n  [M in MiniAppsMethodWithVersionedParams]: [M, MiniAppsMethodVersionedParams<M>]\n}[MiniAppsMethodWithVersionedParams];\n\n/**\n * Returns function, which accepts predefined method name and checks if it is supported\n * via passed schema and version.\n * @param schema - object which contains methods names and TWA methods with specified parameter\n * as a dependency.\n * @param version - platform version.\n */\nexport function createSupportsParamFn<Method extends string>(\n  version: Version,\n  schema: Record<Method, HasCheckSupportMethodTuple>,\n): SupportsFn<Method> {\n  return (method) => {\n    const [tmaMethod, param] = schema[method];\n\n    return supports(tmaMethod, param, version);\n  };\n}\n","/**\n * Awaits for specified amount of time.\n * @param duration - duration in ms to await.\n */\nexport function sleep(duration: number): Promise<void> {\n  return new Promise((res) => {\n    setTimeout(res, duration);\n  });\n}\n","import { invokeCustomMethod } from '@/bridge/invokeCustomMethod.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport { isRGB } from '@/colors/isRGB.js';\nimport { contact } from '@/components/MiniApp/parsing/contact.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { createTimeoutError } from '@/timeout/createTimeoutError.js';\nimport { sleep } from '@/timeout/sleep.js';\nimport { withTimeout } from '@/timeout/withTimeout.js';\nimport type { PhoneRequestedStatus, WriteAccessRequestedStatus } from '@/bridge/events/types.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { SwitchInlineQueryChatType } from '@/bridge/methods/types/methods.js';\nimport type { RGB } from '@/colors/types.js';\nimport type {\n  MiniAppHeaderColor,\n  MiniAppProps,\n  MiniAppState,\n  RequestedContact,\n} from '@/components/MiniApp/types.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { ExecuteWithTimeout } from '@/types/methods.js';\n\n/**\n * Provides common Mini Apps functionality not covered by other system components.\n */\nexport class MiniApp extends WithSupportsAndTrackableState<\n  MiniAppState,\n  | 'requestPhoneAccess'\n  | 'requestWriteAccess'\n  | 'switchInlineQuery'\n  | 'setHeaderColor'\n  | 'setBackgroundColor'\n> {\n  private readonly botInline: boolean;\n\n  private readonly postEvent: PostEvent;\n\n  private readonly createRequestId: CreateRequestIdFn;\n\n  private requestPhoneAccessPromise: Promise<PhoneRequestedStatus> | undefined;\n\n  private requestWriteAccessPromise: Promise<WriteAccessRequestedStatus> | undefined;\n\n  constructor({ postEvent, createRequestId, version, botInline, ...rest }: MiniAppProps) {\n    super(rest, version, {\n      requestPhoneAccess: 'web_app_request_phone',\n      requestWriteAccess: 'web_app_request_write_access',\n      switchInlineQuery: 'web_app_switch_inline_query',\n      setHeaderColor: 'web_app_set_header_color',\n      setBackgroundColor: 'web_app_set_background_color',\n    });\n\n    this.createRequestId = createRequestId;\n    this.postEvent = postEvent;\n    this.botInline = botInline;\n\n    const supportsOriginal = this.supports.bind(this);\n    this.supports = (method) => {\n      if (!supportsOriginal(method)) {\n        return false;\n      }\n\n      // web_app_switch_inline_query requires a Mini App to be in inline mode, that's why we\n      // add 1 more check here.\n      return method !== 'switchInlineQuery' || botInline;\n    };\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'setHeaderColor.color': ['web_app_set_header_color', 'color'],\n      'close.returnBack': ['web_app_close', 'return_back'],\n    });\n  }\n\n  /**\n   * Attempts to get requested contact.\n   * @param timeout - request timeout.\n   */\n  private async getRequestedContact({\n    timeout = 10000,\n  }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    return contact().parse(\n      await invokeCustomMethod(\n        'getRequestedContact',\n        {},\n        this.createRequestId(),\n        { postEvent: this.postEvent, timeout },\n      ),\n    );\n  }\n\n  /**\n   * The Mini App background color.\n   * @example \"#ffaabb\"\n   */\n  get bgColor(): RGB {\n    return this.get('bgColor');\n  }\n\n  /**\n   * Closes the Mini App.\n   * @param returnBack - should the application be wrapped into the bottom bar.\n   */\n  close(returnBack?: boolean): void {\n    this.postEvent('web_app_close', this.supportsParam('close.returnBack')\n      ? { return_back: returnBack }\n      : {});\n  }\n\n  /**\n   * The Mini App header color.\n   * @example \"#ffaabb\"\n   * @example \"bg_color\"\n   */\n  get headerColor(): MiniAppHeaderColor {\n    return this.get('headerColor');\n  }\n\n  /**\n   * True if the Mini App is currently launched in bot inline mode.\n   */\n  get isBotInline(): boolean {\n    return this.botInline;\n  }\n\n  /**\n   * True if the current Mini App background color is recognized as dark.\n   */\n  get isDark(): boolean {\n    return isColorDark(this.bgColor);\n  }\n\n  /**\n   * Informs the Telegram app that the Mini App is ready to be displayed.\n   *\n   * It is recommended to call this method as early as possible, as soon as all essential\n   * interface elements loaded. Once this method called, the loading placeholder is hidden\n   * and the Mini App shown.\n   *\n   * If the method not called, the placeholder will be hidden only when the page fully loaded.\n   */\n  ready(): void {\n    this.postEvent('web_app_ready');\n  }\n\n  /**\n   * Requests current user contact information. In contrary to requestPhoneAccess, this method\n   * returns promise with contact information that rejects in case, user denied access, or request\n   * failed.\n   * @param options - additional options.\n   */\n  async requestContact({ timeout = 5000 }: ExecuteWithTimeout = {}): Promise<RequestedContact> {\n    // First of all, let's try to get the requested contact. Probably, we already requested\n    // it before.\n    try {\n      return await this.getRequestedContact();\n    } catch { /* empty */\n    }\n\n    // Then, request access to user's phone.\n    const status = await this.requestPhoneAccess();\n    if (status !== 'sent') {\n      throw new Error('Access denied.');\n    }\n\n    // Expected deadline.\n    const deadlineAt = Date.now() + timeout;\n\n    // Time to wait before executing the next request.\n    let sleepTime = 50;\n\n    // We are trying to retrieve the requested contact until deadline was reached.\n    return withTimeout(async () => {\n      while (Date.now() < deadlineAt) {\n        try {\n          return await this.getRequestedContact();\n        } catch {\n        }\n\n        // Sleep for some time.\n        await sleep(sleepTime);\n\n        // Increase the sleep time not to kill the backend service.\n        sleepTime += 50;\n      }\n\n      throw createTimeoutError(timeout);\n    }, timeout);\n  }\n\n  /**\n   * Requests current user phone access. Method returns promise, which resolves\n   * status of the request. In case, user accepted the request, Mini App bot will receive\n   * the according notification.\n   *\n   * To obtain the retrieved information instead, utilize the `requestContact` method.\n   * @param options - additional options.\n   * @see requestContact\n   */\n  async requestPhoneAccess(options: ExecuteWithTimeout = {}): Promise<PhoneRequestedStatus> {\n    if (!this.requestPhoneAccessPromise) {\n      this.requestPhoneAccessPromise = request({\n        ...options,\n        method: 'web_app_request_phone',\n        event: 'phone_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestPhoneAccessPromise = undefined);\n    }\n    return this.requestPhoneAccessPromise;\n  }\n\n  /**\n   * Requests write message access to current user.\n   * @param options - additional options.\n   */\n  async requestWriteAccess(options: ExecuteWithTimeout = {}): Promise<WriteAccessRequestedStatus> {\n    if (!this.requestWriteAccessPromise) {\n      this.requestWriteAccessPromise = request({\n        ...options,\n        method: 'web_app_request_write_access',\n        event: 'write_access_requested',\n        postEvent: this.postEvent,\n      })\n        .then(({ status }) => status)\n        .finally(() => this.requestWriteAccessPromise = undefined);\n    }\n    return this.requestWriteAccessPromise;\n  }\n\n  /**\n   * A method used to send data to the bot. When this method called, a service message sent to\n   * the bot containing the data of the length up to 4096 bytes, and the Mini App closed. See the\n   * field `web_app_data` in the class [Message](https://core.telegram.org/bots/api#message).\n   *\n   * This method is only available for Mini Apps launched via a Keyboard button.\n   * @param data - data to send to bot.\n   * @throws {Error} data has incorrect size.\n   */\n  sendData(data: string): void {\n    const { size } = new Blob([data]);\n    if (!size || size > 4096) {\n      throw new Error(`Passed data has incorrect size: ${size}`);\n    }\n    this.postEvent('web_app_data_send', { data });\n  }\n\n  /**\n   * Updates current Mini App header color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - color key or RGB color.\n   */\n  setHeaderColor(color: MiniAppHeaderColor): void {\n    this.postEvent('web_app_set_header_color', isRGB(color) ? { color } : { color_key: color });\n    this.set('headerColor', color);\n  }\n\n  /**\n   * Updates current Mini App background color.\n   *\n   * @see No effect on desktop: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/9\n   * @see Works incorrectly in Android: https://github.com/Telegram-Mini-Apps/telegram-apps/issues/8\n   * @param color - RGB color.\n   */\n  setBgColor(color: RGB): void {\n    this.postEvent('web_app_set_background_color', { color });\n    this.set('bgColor', color);\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'setHeaderColor.color' | 'close.returnBack'>;\n\n  /**\n   * Inserts the bot's username and the specified inline query in the current chat's input field.\n   * Query may be empty, in which case only the bot's username will be inserted. The client prompts\n   * the user to choose a specific chat, then opens that chat and inserts the bot's username and\n   * the specified inline query in the input field.\n   * @param text - text which should be inserted in the input after the current bot name. Max\n   * length is 256 symbols.\n   * @param chatTypes - List of chat types which could be chosen to send the message. Could be\n   * empty list.\n   */\n  switchInlineQuery(text: string, chatTypes: SwitchInlineQueryChatType[] = []): void {\n    if (!this.supports('switchInlineQuery') && !this.isBotInline) {\n      throw new Error('Method is unsupported because Mini App should be launched in inline mode.');\n    }\n    this.postEvent('web_app_switch_inline_query', { query: text, chat_types: chatTypes });\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { MiniApp } from './MiniApp.js';\n\n/**\n * @returns A new initialized instance of the `MiniApp` class.\n * @see MiniApp\n */\nexport const initMiniApp = createComponentInitFn(\n  'miniApp',\n  ({\n    themeParams,\n    botInline = false,\n    state = {\n      bgColor: themeParams.bgColor || '#ffffff',\n      headerColor: themeParams.headerBgColor || '#000000',\n    },\n    ...rest\n  }) => new MiniApp({ ...rest, ...state, botInline }),\n);\n","import type { PopupButton, PopupParams as BridgePopupParams } from '@/bridge/methods/types/popup.js';\n\nimport type { OpenPopupOptions } from './types.js';\n\n/**\n * Prepares popup parameters before sending them to native app.\n * @param params - popup parameters.\n */\nexport function preparePopupParams(params: OpenPopupOptions): BridgePopupParams {\n  const message = params.message.trim();\n  const title = (params.title || '').trim();\n  const buttons = params.buttons || [];\n  let preparedButtons: PopupButton[];\n\n  // Check title.\n  if (title.length > 64) {\n    throw new Error(`Title has incorrect size: ${title.length}`);\n  }\n\n  // Check message.\n  if (!message.length || message.length > 256) {\n    throw new Error(`Message has incorrect size: ${message.length}`);\n  }\n\n  // Check buttons.\n  if (buttons.length > 3) {\n    throw new Error(`Buttons have incorrect size: ${buttons.length}`);\n  }\n\n  // Append button in case, there are no buttons passed.\n  if (!buttons.length) {\n    preparedButtons = [{ type: 'close', id: '' }];\n  } else {\n    // Otherwise, check all the buttons.\n    preparedButtons = buttons.map((b) => {\n      const { id = '' } = b;\n\n      // Check button ID.\n      if (id.length > 64) {\n        throw new Error(`Button ID has incorrect size: ${id}`);\n      }\n\n      if (!b.type || b.type === 'default' || b.type === 'destructive') {\n        const text = b.text.trim();\n\n        if (!text.length || text.length > 64) {\n          const type = b.type || 'default';\n\n          throw new Error(`Button text with type \"${type}\" has incorrect size: ${b.text.length}`);\n        }\n\n        return { ...b, text, id };\n      }\n\n      return { ...b, id };\n    });\n  }\n  return { title, message, buttons: preparedButtons };\n}\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport { preparePopupParams } from '@/components/Popup/preparePopupParams.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { OpenPopupOptions, PopupState } from '@/components/Popup/types.js';\nimport type { Version } from '@/version/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/popup\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/popup\n */\nexport class Popup extends WithSupportsAndTrackableState<PopupState, 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, { open: 'web_app_open_popup' });\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * True if the Popup is opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * A method that shows a native popup described by the `params` argument.\n   * Promise will be resolved when popup is closed. Resolved value will have\n   * an identifier of pressed button.\n   *\n   * In case, user clicked outside the popup or clicked top right popup close\n   * button, null will be returned.\n   *\n   * @param options - popup parameters.\n   * @throws {Error} Popup is already opened.\n   */\n  async open(options: OpenPopupOptions): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('Popup is already opened.');\n    }\n\n    this.isOpened = true;\n\n    try {\n      const { button_id: buttonId = null } = await request({\n        event: 'popup_closed',\n        method: 'web_app_open_popup',\n        postEvent: this.postEvent,\n        params: preparePopupParams(options),\n      });\n      return buttonId;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Popup } from './Popup.js';\n\n/**\n * @returns A new initialized instance of the `Popup` class.\n * @see Popup\n */\nexport const initPopup = createComponentInitFn(\n  ({ postEvent, version }) => new Popup(false, version, postEvent),\n);\n","import { request } from '@/bridge/request.js';\nimport { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { Version } from '@/version/types.js';\n\nimport { QRScannerOpenOptions, QRScannerState } from './types.js';\n\n// TODO: Usage\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/qr-scanner\n */\nexport class QRScanner extends WithSupportsAndTrackableState<QRScannerState, 'close' | 'open'> {\n  constructor(isOpened: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isOpened }, version, {\n      close: 'web_app_close_scan_qr_popup',\n      open: 'web_app_open_scan_qr_popup',\n    });\n  }\n\n  /**\n   * Closes the scanner.\n   */\n  close(): void {\n    this.postEvent('web_app_close_scan_qr_popup');\n    this.isOpened = false;\n  }\n\n  private set isOpened(value) {\n    this.set('isOpened', value);\n  }\n\n  /**\n   * Returns true if the scanner is currently opened.\n   */\n  get isOpened(): boolean {\n    return this.get('isOpened');\n  }\n\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param options - method options.\n   */\n  async open(options?: QRScannerOpenOptions): Promise<string | null>;\n  /**\n   * Opens the scanner with the specified title shown to user.\n   * The method returns a promise with a scanned QR content and null if the scanner was closed.\n   * @param text - title to display.\n   */\n  async open(text?: string): Promise<string | null>;\n  async open(textOrOptions?: QRScannerOpenOptions | string): Promise<string | null> {\n    if (this.isOpened) {\n      throw new Error('The scanner is already opened');\n    }\n\n    const { text, capture }: QRScannerOpenOptions = (\n      typeof textOrOptions === 'string'\n        ? { text: textOrOptions }\n        : textOrOptions\n    ) || {};\n    this.isOpened = true;\n\n    try {\n      const result = await request({\n        method: 'web_app_open_scan_qr_popup',\n        event: ['qr_text_received', 'scan_qr_popup_closed'],\n        postEvent: this.postEvent,\n        params: { text },\n        capture(ev) {\n          return ev.event === 'scan_qr_popup_closed' || !capture || capture(ev.payload);\n        },\n      }) || {};\n\n      const qr = result.data || null;\n      if (qr) {\n        this.close();\n      }\n      return qr;\n    } finally {\n      this.isOpened = false;\n    }\n  }\n\n  // TODO: Streaming mode, allowing to scan several QRs until closed.\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { QRScanner } from './QRScanner.js';\n\n/**\n * @returns A new initialized instance of the `QRScanner` class.\n * @see QRScanner\n */\nexport const initQRScanner = createComponentInitFn(\n  ({ version, postEvent }) => new QRScanner(false, version, postEvent),\n);\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { WithSupportsAndStateUtils } from '@/classes/WithSupportsAndStateUtils.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type {\n  SettingsButtonEvents,\n  SettingsButtonState,\n} from '@/components/SettingsButton/types.js';\nimport type { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport type { Version } from '@/version/types.js';\n\ntype Emitter = EventEmitter<SettingsButtonEvents>;\n\nexport class SettingsButton extends WithSupportsAndStateUtils<SettingsButtonState, 'show' | 'hide'> {\n  constructor(isVisible: boolean, version: Version, private readonly postEvent: PostEvent) {\n    super({ isVisible }, version, {\n      show: 'web_app_setup_settings_button',\n      hide: 'web_app_setup_settings_button',\n    });\n  }\n\n  private set isVisible(visible: boolean) {\n    this.set('isVisible', visible);\n    this.postEvent('web_app_setup_settings_button', { is_visible: visible });\n  }\n\n  /**\n   * True if the SettingsButton is visible.\n   */\n  get isVisible(): boolean {\n    return this.get('isVisible');\n  }\n\n  /**\n   * Hides the SettingsButton.\n   */\n  hide(): void {\n    this.isVisible = false;\n  }\n\n  /**\n   * Adds a new event listener.\n   * @param event - event to listen.\n   * @param listener - listener to add.\n   */\n  on: Emitter['on'] = (event, listener) => (\n    event === 'click'\n      ? on('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.on(event, listener as any)\n  );\n\n  /**\n   * Removes the event listener.\n   * @param event - event to listen.\n   * @param listener - listener to remove.\n   */\n  off: Emitter['off'] = (event, listener) => (\n    event === 'click'\n      ? off('settings_button_pressed', listener)\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      : this.state.off(event, listener as any)\n  );\n\n  /**\n   * Shows the SettingsButton.\n   */\n  show(): void {\n    this.isVisible = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { SettingsButton } from './SettingsButton.js';\n\n/**\n * @returns A new initialized instance of the `SettingsButton` class.\n * @see SettingsButton\n */\nexport const initSettingsButton = createComponentInitFn(\n  'settingsButton',\n  ({\n    version,\n    postEvent,\n    state = { isVisible: false },\n  }) => new SettingsButton(state.isVisible, version, postEvent),\n);\n","import { WithSupportsAndTrackableState } from '@/classes/WithSupportsAndTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { SwipeBehaviorState } from '@/components/SwipeBehavior/types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/swipe-behavior\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/swipe-behavior\n */\nexport class SwipeBehavior extends WithSupportsAndTrackableState<SwipeBehaviorState,\n  | 'disableVerticalSwipe'\n  | 'enableVerticalSwipe'> {\n  constructor(isVerticalSwipeEnabled: boolean, version: string, private readonly postEvent: PostEvent) {\n    super({ isVerticalSwipeEnabled }, version, {\n      disableVerticalSwipe: 'web_app_setup_swipe_behavior',\n      enableVerticalSwipe: 'web_app_setup_swipe_behavior',\n    });\n  }\n\n  private set isVerticalSwipeEnabled(value: boolean) {\n    this.set('isVerticalSwipeEnabled', value);\n    this.postEvent('web_app_setup_swipe_behavior', { allow_vertical_swipe: value });\n  }\n\n  /**\n   * True, if the vertical swipe enabled.\n   */\n  get isVerticalSwipeEnabled(): boolean {\n    return this.get('isVerticalSwipeEnabled');\n  }\n\n  /**\n   * Disables the vertical swipe.\n   */\n  disableVerticalSwipe(): void {\n    this.isVerticalSwipeEnabled = false;\n  }\n\n  /**\n   * Enables the vertical swipe.\n   */\n  enableVerticalSwipe(): void {\n    this.isVerticalSwipeEnabled = true;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { SwipeBehavior } from './SwipeBehavior.js';\n\n/**\n * @returns A new initialized instance of the `SwipeBehavior` class.\n * @see SwipeBehavior\n */\nexport const initSwipeBehavior = createComponentInitFn(\n  'swipeBehavior',\n  ({\n    postEvent,\n    state = { isVerticalSwipeEnabled: true },\n    version\n  }) => new SwipeBehavior(state.isVerticalSwipeEnabled, version, postEvent),\n);\n","import { themeParams } from '@/components/ThemeParams/parsing/themeParams.js';\n\nimport type { ThemeParamsParsed } from '../types.js';\n\n/**\n * Parses incoming value as theme parameters.\n * @param value - value to parse.\n */\nexport function parseThemeParams(value: unknown): ThemeParamsParsed {\n  return themeParams().parse(value);\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport { isColorDark } from '@/colors/isColorDark.js';\nimport type { RGB } from '@/colors/types.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed, ThemeParamsState } from './types.js';\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/theming\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/theme-params\n */\nexport class ThemeParams extends WithTrackableState<ThemeParamsState> {\n  /**\n   * @since v6.10\n   */\n  get accentTextColor(): RGB | undefined {\n    return this.get('accentTextColor');\n  }\n\n  get bgColor(): RGB | undefined {\n    return this.get('bgColor');\n  }\n\n  get buttonColor(): RGB | undefined {\n    return this.get('buttonColor');\n  }\n\n  get buttonTextColor(): RGB | undefined {\n    return this.get('buttonTextColor');\n  }\n\n  get destructiveTextColor(): RGB | undefined {\n    return this.get('destructiveTextColor');\n  }\n\n  /**\n   * Returns the copy of the internal state of the current component instance.\n   */\n  getState(): ThemeParamsParsed {\n    return this.clone();\n  }\n\n  /**\n   * @since v6.10\n   */\n  get headerBgColor(): RGB | undefined {\n    return this.get('headerBgColor');\n  }\n\n  get hintColor(): RGB | undefined {\n    return this.get('hintColor');\n  }\n\n  /**\n   * @returns True in case, current color scheme is recognized as dark. This\n   * value is calculated according to theme bg color.\n   */\n  get isDark(): boolean {\n    return !this.bgColor || isColorDark(this.bgColor);\n  }\n\n  get linkColor(): RGB | undefined {\n    return this.get('linkColor');\n  }\n\n  get secondaryBgColor(): RGB | undefined {\n    return this.get('secondaryBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionBgColor(): RGB | undefined {\n    return this.get('sectionBgColor');\n  }\n\n  /**\n   * @since v6.10\n   */\n  get sectionHeaderTextColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * @since v7.6\n   */\n  get sectionSeparatorColor(): RGB | undefined {\n    return this.get('sectionHeaderTextColor');\n  }\n\n  /**\n   * Starts listening to the external theme changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('theme_changed', (event) => {\n      this.set(parseThemeParams(event.theme_params));\n    });\n  }\n\n  /**\n   * @since v6.10\n   */\n  get subtitleTextColor(): RGB | undefined {\n    return this.get('subtitleTextColor');\n  }\n\n  get textColor(): RGB | undefined {\n    return this.get('textColor');\n  }\n}\n","import { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `ThemeParams` class.\n * @see ThemeParams\n */\nexport const initThemeParams = createComponentInitFn(\n  'themeParams',\n  ({ themeParams, state = themeParams, addCleanup }) => {\n    const tp = new ThemeParams(state);\n    addCleanup(tp.listen());\n    return tp;\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { parseThemeParams } from './parsing/parseThemeParams.js';\nimport type { ThemeParamsParsed } from './types.js';\n\n/**\n * Requests current theme parameters from the Telegram application.\n * @param options - request options.\n */\nexport function requestThemeParams(options: ExecuteWithOptions = {}): Promise<ThemeParamsParsed> {\n  return request({\n    ...options,\n    method: 'web_app_request_theme',\n    event: 'theme_changed',\n  }).then(parseThemeParams);\n}\n","/**\n * Ensures, that specified value starts with the specified prefix. If it doesn't, function appends\n * prefix.\n * @param value - value to check.\n * @param prefix - prefix to add.\n */\nexport function ensurePrefix(value: string, prefix: string): string {\n  return value.startsWith(prefix) ? value : `${prefix}${value}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Safely creates new instance of URL with some predefined protocol and hostname.\n * @param urlOrPath - URL instance or path.\n */\nexport function createSafeURL(urlOrPath: string | Partial<URLLike>): URL {\n  return new URL(\n    typeof urlOrPath === 'string'\n      ? urlOrPath\n      : `${urlOrPath.pathname || ''}${ensurePrefix(urlOrPath.search || '', '?')}${ensurePrefix(urlOrPath.hash || '', '#')}`,\n    'http://a',\n  );\n}\n","import { captureSameReq } from '@/bridge/captureSameReq.js';\nimport { request } from '@/bridge/request.js';\nimport { WithSupports } from '@/classes/WithSupports.js';\nimport { createSupportsParamFn } from '@/supports/createSupportsParamFn.js';\nimport { supports } from '@/bridge/supports.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { CreateRequestIdFn } from '@/request-id/types.js';\nimport type { SupportsFn } from '@/supports/types.js';\nimport type { Version } from '@/version/types.js';\n\nexport interface UtilsOpenLinkOptions {\n  /**\n   * Attempts to use the instant view mode.\n   */\n  tryInstantView?: boolean;\n  /**\n   * Attempts to use user preferred browser.\n   */\n  tryBrowser?: boolean;\n}\n\n/**\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/utils\n */\nexport class Utils extends WithSupports<'readTextFromClipboard'> {\n  constructor(\n    private readonly version: Version,\n    private readonly createRequestId: CreateRequestIdFn,\n    private readonly postEvent: PostEvent,\n  ) {\n    super(version, { readTextFromClipboard: 'web_app_read_text_from_clipboard' });\n\n    this.supportsParam = createSupportsParamFn(version, {\n      'openLink.tryInstantView': ['web_app_open_link', 'try_instant_view'],\n    });\n  }\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param options - additional options.\n   */\n  openLink(url: string, options?: UtilsOpenLinkOptions): void;\n\n  /**\n   * Opens a link.\n   *\n   * The Mini App will not be closed.\n   *\n   * Note that this method can be called only in response to the user\n   * interaction with the Mini App interface (e.g. click inside the Mini App or on the main button).\n   * @param url - URL to be opened.\n   * @param tryInstantView - try to use the instant view.\n   * @deprecated Use the second argument as an object.\n   */\n  openLink(url: string, tryInstantView?: boolean): void\n\n  openLink(url: string, instantOrOptions?: boolean | UtilsOpenLinkOptions): void {\n    const formattedUrl = createSafeURL(url).toString();\n\n    // If the method is not supported, we are doing it in legacy way.\n    if (!supports('web_app_open_link', this.version)) {\n      window.open(formattedUrl, '_blank');\n      return;\n    }\n\n    const options: UtilsOpenLinkOptions = typeof instantOrOptions === 'boolean'\n      ? { tryInstantView: instantOrOptions }\n      : instantOrOptions || {};\n\n    // Otherwise, do it normally.\n    this.postEvent('web_app_open_link', {\n      url: formattedUrl,\n      try_browser: options.tryBrowser,\n      try_instant_view: options.tryInstantView,\n    });\n  }\n\n  /**\n   * Opens a Telegram link inside Telegram app. The Mini App will be closed. It expects passing\n   * link in full format, with hostname \"t.me\".\n   * @param url - URL to be opened.\n   * @throws {Error} URL has not allowed hostname.\n   */\n  openTelegramLink(url: string): void {\n    const { hostname, pathname, search } = new URL(url, 'https://t.me');\n    if (hostname !== 't.me') {\n      throw new Error(`URL has not allowed hostname: ${hostname}. Only \"t.me\" is allowed`);\n    }\n\n    if (!supports('web_app_open_tg_link', this.version)) {\n      window.location.href = url;\n      return;\n    }\n\n    this.postEvent('web_app_open_tg_link', { path_full: pathname + search });\n  }\n\n  /**\n   * Reads text from clipboard and returns string or null. null is returned\n   * in cases:\n   * - Value in clipboard is not text\n   * - Access to clipboard is not allowed\n   */\n  async readTextFromClipboard(): Promise<string | null> {\n    const reqId = this.createRequestId();\n    const {\n      data = null,\n    } = await request({\n      method: 'web_app_read_text_from_clipboard',\n      event: 'clipboard_text_received',\n      postEvent: this.postEvent,\n      params: { req_id: reqId },\n      capture: captureSameReq(reqId),\n    });\n\n    return data;\n  }\n\n  /**\n   * Shares specified URL with the passed to the chats, selected by user. After being called,\n   * it closes the mini application.\n   *\n   * This method uses Telegram's Share Links.\n   * @param url - URL to share.\n   * @param text - text to append after the URL.\n   * @see https://core.telegram.org/api/links#share-links\n   * @see https://core.telegram.org/widgets/share#custom-buttons\n   */\n  shareURL(url: string, text?: string): void {\n    this.openTelegramLink(\n      `https://t.me/share/url?` + new URLSearchParams({ url, text: text || '' })\n        .toString()\n        // By default, URL search params encode spaces with \"+\".\n        // We are replacing them with \"%20\", because plus symbols are working incorrectly\n        // in Telegram.\n        .replace(/\\+/g, '%20'),\n    );\n  }\n\n  /**\n   * Checks if specified method parameter is supported by current component.\n   */\n  supportsParam: SupportsFn<'openLink.tryInstantView'>;\n}\n","import { Utils } from '@/components/Utils/Utils.js';\nimport { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\n/**\n * @returns A new initialized instance of the `Utils` class.\n * @see Utils\n */\nexport const initUtils = createComponentInitFn(\n  ({ version, postEvent, createRequestId }) => {\n    return new Utils(version, createRequestId, postEvent);\n  },\n);\n","import { request } from '@/bridge/request.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nexport interface RequestViewportResult {\n  height: number;\n  isStateStable: boolean;\n  isExpanded: boolean;\n  width: number;\n}\n\n/**\n * Requests viewport actual information from the Telegram application.\n * @param options - request options.\n */\nexport async function requestViewport(\n  options: ExecuteWithOptions = {},\n): Promise<RequestViewportResult> {\n  const {\n    is_expanded: isExpanded,\n    is_state_stable: isStateStable,\n    ...rest\n  } = await request({\n    ...options,\n    method: 'web_app_request_viewport',\n    event: 'viewport_changed',\n  });\n\n  return { ...rest, isExpanded, isStateStable };\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { WithTrackableState } from '@/classes/WithTrackableState.js';\nimport type { PostEvent } from '@/bridge/methods/postEvent.js';\nimport type { RemoveEventListenerFn } from '@/events/types.js';\nimport type { ExecuteWithOptions } from '@/types/index.js';\n\nimport { requestViewport } from './requestViewport.js';\nimport type { ViewportProps, ViewportState } from './types.js';\n\n/**\n * Formats value to make it stay in bounds [0, +Inf).\n * @param value - value to format.\n */\nfunction truncate(value: number): number {\n  return value < 0 ? 0 : value;\n}\n\n/**\n * @see Usage: https://docs.telegram-mini-apps.com/platform/viewport\n * @see API: https://docs.telegram-mini-apps.com/packages/telegram-apps-sdk/components/viewport\n */\nexport class Viewport extends WithTrackableState<ViewportState> {\n  private readonly postEvent: PostEvent;\n\n  constructor({ postEvent, stableHeight, height, width, isExpanded }: ViewportProps) {\n    super({\n      height: truncate(height),\n      isExpanded,\n      stableHeight: truncate(stableHeight),\n      width: truncate(width),\n    });\n    this.postEvent = postEvent;\n  }\n\n  /**\n   * Requests viewport information from the Telegram application and updates current Viewport\n   * instance.\n   * @param options - options to request fresh data.\n   */\n  async sync(options?: ExecuteWithOptions): Promise<void> {\n    const { isStateStable, ...rest } = await requestViewport(options);\n    this.set({\n      ...rest,\n      stableHeight: isStateStable ? rest.height : this.get('stableHeight'),\n    });\n  }\n\n  /**\n   * The current height of the **visible area** of the Mini App.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the bot can do the same by calling `expand` method. As the position of\n   * the Mini App changes, the current height value of the visible area will be updated  in real\n   * time.\n   *\n   * Please note that the refresh rate of this value is not sufficient to smoothly follow the\n   * lower border of the window. It should not be used to pin interface elements to the bottom\n   * of the visible area. It's more appropriate to use the value of the `stableHeight`\n   * field for this purpose.\n   *\n   * @see stableHeight\n   */\n  get height(): number {\n    return this.get('height');\n  }\n\n  /**\n   * The height of the visible area of the Mini App in its last stable state.\n   *\n   * The application can display just the top part of the Mini App, with its lower part remaining\n   * outside the screen area. From this position, the user can \"pull\" the Mini App to its\n   * maximum height, while the application can do the same by calling `expand` method.\n   *\n   * Unlike the value of `height`, the value of `stableHeight` does not change as the position\n   * of the Mini App changes with user gestures or during animations. The value of `stableHeight`\n   * will be updated after all gestures and animations are completed and\n   * the Mini App reaches its final size.\n   *\n   * @see height\n   */\n  get stableHeight(): number {\n    return this.get('stableHeight');\n  }\n\n  /**\n   * Starts listening to viewport changes and applies them.\n   * @returns Function to stop listening.\n   */\n  listen(): RemoveEventListenerFn {\n    return on('viewport_changed', (event) => {\n      const {\n        height,\n        width,\n        is_expanded: isExpanded,\n        is_state_stable: isStateStable,\n      } = event;\n      const truncatedHeight = truncate(height);\n\n      this.set({\n        height: truncatedHeight,\n        isExpanded,\n        width: truncate(width),\n        ...(isStateStable ? { stableHeight: truncatedHeight } : {}),\n      });\n    });\n  }\n\n  /**\n   * True if the Mini App is expanded to the maximum available height. Otherwise, if\n   * the Mini App occupies part of the screen and can be expanded to the full height using\n   * `expand` method.\n   * @see expand\n   */\n  get isExpanded(): boolean {\n    return this.get('isExpanded');\n  }\n\n  /**\n   * Current visible area width.\n   */\n  get width(): number {\n    return this.get('width');\n  }\n\n  /**\n   * A method that expands the Mini App to the maximum available height. To find out if the Mini\n   * App is expanded to the maximum height, refer to the value of the `isExpanded`.\n   * @see isExpanded\n   */\n  expand(): void {\n    this.postEvent('web_app_expand');\n    this.set('isExpanded', true);\n  }\n\n  /**\n   * True if the current viewport height is stable and is not going to change in the next moment.\n   */\n  get isStable(): boolean {\n    return this.stableHeight === this.height;\n  }\n}\n","import { createComponentInitFn } from '@/misc/createComponentInitFn/createComponentInitFn.js';\n\nimport { Viewport } from './Viewport.js';\nimport { requestViewport } from '@/components/Viewport/requestViewport.js';\n\n/**\n * @returns A promise with a new initialized instance of the `Viewport` class.\n * @see Viewport\n */\nexport const initViewport = createComponentInitFn(\n  'viewport',\n  async ({ state, platform, postEvent, addCleanup }) => {\n    let isExpanded = false;\n    let height = 0;\n    let width = 0;\n    let stableHeight = 0;\n\n    // State was saved previously, we restore the Viewport from this state.\n    if (state) {\n      isExpanded = state.isExpanded;\n      height = state.height;\n      width = state.width;\n      stableHeight = state.stableHeight;\n    } else if (['macos', 'tdesktop', 'unigram', 'webk', 'weba', 'web'].includes(platform)) {\n      // If platform has a stable viewport, it means we could instantiate Viewport using\n      // the window global object properties.\n      isExpanded = true;\n      height = window.innerHeight;\n      width = window.innerWidth;\n      stableHeight = window.innerHeight;\n    } else {\n      // We were unable to retrieve data locally. In this case we are sending a request returning\n      // a viewport information.\n      const response = await requestViewport({ timeout: 1000, postEvent });\n      isExpanded = response.isExpanded;\n      height = response.height;\n      width = response.width;\n      stableHeight = response.isStateStable ? height : 0;\n    }\n\n    // Otherwise, Viewport instance will be created using zero values.\n    const viewport = new Viewport({\n      postEvent,\n      height,\n      width,\n      stableHeight,\n      isExpanded,\n    });\n\n    // Listen to the viewport external changes and actualize local instance.\n    addCleanup(viewport.listen());\n\n    return viewport;\n  },\n);\n","/**\n * Sets CSS variable globally.\n * @param name - variable name.\n * @param value - variable value.\n */\nexport function setCSSVar(name: string, value: string): void {\n  document.documentElement.style.setProperty(name, value);\n}\n","import { isRGB } from '@/colors/isRGB.js';\nimport { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { MiniApp } from '@/components/MiniApp/MiniApp.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetMiniAppCSSVarNameFn {\n  /**\n   * @param property - MiniApp property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'bg' | 'header'): string;\n}\n\n/**\n * Creates CSS variables connected with the MiniApps class instance background and header colors\n * based on the passed MiniApp and ThemeParams instances.\n *\n * Created variables by default:\n * - `--tg-bg-color`\n * - `--tg-header-color`\n *\n * Variables are being automatically updated in case, corresponding MiniApp and ThemeParams\n * properties were updated.\n *\n * @param miniApp - MiniApp instance.\n * @param themeParams - ThemeParams instance.\n * @param getVarName - function, returning complete CSS variable name for the specified\n * MiniApp property.\n * @returns Function to stop updating variables.\n */\nexport function bindMiniAppCSSVars(\n  miniApp: MiniApp,\n  themeParams: ThemeParams,\n  getVarName?: GetMiniAppCSSVarNameFn,\n): CleanupFn {\n  getVarName ||= (property) => `--tg-${property}-color`;\n\n  const headerVar = getVarName('header');\n  const bgVar = getVarName('bg');\n\n  const actualize = () => {\n    const { headerColor } = miniApp;\n\n    if (isRGB(headerColor)) {\n      setCSSVar(headerVar, headerColor);\n    } else {\n      const { bgColor, secondaryBgColor } = themeParams;\n\n      if (headerColor === 'bg_color' && bgColor) {\n        setCSSVar(headerVar, bgColor);\n      } else if (headerColor === 'secondary_bg_color' && secondaryBgColor) {\n        setCSSVar(headerVar, secondaryBgColor);\n      }\n    }\n\n    setCSSVar(bgVar, miniApp.bgColor)\n  };\n\n  const listeners = [\n    themeParams.on('change', actualize),\n    miniApp.on('change', actualize),\n  ];\n\n  actualize();\n\n  return () => listeners.forEach(off => off());\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { ThemeParams } from '@/components/ThemeParams/ThemeParams.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetThemeParamsCSSVarNameFn {\n  /**\n   * @param property - ThemeParams property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: string): string;\n}\n\n/**\n * Creates CSS variables connected with the passed instance of the ThemeParams class.\n *\n * By default, created CSS variables names are following the pattern \"--tg-theme-{name}\", where\n * {name} is a theme parameters key name converted from camel case to kebab case.\n *\n * Example:\n * --tg-theme-bg-color\n * --tg-theme-secondary-text-color\n *\n * Variables are being automatically updated in case, corresponding properties updated in\n * the passed ThemeParams instance.\n *\n * @param themeParams - ThemeParams instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * ThemeParams property.\n * @returns Function to stop updating variables.\n */\nexport function bindThemeParamsCSSVars(\n  themeParams: ThemeParams,\n  getCSSVarName?: GetThemeParamsCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => {\n    return `--tg-theme-${property.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`)}`;\n  };\n\n  const actualize = () => {\n    Object.entries(themeParams.getState()).forEach(([k, v]) => {\n      if (v) {\n        setCSSVar(getCSSVarName(k), v);\n      }\n    });\n  };\n\n  actualize();\n\n  return themeParams.on('change', actualize);\n}\n","import { setCSSVar } from '@/css-vars/setCSSVar.js';\nimport type { Viewport } from '@/components/Viewport/Viewport.js';\nimport type { CleanupFn } from '@/types/index.js';\n\nexport interface GetViewportCSSVarNameFn {\n  /**\n   * @param property - Viewport property.\n   * @returns Computed complete CSS variable name.\n   */\n  (property: 'width' | 'height' | 'stable-height'): string;\n}\n\n/**\n * Accepts Viewport instance and sets CSS variables connected with viewport\n * sizes.\n *\n * Be careful using this function as long as it can impact application\n * performance. Viewport size is changing rather often, this makes CSS\n * variables update, which leads to possible layout redraw.\n *\n * Variables:\n * - `--tg-viewport-height`\n * - `--tg-viewport-width`\n * - `--tg-viewport-stable-height`\n *\n * Variables are being automatically updated in case, corresponding properties\n * updated in passed Viewport instance.\n *\n * @param viewport - Viewport instance.\n * @param getCSSVarName - function, returning complete CSS variable name for the specified\n * Viewport property.\n * @returns Function to stop updating variables.\n */\nexport function bindViewportCSSVars(\n  viewport: Viewport,\n  getCSSVarName?: GetViewportCSSVarNameFn,\n): CleanupFn {\n  getCSSVarName ||= (property) => `--tg-viewport-${property}`;\n  const [\n    heightVar,\n    widthVar,\n    stableHeightVar,\n  ] = (['height', 'width', 'stable-height'] as const).map((prop) => getCSSVarName(prop));\n  const setHeight = () => setCSSVar(heightVar, `${viewport.height}px`);\n  const setWidth = () => setCSSVar(widthVar, `${viewport.width}px`);\n  const setStableHeight = () => setCSSVar(stableHeightVar, `${viewport.stableHeight}px`);\n\n  // TODO: Should probably add debounce or throttle.\n  const listeners = [\n    viewport.on('change:height', setHeight),\n    viewport.on('change:width', setWidth),\n    viewport.on('change:stableHeight', setStableHeight),\n  ];\n\n  setHeight();\n  setWidth();\n  setStableHeight();\n\n  return () => listeners.forEach(off => off());\n}\n","import { on } from '@/bridge/events/listening/on.js';\nimport { postEvent } from '@/bridge/methods/postEvent.js';\n\ninterface CleanupFn {\n  (): void;\n}\n\n/**\n * Performs initialization process in the web version of Telegram.\n * @returns Function, which performs cleanup removing all created elements and listeners.\n * @param acceptCustomStyles - true if SDK should accept styles sent from the Telegram web\n * application. This option is only used in web versions of Telegram. Default: false.\n */\nexport function initWeb(acceptCustomStyles = true): CleanupFn {\n  const listeners: CleanupFn[] = [\n    on('reload_iframe', () => {\n      postEvent('iframe_will_reload');\n      window.location.reload();\n    }),\n  ];\n  const cleanup: CleanupFn = () => listeners.forEach((l) => l());\n\n  if (acceptCustomStyles) {\n    const style = document.createElement('style');\n    style.id = 'telegram-custom-styles';\n    document.head.appendChild(style);\n\n    listeners.push(\n      on('set_custom_style', (html) => {\n        // It is safe to use innerHTML here as long as style tag has a special behavior related\n        // to the specified content. In case, any script will be passed here, it will not be\n        // executed.\n        style.innerHTML = html;\n      }),\n      () => document.head.removeChild(style),\n    );\n  }\n\n  // Notify Telegram, iframe is ready. This will result in sending style tag html from native\n  // application which is used in catchCustomStyles function. We should call this method also\n  // to start receiving \"reload_iframe\" events from the Telegram application.\n  postEvent('iframe_ready', { reload_supported: true });\n\n  return cleanup;\n}\n","/**\n * @returns True, if current environment is server.\n */\nexport function isSSR(): boolean {\n  return typeof window === 'undefined';\n}\n","import { request } from '@/bridge/request.js';\nimport { hasWebviewProxy } from '@/env/hasWebviewProxy.js';\n\n/**\n * Returns true in case, current environment is Telegram Mini Apps.\n */\nexport async function isTMA(): Promise<boolean> {\n  if (hasWebviewProxy(window)) {\n    return true;\n  }\n  try {\n    await request({ method: 'web_app_request_theme', event: 'theme_changed', timeout: 100 });\n    return true;\n  } catch {\n    return false;\n  }\n}\n","import { saveToStorage } from '@/launch-params/saveToStorage.js';\nimport { parseMessage } from '@/bridge/parseMessage.js';\nimport { isIframe } from '@/env/isIframe.js';\nimport { hasExternalNotify } from '@/env/hasExternalNotify.js';\nimport { emitMiniAppsEvent } from '@/bridge/events/event-handlers/emitMiniAppsEvent.js';\nimport { serializeThemeParams } from '@/components/ThemeParams/parsing/serializeThemeParams.js';\nimport { parseLaunchParams } from '@/launch-params/parseLaunchParams.js';\nimport type { LaunchParams } from '@/launch-params/types.js';\nimport type { MiniAppsEventPayload } from '@/bridge/events/types.js';\n\n/**\n * Mocks a Telegram application environment.\n * @param launchParamsRaw - launch parameters presented as a string or query parameters.\n */\nexport function mockTelegramEnv(launchParamsRaw: LaunchParams | string): void {\n  const lp = typeof launchParamsRaw === 'string'\n    ? parseLaunchParams(launchParamsRaw)\n    : launchParamsRaw;\n\n  // Save launch params in the storage, so retrieveLaunchParams will return them.\n  saveToStorage(lp);\n\n  function wiredPostMessage(data: unknown): void {\n    if (typeof data !== 'string') {\n      return;\n    }\n    try {\n      const { eventType } = parseMessage(data);\n\n      if (eventType === 'web_app_request_theme') {\n        emitMiniAppsEvent('theme_changed', {\n          theme_params: JSON.parse(serializeThemeParams(lp.themeParams)),\n        } satisfies MiniAppsEventPayload<'theme_changed'>);\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        emitMiniAppsEvent('viewport_changed', {\n          width: window.innerWidth,\n          height: window.innerHeight,\n          is_state_stable: true,\n          is_expanded: true,\n        } satisfies MiniAppsEventPayload<'viewport_changed'>);\n      }\n    } catch {\n    }\n  }\n\n  // Override all possible ways of calling a Mini Apps method.\n  if (isIframe()) {\n    const postMessage = window.parent.postMessage.bind(window.parent);\n    window.parent.postMessage = data => {\n      void wiredPostMessage(data);\n      postMessage(data);\n    };\n    return;\n  }\n\n  if (hasExternalNotify(window)) {\n    const notify = window.external.notify.bind(window.external);\n    window.external.notify = data => {\n      void wiredPostMessage(data);\n      notify(data);\n    };\n    return;\n  }\n\n  const proxy = (window as any).TelegramWebviewProxy;\n  (window as any).TelegramWebviewProxy = {\n    ...(proxy || {}),\n    postEvent(...args: any) {\n      void wiredPostMessage(JSON.stringify({ eventType: args[0], eventData: args[1] }));\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      proxy && proxy.postEvent(...args);\n    },\n  };\n}\n","import { SDKError } from './SDKError.js';\n\n/**\n * @returns True, if passed value is an instance of SDKError.\n * @param value - value to check.\n */\nexport function isSDKError(value: unknown): value is SDKError {\n  return value instanceof SDKError;\n}\n","import { isSDKError } from './isSDKError.js';\nimport type { ErrorType } from './errors.js';\n\n/**\n * Returns true if passed value is an SDK error of specified type.\n * @param value - value to check.\n * @param type - error type.\n */\nexport function isSDKErrorOfType(value: unknown, type: ErrorType): boolean {\n  return isSDKError(value) && value.type === type;\n}\n","import type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\n/**\n * Converts any known history item type to the local one.\n * @param item - history item presented as a string or an object.\n * @param relativePathname - relative pathname.\n */\nexport function prepareItem<Params>(\n  item: BasicNavigatorAnyHistoryItem<Params>,\n  relativePathname: string,\n): Readonly<BasicNavigatorHistoryItem<Params>> {\n  let pathname: string;\n  let params: Params | undefined;\n  let id: string | undefined;\n\n  if (typeof item === 'string') {\n    pathname = item;\n  } else {\n    pathname = item.pathname === undefined\n      ? relativePathname\n      : item.pathname;\n    params = item.params;\n    id = item.id;\n  }\n\n  return Object.freeze({\n    id: id || ((Math.random() * 2 ** 14) | 0).toString(16),\n    pathname,\n    params,\n  });\n}\n","import { off } from '@/bridge/events/listening/off.js';\nimport { on } from '@/bridge/events/listening/on.js';\nimport { type PostEvent, postEvent as defaultPostEvent } from '@/bridge/methods/postEvent.js';\nimport { createError } from '@/errors/createError.js';\nimport {\n  ERR_NAVIGATION_HISTORY_EMPTY,\n  ERR_NAVIGATION_INDEX_INVALID,\n} from '@/errors/errors.js';\nimport { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { prepareItem } from '@/navigation/BasicNavigator/prepareItem.js';\nimport type {\n  BasicNavigatorAnyHistoryItem,\n  BasicNavigatorEvents,\n  BasicNavigatorHistoryItem,\n} from '@/navigation/BasicNavigator/types.js';\n\ntype Emitter<Params> = EventEmitter<BasicNavigatorEvents<Params>>;\n\nexport class BasicNavigator<Params = {}> {\n  /**\n   * Navigation history.\n   */\n  readonly history: Readonly<BasicNavigatorHistoryItem<Params>>[];\n\n  private readonly ee: Emitter<Params> = new EventEmitter();\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BasicNavigatorAnyHistoryItem<Params>[],\n    /**\n     * Currently active history item.\n     */\n    private _index: number,\n    /**\n     * Function to call Mini Apps methods.\n     * @default Global `postEvent` function.\n     */\n    private readonly postEvent: PostEvent = defaultPostEvent,\n  ) {\n    if (history.length === 0) {\n      throw createError(ERR_NAVIGATION_HISTORY_EMPTY, 'History should not be empty.');\n    }\n\n    if (_index < 0 || _index >= history.length) {\n      throw createError(\n        ERR_NAVIGATION_INDEX_INVALID,\n        'Index should not be zero and higher or equal than history size.',\n      );\n    }\n    this.history = history.map((item) => prepareItem(item, ''));\n  }\n\n  /**\n   * True, if current navigator is currently attached.\n   */\n  private attached = false;\n\n  /**\n   * Allows this navigator to control the `BackButton` visibility state. It also tracks the\n   * `BackButton` clicks and calls the `back` method.\n   */\n  attach(): void {\n    if (!this.attached) {\n      this.attached = true;\n      this.sync();\n      on('back_button_pressed', this.back);\n    }\n  }\n\n  /**\n   * Goes to the previous history item.\n   */\n  back = (): void => this.go(-1);\n\n  /**\n   * Currently active history item.\n   */\n  get current(): Readonly<BasicNavigatorHistoryItem<Params>> {\n    return this.history[this.index];\n  }\n\n  /**\n   * Prevents current navigator from controlling the BackButton visibility state.\n   */\n  detach(): void {\n    this.attached = false;\n    off('back_button_pressed', this.back);\n  }\n\n  /**\n   * Goes to the next history item.\n   */\n  forward(): void {\n    this.go(1);\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    // Compute the next index.\n    const index = this.index + delta;\n\n    // Cut the index to be in bounds [0, history.length - 1].\n    const fitIndex = Math.min(\n      Math.max(0, index),\n      this.history.length - 1,\n    );\n\n    // We perform \"go\" only in case, computed and cut indexes are equal or \"fit\" option was\n    // specified.\n    if (index === fitIndex || fit) {\n      // We are just calling setter to update the index and emit all related events.\n      this.replaceAndMove(fitIndex, this.history[fitIndex]);\n    }\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.go(index - this.index, fit);\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.index > 0;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.index !== this.history.length - 1;\n  }\n\n  /**\n   * Currently active history item index.\n   */\n  get index(): number {\n    return this._index;\n  }\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<Params>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<Params>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Adds a new history item removing all after the current one.\n   * @param item - item to add.\n   */\n  push(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    if (this.hasNext) {\n      this.history.splice(this.index + 1);\n    }\n    this.replaceAndMove(this.index + 1, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Replaces the current history item.\n   * @param item - item to replace the current item with.\n   */\n  replace(item: BasicNavigatorAnyHistoryItem<Params>): void {\n    this.replaceAndMove(this.index, prepareItem(item, this.current.pathname));\n  }\n\n  /**\n   * Sets history item by the specified index.\n   * @param index - history item index to replace.\n   * @param historyItem - history item to set.\n   */\n  private replaceAndMove(index: number, historyItem: BasicNavigatorHistoryItem<Params>): void {\n    const delta = index - this.index;\n    if (!delta && this.current === historyItem) {\n      // Nothing changed.\n      return;\n    }\n\n    const from = this.current;\n\n    if (this.index !== index) {\n      const prevIndex = this._index;\n      this._index = index;\n\n      // If navigator is attached and back button local visibility state changed, we should\n      // notify Telegram app about it.\n      if (this.attached && prevIndex > 0 !== index > 0) {\n        this.sync();\n      }\n    }\n\n    this.history[index] = historyItem;\n    this.ee.emit('change', {\n      navigator: this,\n      from,\n      to: this.current,\n      delta,\n    });\n  }\n\n  /**\n   * Actualizes the `BackButton` visibility state.\n   */\n  private sync(): void {\n    this.postEvent('web_app_setup_back_button', { is_visible: !!this.index });\n  }\n}\n","import type { BasicNavigatorHistoryItem } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n} from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Converts basic navigator entry to browser navigator entry.\n */\nexport function basicItemToBrowser<State>(\n  {\n    params,\n    ...rest\n  }: BasicNavigatorHistoryItem<BrowserNavigatorHistoryItemParams<State>>,\n): BrowserNavigatorHistoryItem<State> {\n  return { ...(params || { hash: '', search: '' }), ...rest };\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts path part from a URL.\n * @param urlOrPath - URL instance or path.\n */\nexport function urlToPath(urlOrPath: string | Partial<URLLike>): string {\n  const isAbsolute = typeof urlOrPath === 'string'\n    ? urlOrPath.startsWith('/')\n    : !!(urlOrPath.pathname && urlOrPath.pathname.startsWith('/'));\n  const url = createSafeURL(urlOrPath);\n\n  return `${isAbsolute ? url.pathname : url.pathname.slice(1)}${url.search}${url.hash}`;\n}\n","import { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorAnyHistoryItem } from '@/navigation/BrowserNavigator/types.js';\n\ninterface PrepareItemResult<State> {\n  id?: string;\n  pathname: string;\n  params: {\n    hash: string;\n    search: string;\n    state?: State;\n  };\n}\n\n/**\n * Converts a path, presented as a string to a basic navigator appropriate form.\n * @param path - full path.\n * @param relativePath - relative path.\n * @param state - history item state.\n */\nexport function prepareItem<State>(\n  path: string,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State>;\n\n/**\n * Converts a path, presented as an object to a basic navigator appropriate form.\n * @param item - history item data.\n * @param relativePath - relative path.\n */\nexport function prepareItem<State>(\n  item: BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n): PrepareItemResult<State>;\n\nexport function prepareItem<State>(\n  itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>,\n  relativePath: string,\n  state?: State,\n): PrepareItemResult<State> {\n  let path: string;\n  let id: string | undefined;\n\n  if (typeof itemOrPath === 'string') {\n    path = itemOrPath;\n  } else {\n    path = urlToPath(itemOrPath);\n    state = itemOrPath.state;\n    id = itemOrPath.id;\n  }\n\n  const { pathname, search, hash } = new URL(path, `http://a${ensurePrefix(relativePath, '/')}`);\n  return { id, pathname, params: { hash, search, state } };\n}\n","import { onWindow } from '@/events/onWindow.js';\n\n/**\n * Performs window.history.go operation waiting for it to be completed.\n * @param delta - history change delta.\n */\nexport async function go(delta: number): Promise<boolean> {\n  if (delta === 0) {\n    return true;\n  }\n\n  // We expect popstate event to occur during some time. Yeah, this seems tricky and not stable,\n  // but it seems like we have no other way out. Waiting for Navigation API to be implemented in\n  // browsers.\n  return Promise.race<boolean>([\n    new Promise((res) => {\n      const remove = onWindow('popstate', () => {\n        remove();\n        res(true);\n      });\n\n      window.history.go(delta);\n    }),\n\n    // Usually, it takes about 1ms to emit this event, but we use some buffer.\n    new Promise((res) => {\n      setTimeout(res, 50, false);\n    }),\n  ]);\n}\n","import { go } from '@/navigation/go.js';\n\n/**\n * Drops current browser history switching browser history cursor to the first one entry.\n */\nexport async function drop(): Promise<void> {\n  if (window.history.length <= 1) {\n    return;\n  }\n\n  // Push empty state to cut states we have no access to, placed after the current one.\n  window.history.pushState(null, '');\n\n  // By this line of code we cover the most recent case, when application is opened in WebView,\n  // but not in iframe. Applications opened in WebView have simple browser history containing\n  // only entries belonging to the current web application.\n  const goPerformed = await go(1 - window.history.length);\n  if (goPerformed) {\n    return;\n  }\n\n  // Nevertheless, iframe works a bit different in context of browser history. Calling\n  // window.history.length in iframe will return browser history information related to the\n  // external web environment too (e.g. browser tab). So, iframe shares the browser history with\n  // the external application, but has no access to its history entries. Calling window.history.go\n  // pointing out to the entry belonging to the external application will have no impact, so the\n  // previous idea with go(1 - ...) will not work.\n  //\n  // This is the reason why we iteratively call go(-1) to meet the entry which is recognized as\n  // the initial one for the current iframe.\n  let shouldGoBack = await go(-1);\n  while (shouldGoBack) {\n    shouldGoBack = await go(-1);\n  }\n}\n","import { createSafeURL } from '@/navigation/createSafeURL.js';\nimport type { URLLike } from '@/navigation/BrowserNavigator/types.js';\n\n/**\n * Extracts pathname from the value.\n * @param value - source value.\n */\nexport function getPathname(value: string | Partial<URLLike>): string {\n  return createSafeURL(value).pathname;\n}\n","import { EventEmitter } from '@/events/event-emitter/EventEmitter.js';\nimport { BasicNavigator } from '@/navigation/BasicNavigator/BasicNavigator.js';\nimport { basicItemToBrowser } from '@/navigation/BrowserNavigator/basicItemToBrowser.js';\nimport { prepareItem } from '@/navigation/BrowserNavigator/prepareItem.js';\nimport { createSafeURL } from '@/navigation/createSafeURL.js';\nimport { drop } from '@/navigation/drop.js';\nimport { ensurePrefix } from '@/navigation/ensurePrefix.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { go } from '@/navigation/go.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BasicNavigatorEvents } from '@/navigation/BasicNavigator/types.js';\nimport type {\n  BrowserNavigatorAnyHistoryItem,\n  BrowserNavigatorConOptions,\n  BrowserNavigatorEvents,\n  BrowserNavigatorHashMode,\n  BrowserNavigatorHistoryItem,\n  BrowserNavigatorHistoryItemParams,\n  URLLike,\n} from '@/navigation/BrowserNavigator/types.js';\n\nconst CURSOR_VOID = 0;\nconst CURSOR_BACK = 1;\nconst CURSOR_FORWARD = 2;\n\ntype Navigator<State> = BasicNavigator<BrowserNavigatorHistoryItemParams<State>>;\ntype Emitter<State> = EventEmitter<BrowserNavigatorEvents<State>>;\n\nexport class BrowserNavigator<State = {}> {\n  private readonly navigator: Navigator<State>;\n\n  private readonly ee: Emitter<State> = new EventEmitter();\n\n  readonly hashMode: BrowserNavigatorHashMode | null;\n\n  readonly base: string;\n\n  constructor(\n    /**\n     * Navigation history.\n     */\n    history: readonly BrowserNavigatorAnyHistoryItem<State>[],\n    /**\n     * Currently active history item index.\n     */\n    index: number,\n    { postEvent, hashMode = 'classic', base }: BrowserNavigatorConOptions = {},\n  ) {\n    this.navigator = new BasicNavigator(\n      history.map((item) => prepareItem(item, '/')),\n      index,\n      postEvent,\n    );\n    this.navigator.on('change', (e) => {\n      void this.onNavigatorChange(e);\n    });\n    this.hashMode = hashMode;\n    this.base = getPathname(base || '');\n  }\n\n  /**\n   * Shows whether the navigator is currently attached to the browser history.\n   */\n  private attached = false;\n\n  /**\n   * Attaches current navigator to the browser history allowing navigator to manipulate it.\n   */\n  async attach(): Promise<void> {\n    if (!this.attached) {\n      this.attached = true;\n      this.navigator.attach();\n      window.addEventListener('popstate', this.onPopState);\n      await this.syncHistory();\n    }\n  }\n\n  /**\n   * Goes back in history by 1.\n   */\n  back(): void {\n    this.navigator.back();\n  }\n\n  /**\n   * Detaches current navigator from the browser history.\n   */\n  detach() {\n    this.attached = false;\n    this.navigator.detach();\n    window.removeEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Goes forward in history.\n   */\n  forward(): void {\n    return this.navigator.forward();\n  }\n\n  /**\n   * Current history cursor.\n   */\n  get index(): number {\n    return this.navigator.index;\n  }\n\n  /**\n   * Current history item identifier.\n   */\n  get id(): string {\n    return this.navigator.current.id;\n  }\n\n  /**\n   * Changes currently active history item index by the specified delta. This method doesn't\n   * change index in case, the updated index points to the non-existing history item. This behavior\n   * is preserved until the `fit` argument is specified.\n   * @param delta - index delta.\n   * @param fit - cuts the delta argument to fit the bounds `[0, history.length - 1]`.\n   */\n  go(delta: number, fit?: boolean): void {\n    return this.navigator.go(delta, fit);\n  }\n\n  /**\n   * Goes to the specified index. Method does nothing in case, passed index is out of bounds.\n   *\n   * If \"fit\" option was specified and index is out of bounds, it will be cut to the nearest\n   * bound.\n   * @param index - target index.\n   * @param fit - cuts the index argument to fit the bounds `[0, history.length - 1]`.\n   */\n  goTo(index: number, fit?: boolean): void {\n    this.navigator.goTo(index, fit);\n  }\n\n  /**\n   * Current history item hash.\n   * @see URL.hash\n   * @example\n   * \"\", \"#my-hash\"\n   */\n  get hash(): string {\n    return (this.navigator.current.params || {}).hash || '';\n  }\n\n  /**\n   * True if navigator has items before the current item.\n   */\n  get hasPrev(): boolean {\n    return this.navigator.hasPrev;\n  }\n\n  /**\n   * True if navigator has items after the current item.\n   */\n  get hasNext(): boolean {\n    return this.navigator.hasNext;\n  }\n\n  /**\n   * Navigation history.\n   */\n  get history(): BrowserNavigatorHistoryItem<State>[] {\n    return this.navigator.history.map(basicItemToBrowser);\n  }\n\n  /**\n   * Handles the window \"popstate\" event.\n   * @param state - event state.\n   */\n  private onPopState = ({ state }: PopStateEvent) => {\n    // In case state is null, we recognize current event as occurring whenever user clicks\n    // any anchor.\n    // TODO: Should we do it?\n    if (state === null) {\n      return this.push(this.parsePath(window.location.href));\n    }\n\n    // There is only one case when state can be CURSOR_VOID - when history contains\n    // only one element. In this case, we should return user to the current history element.\n    if (state === CURSOR_VOID) {\n      window.history.forward();\n    } else if (state === CURSOR_BACK) {\n      this.back();\n    }\n    if (state === CURSOR_FORWARD) {\n      this.forward();\n    }\n  };\n\n  /**\n   * Underlying navigator change event listener.\n   */\n  private onNavigatorChange = async ({\n    to,\n    from,\n    delta,\n  }: BasicNavigatorEvents<BrowserNavigatorHistoryItemParams<State>>['change']) => {\n    // If this navigator is attached to the browser history, we should synchronize.\n    if (this.attached) {\n      await this.syncHistory();\n    }\n    this.ee.emit('change', {\n      delta,\n      from: basicItemToBrowser(from),\n      to: basicItemToBrowser(to),\n      navigator: this,\n    });\n  };\n\n  /**\n   * Adds new event listener.\n   */\n  on: Emitter<State>['on'] = this.ee.on.bind(this.ee);\n\n  /**\n   * Removes event listener.\n   */\n  off: Emitter<State>['off'] = this.ee.off.bind(this.ee);\n\n  /**\n   * Path, including pathname, search and hash.\n   * @example Pathname only.\n   * \"/pathname\"\n   * @example Pathname + search.\n   * \"/pathname?search\"\n   * @example Pathname + hash.\n   * \"/pathname#hash\"\n   * @example Pathname + search + hash.\n   * \"/pathname?search#hash\"\n   */\n  get path(): string {\n    return urlToPath(this);\n  }\n\n  /**\n   * Current pathname. Always starts with the slash.\n   * @see URL.pathname\n   * @example\n   * \"/\", \"/abc\"\n   */\n  get pathname(): string {\n    return this.navigator.current.pathname;\n  }\n\n  /**\n   * Depending on the current navigation type, parses incoming path and returns it presented as\n   * an object. In other words, this method parses the passed path and returns object, describing\n   * how the navigator \"sees\" it.\n   *\n   * @example Hash mode is omitted.\n   * parsePath('/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   * parsePath('http://example.com/abc?a=1#hash');\n   * // { pathname: '/abc', search: '?a=1', hash: '#hash' }\n   *\n   * @example Hash mode is enabled.\n   * parsePath('/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   * parsePath('http://example.com/abc?a=1#tma?is=cool#yeah');\n   * // { pathname: '/tma', search: '?is=cool', hash: '#yeah' }\n   */\n  parsePath(path: string | URL): URLLike {\n    let url = createSafeURL(path);\n    if (this.hashMode) {\n      url = createSafeURL(url.hash.slice(1));\n    }\n\n    return {\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n  }\n\n  /**\n   * Pushes new history item. Method replaces all entries after the current one with the one\n   * being pushed. Take a note, that passed item is always relative. In case, you want to use\n   * it as an absolute one, use the \"/\" prefix. Example: \"/absolute\", { pathname: \"/absolute\" }.\n   *\n   * To create a final path, navigator uses a method, used in the URL class constructor, resolving\n   * a path based on the current one.\n   * @param path - entry path.\n   * @param state - entry state.\n   *\n   * @example Pushing an absolute path.\n   * push(\"/absolute\"); // \"/absolute\"\n   *\n   * @example Pushing a relative path.\n   * push(\"relative\"); // \"/home/root\" -> \"/home/relative\"\n   *\n   * @example Pushing query parameters.\n   * push(\"/absolute?my-param=1\"); // \"/home/root\" -> \"/absolute?my-param=1\"\n   * push(\"relative?my-param=1\"); // \"/home/root\" -> \"/home/relative?my-param=1\"\n   * push(\"?my-param=1\"); // \"/home\" -> \"/home?my-param=1\"\n   *\n   * @example Pushing hash.\n   * push(\"#my-hash\"); // \"/home\" -> \"/home#my-hash\"\n   * push(\"relative#my-hash\"); // \"/home/root\" -> \"/home/relative#my-hash\"\n   *\n   * @example Pushing state.\n   * push(\"\", { state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   * push({ state: 'my-state' }); \"/home/root\" -> \"/home/root\"\n   */\n  push(path: string, state?: State): void;\n  push(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  push(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.push({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Replaces the current history item. Has the same logic as the `push` method.\n   * @param path - entry path.\n   * @param state - entry state.\n   * @see push\n   */\n  replace(path: string, state?: State): void;\n  replace(item: BrowserNavigatorAnyHistoryItem<State>): void;\n  replace(itemOrPath: string | BrowserNavigatorAnyHistoryItem<State>, fnState?: State): void {\n    const item = prepareItem(itemOrPath, this.path);\n    const { state = fnState } = item.params;\n    this.navigator.replace({ ...item, params: { ...item.params, state } });\n  }\n\n  /**\n   * Combines the navigator `base` property with the passed path data applying the navigator\n   * navigation mode.\n   * @param value - path presented as string or URLLike.\n   */\n  renderPath(value: string | URLLike): string {\n    const path = (this.base.length === 1 ? '' : this.base)\n      + ensurePrefix(urlToPath(value), '/');\n\n    return this.hashMode\n      ? ensurePrefix(path.slice(1), this.hashMode === 'classic' ? '#' : '#/')\n      : path;\n  }\n\n  /**\n   * Synchronizes current navigator state with browser history.\n   */\n  private async syncHistory(): Promise<void> {\n    // Remove history change event listener to get rid of side effects related to the possible\n    // future calls of history.go.\n    window.removeEventListener('popstate', this.onPopState);\n\n    const { state } = this;\n    const path = this.renderPath(this);\n\n    // Drop the browser history and work with the clean one.\n    await drop();\n\n    if (this.hasPrev && this.hasNext) {\n      // We have both previous and next elements. History should be:\n      // [back, *current*, forward]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else if (this.hasPrev) {\n      // We have only previous element. History should be:\n      // [back, *current*]\n      window.history.replaceState(CURSOR_BACK, '');\n      window.history.pushState(state, '', path);\n    } else if (this.hasNext) {\n      // We have only next element. History should be:\n      // [*current*, forward]\n      window.history.replaceState(state, path);\n      window.history.pushState(CURSOR_FORWARD, '');\n\n      await go(-1);\n    } else {\n      // We have no back and next elements. History should be:\n      // [void, *current*]\n      window.history.replaceState(CURSOR_VOID, '');\n      window.history.pushState(state, '', path);\n    }\n\n    window.addEventListener('popstate', this.onPopState);\n  }\n\n  /**\n   * Current query parameters.\n   * @see URL.search\n   * @example\n   * \"\", \"?\", \"?a=1\"\n   */\n  get search(): string {\n    return (this.navigator.current.params || {}).search || '';\n  }\n\n  /**\n   * Current history item state.\n   */\n  get state(): State | undefined {\n    return (this.navigator.current.params || {}).state;\n  }\n}\n","import { createError } from '@/errors/createError.js';\nimport { ERR_INVALID_PATH_BASE } from '@/errors/errors.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { getPathname } from '@/navigation/getPathname.js';\nimport { urlToPath } from '@/navigation/urlToPath.js';\nimport type { BrowserNavigatorConOptions } from '@/navigation/BrowserNavigator/types.js';\n\nexport function createBrowserNavigatorFromLocation<State>(\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  options ||= {};\n  const { href, hash } = window.location;\n\n  let path = urlToPath(\n    options.hashMode === null\n      // Hash mode is explicitly disabled. We are working with the usual location path.\n      ? href\n      // If hash mode is enabled, we should create a navigator based on the location's hash.\n      // In this case we have 2 possible situations:\n      // 1. Hash contains only launch parameters. Example:\n      // #tgWebAppData=...&tgWebAppPlatform=...&...\n      // Here we should mark the launch parameters as query parameters and have pathname \"/\" as\n      // the initial one.\n      //\n      // 2. Hash contains value, passed from above and launch parameters as query parameters.\n      // For instance, we could have such a URL:\n      // https://t.me/mybot/myapp#my-hash\n      // In this case, the Mini App will be opened with this URL:\n      // https://example.com/#my-hash?tgWebAppData=...&tgWebAppPlatform=...&...\n      : hash.includes('?') ? hash.slice(1) : `?${hash.slice(1)}`,\n  );\n\n  // If some base was specified, we should check if computed path starts with this base. In\n  // case it does, it should be removed from the path. Otherwise, an error must be thrown.\n  const base = options.base ? getPathname(options.base) : undefined;\n  if (base) {\n    if (!path.startsWith(base)) {\n      throw createError(\n        ERR_INVALID_PATH_BASE,\n        `Path \"${path}\" expected to be starting with \"${base}\"`,\n      );\n    }\n    path = path.slice(base.length);\n  }\n\n  return new BrowserNavigator<State>([path], 0, options);\n}\n","/**\n * @param value - string to take hash part from.\n * @returns String after the first met \"#\" symbol. In case, value doesn't contain hashtag, the\n * function will return null.\n *\n * @example No hash.\n * getHash('/path'); // null\n *\n * @example Has hash.\n * getHash('/path#abc'); // 'abc'\n *\n * @example Has double hash.\n * getHash('/path#abc#another'); // 'abc#another'\n */\nexport function getHash(value: string): string | null {\n  const match = value.match(/#(.+)/);\n  return match ? match[1] : null;\n}\n","import {\n  BrowserNavigatorConOptions,\n  BrowserNavigatorHistoryItem,\n} from '@/navigation/BrowserNavigator/types.js';\nimport { BrowserNavigator } from '@/navigation/BrowserNavigator/BrowserNavigator.js';\nimport { isPageReload } from '@/navigation/isPageReload.js';\nimport {\n  createBrowserNavigatorFromLocation\n} from '@/navigation/BrowserNavigator/createBrowserNavigatorFromLocation.js';\n\n\nfunction instantiate<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  // If page was reloaded, we assume that navigator had to previously save its state in the\n  // session storage.\n  if (isPageReload()) {\n    const stateRaw = sessionStorage.getItem(sessionStorageKey);\n    if (stateRaw) {\n      try {\n        const { index, history } = JSON.parse(stateRaw);\n        return new BrowserNavigator(\n          history as BrowserNavigatorHistoryItem<State>[],\n          index as number,\n          options\n        );\n      } catch (e) {\n        console.error('Unable to restore hash navigator state.', e);\n      }\n    }\n  }\n\n  // In case, we could not restore its state, or it is a fresh start, we can create an empty\n  // navigator. We are creating BrowserNavigator from the window.location.\n  return createBrowserNavigatorFromLocation(options);\n}\n\n/**\n * Initializes a standard Mini Apps navigator.\n * @param sessionStorageKey - session storage key, containing the navigator state.\n * @param options - additional BrowserNavigator options.\n */\nexport function initNavigator<State>(\n  sessionStorageKey: string,\n  options?: BrowserNavigatorConOptions,\n): BrowserNavigator<State> {\n  const navigator = instantiate<State>(sessionStorageKey, options);\n\n  const saveState = () => sessionStorage.setItem(sessionStorageKey, JSON.stringify({\n    index: navigator.index,\n    history: navigator.history,\n  }));\n\n  // Whenever navigator changes its state, we save it in the session storage.\n  navigator.on('change', saveState);\n\n  // Save the initial state to make sure nothing will break when the page was reloaded.\n  saveState();\n\n  return navigator;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}