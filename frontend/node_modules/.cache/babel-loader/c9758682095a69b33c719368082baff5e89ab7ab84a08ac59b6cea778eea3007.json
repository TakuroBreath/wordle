{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/contexts/TelegramContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TelegramContext = /*#__PURE__*/createContext(null);\nexport const useTelegram = () => {\n  _s();\n  const context = useContext(TelegramContext);\n  if (!context) {\n    throw new Error('useTelegram должен быть использован внутри TelegramProvider');\n  }\n  return context;\n};\n_s(useTelegram, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function TelegramProvider({\n  children\n}) {\n  _s2();\n  const [tg, setTg] = useState(null);\n  const [user, setUser] = useState(null);\n  const [initData, setInitData] = useState(null);\n  const [isReady, setIsReady] = useState(false);\n  useEffect(() => {\n    var _window$Telegram;\n    // Получаем доступ к Telegram WebApp API\n    const webApp = (_window$Telegram = window.Telegram) === null || _window$Telegram === void 0 ? void 0 : _window$Telegram.WebApp;\n    if (webApp) {\n      var _webApp$initDataUnsaf, _webApp$initDataUnsaf2;\n      // Инициализация завершена - API доступно\n      webApp.ready();\n      console.log('Telegram WebApp API инициализирован');\n\n      // Устанавливаем данные в состояние\n      setTg(webApp);\n      setUser(((_webApp$initDataUnsaf = webApp.initDataUnsafe) === null || _webApp$initDataUnsaf === void 0 ? void 0 : _webApp$initDataUnsaf.user) || null);\n\n      // Получаем и логируем initData\n      const initDataValue = webApp.initData || null;\n      console.log('Получены данные инициализации Telegram:', {\n        initDataLength: initDataValue ? initDataValue.length : 0,\n        user: (_webApp$initDataUnsaf2 = webApp.initDataUnsafe) === null || _webApp$initDataUnsaf2 === void 0 ? void 0 : _webApp$initDataUnsaf2.user\n      });\n      setInitData(initDataValue);\n\n      // Устанавливаем инициализационные данные в API клиент\n      if (initDataValue) {\n        console.log('Установка initData в API клиент');\n        api.setTelegramInitData(initDataValue);\n      } else {\n        console.warn('initData отсутствует или пуст');\n      }\n\n      // Настраиваем внешний вид приложения\n      webApp.expand();\n\n      // Устанавливаем основной цвет кнопки в соответствии с темой Telegram\n      webApp.MainButton.setParams({\n        color: webApp.themeParams.button_color,\n        text_color: webApp.themeParams.button_text_color\n      });\n      setIsReady(true);\n    } else {\n      console.warn('Telegram WebApp API не доступен, использую режим разработки');\n      // Для разработки - эмулируем пользователя и окружение\n      if (process.env.NODE_ENV === 'development') {\n        console.log('Инициализация эмуляции Telegram WebApp для разработки');\n        setTg({\n          MainButton: {\n            show: () => console.log('MainButton.show'),\n            hide: () => console.log('MainButton.hide'),\n            setParams: params => console.log('MainButton.setParams', params),\n            onClick: callback => console.log('MainButton.onClick', callback)\n          },\n          BackButton: {\n            show: () => console.log('BackButton.show'),\n            hide: () => console.log('BackButton.hide'),\n            onClick: callback => console.log('BackButton.onClick', callback)\n          },\n          themeParams: {\n            bg_color: '#ffffff',\n            text_color: '#000000',\n            hint_color: '#999999',\n            button_color: '#007aff',\n            button_text_color: '#ffffff'\n          },\n          isExpanded: true,\n          expand: () => console.log('WebApp.expand'),\n          close: () => console.log('WebApp.close'),\n          ready: () => console.log('WebApp.ready')\n        });\n        setUser({\n          id: 12345678,\n          first_name: 'Test',\n          last_name: 'User',\n          username: 'testuser',\n          language_code: 'ru'\n        });\n\n        // Создаем тестовые данные инициализации в формате, который ожидает сервер\n        // Это должно быть в формате query-string, который Telegram отправляет в initData\n        const testInitData = 'query_id=AAHdF6IQAAAAAN0XohDhrOan&user=%7B%22id%22%3A12345678%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%2C%22language_code%22%3A%22ru%22%7D&auth_date=1699123456&hash=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';\n        console.log('Установка тестовых данных инициализации для разработки');\n        setInitData(testInitData);\n        api.setTelegramInitData(testInitData);\n        setIsReady(true);\n      }\n    }\n  }, []);\n  const value = {\n    tg,\n    user,\n    initData,\n    isReady\n  };\n  return /*#__PURE__*/_jsxDEV(TelegramContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s2(TelegramProvider, \"FGXnvWyRTmQLKfig05PYDmnAYnM=\");\n_c = TelegramProvider;\nvar _c;\n$RefreshReg$(_c, \"TelegramProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","api","jsxDEV","_jsxDEV","TelegramContext","useTelegram","_s","context","Error","TelegramProvider","children","_s2","tg","setTg","user","setUser","initData","setInitData","isReady","setIsReady","_window$Telegram","webApp","window","Telegram","WebApp","_webApp$initDataUnsaf","_webApp$initDataUnsaf2","ready","console","log","initDataUnsafe","initDataValue","initDataLength","length","setTelegramInitData","warn","expand","MainButton","setParams","color","themeParams","button_color","text_color","button_text_color","process","env","NODE_ENV","show","hide","params","onClick","callback","BackButton","bg_color","hint_color","isExpanded","close","id","first_name","last_name","username","language_code","testInitData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/contexts/TelegramContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport api from '../services/api';\n\nconst TelegramContext = createContext(null);\n\nexport const useTelegram = () => {\n    const context = useContext(TelegramContext);\n    if (!context) {\n        throw new Error('useTelegram должен быть использован внутри TelegramProvider');\n    }\n    return context;\n};\n\nexport function TelegramProvider({ children }) {\n    const [tg, setTg] = useState(null);\n    const [user, setUser] = useState(null);\n    const [initData, setInitData] = useState(null);\n    const [isReady, setIsReady] = useState(false);\n\n    useEffect(() => {\n        // Получаем доступ к Telegram WebApp API\n        const webApp = window.Telegram?.WebApp;\n\n        if (webApp) {\n            // Инициализация завершена - API доступно\n            webApp.ready();\n            console.log('Telegram WebApp API инициализирован');\n\n            // Устанавливаем данные в состояние\n            setTg(webApp);\n            setUser(webApp.initDataUnsafe?.user || null);\n            \n            // Получаем и логируем initData\n            const initDataValue = webApp.initData || null;\n            console.log('Получены данные инициализации Telegram:', {\n                initDataLength: initDataValue ? initDataValue.length : 0,\n                user: webApp.initDataUnsafe?.user\n            });\n            setInitData(initDataValue);\n\n            // Устанавливаем инициализационные данные в API клиент\n            if (initDataValue) {\n                console.log('Установка initData в API клиент');\n                api.setTelegramInitData(initDataValue);\n            } else {\n                console.warn('initData отсутствует или пуст');\n            }\n\n            // Настраиваем внешний вид приложения\n            webApp.expand();\n\n            // Устанавливаем основной цвет кнопки в соответствии с темой Telegram\n            webApp.MainButton.setParams({\n                color: webApp.themeParams.button_color,\n                text_color: webApp.themeParams.button_text_color,\n            });\n\n            setIsReady(true);\n        } else {\n            console.warn('Telegram WebApp API не доступен, использую режим разработки');\n            // Для разработки - эмулируем пользователя и окружение\n            if (process.env.NODE_ENV === 'development') {\n                console.log('Инициализация эмуляции Telegram WebApp для разработки');\n                setTg({\n                    MainButton: {\n                        show: () => console.log('MainButton.show'),\n                        hide: () => console.log('MainButton.hide'),\n                        setParams: (params) => console.log('MainButton.setParams', params),\n                        onClick: (callback) => console.log('MainButton.onClick', callback)\n                    },\n                    BackButton: {\n                        show: () => console.log('BackButton.show'),\n                        hide: () => console.log('BackButton.hide'),\n                        onClick: (callback) => console.log('BackButton.onClick', callback)\n                    },\n                    themeParams: {\n                        bg_color: '#ffffff',\n                        text_color: '#000000',\n                        hint_color: '#999999',\n                        button_color: '#007aff',\n                        button_text_color: '#ffffff',\n                    },\n                    isExpanded: true,\n                    expand: () => console.log('WebApp.expand'),\n                    close: () => console.log('WebApp.close'),\n                    ready: () => console.log('WebApp.ready')\n                });\n\n                setUser({\n                    id: 12345678,\n                    first_name: 'Test',\n                    last_name: 'User',\n                    username: 'testuser',\n                    language_code: 'ru'\n                });\n\n                // Создаем тестовые данные инициализации в формате, который ожидает сервер\n                // Это должно быть в формате query-string, который Telegram отправляет в initData\n                const testInitData = 'query_id=AAHdF6IQAAAAAN0XohDhrOan&user=%7B%22id%22%3A12345678%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%2C%22language_code%22%3A%22ru%22%7D&auth_date=1699123456&hash=1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef';\n                console.log('Установка тестовых данных инициализации для разработки');\n                setInitData(testInitData);\n                api.setTelegramInitData(testInitData);\n                setIsReady(true);\n            }\n        }\n    }, []);\n\n    const value = {\n        tg,\n        user,\n        initData,\n        isReady\n    };\n\n    return (\n        <TelegramContext.Provider value={value}>\n            {children}\n        </TelegramContext.Provider>\n    );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}