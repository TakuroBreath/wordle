{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен быть использован внутри AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const {\n    initData,\n    isReady,\n    user\n  } = useTelegram();\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Инициализация аутентификации при загрузке компонента\n  useEffect(() => {\n    const initAuth = async () => {\n      if (!isReady || !initData) {\n        console.log('Аутентификация не инициализирована:', {\n          isReady,\n          initData\n        });\n        return;\n      }\n      try {\n        var _response$data;\n        setLoading(true);\n        console.log('Начало аутентификации с данными:', initData);\n\n        // Проверяем, есть ли уже токен в localStorage\n        const savedToken = localStorage.getItem('token');\n        if (savedToken) {\n          console.log('Найден сохраненный токен, проверяем его валидность...');\n          try {\n            // Устанавливаем токен в заголовки API запросов\n            api.setAuthToken(savedToken);\n\n            // Проверяем валидность токена, получая данные пользователя\n            const userResponse = await api.user.getCurrent();\n            console.log('Токен валиден, получены данные пользователя:', userResponse.data);\n            setCurrentUser(userResponse.data);\n            setToken(savedToken);\n            setLoading(false);\n            return;\n          } catch (tokenErr) {\n            console.error('Сохраненный токен недействителен:', tokenErr);\n            localStorage.removeItem('token');\n            api.setAuthToken(null);\n            // Продолжаем процесс аутентификации\n          }\n        }\n\n        // Аутентификация с использованием данных Telegram Mini App\n        console.log('Отправка запроса на аутентификацию с данными Telegram Mini App');\n        const response = await api.auth.telegramAuth({\n          init_data: initData\n        });\n        console.log('Ответ сервера при аутентификации:', response.data);\n\n        // Сохраняем токен в localStorage и состояние\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.token) {\n          console.log('Получен токен авторизации');\n          localStorage.setItem('token', response.data.token);\n          setToken(response.data.token);\n\n          // Добавляем токен в заголовки API запросов\n          api.setAuthToken(response.data.token);\n          console.log('Токен установлен в заголовки API');\n\n          // Получаем данные текущего пользователя\n          const userResponse = await api.user.getCurrent();\n          console.log('Данные пользователя:', userResponse.data);\n          setCurrentUser(userResponse.data);\n        } else {\n          console.error('Токен не получен в ответе сервера');\n          throw new Error('Токен не получен');\n        }\n      } catch (err) {\n        console.error('Ошибка аутентификации:', err);\n        setError(err.message || 'Ошибка аутентификации');\n        // Очищаем токен при ошибке\n        localStorage.removeItem('token');\n        setToken(null);\n        api.setAuthToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Для разработки - эмулируем пользователя без выполнения аутентификации\n    if (process.env.NODE_ENV === 'development' && !token && user && !initData) {\n      console.log('Режим разработки: эмуляция пользователя');\n      setCurrentUser({\n        telegram_id: user.id,\n        username: user.username,\n        first_name: user.first_name,\n        last_name: user.last_name,\n        balance_ton: 10.5,\n        balance_usdt: 25.0,\n        wins: 5,\n        losses: 2\n      });\n      setLoading(false);\n    } else {\n      initAuth();\n    }\n  }, [initData, isReady, user]);\n\n  // Проверка токена при загрузке приложения\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        console.log('Проверка валидности токена:', token.substring(0, 15) + '...');\n\n        // Добавляем токен в заголовки API запросов\n        api.setAuthToken(token);\n\n        // Проверяем валидность токена и получаем данные пользователя\n        try {\n          // Сначала пробуем получить данные пользователя напрямую\n          console.log('Получение данных пользователя с текущим токеном...');\n          const userResponse = await api.user.getCurrent();\n          console.log('Данные пользователя получены:', userResponse.data);\n          setCurrentUser(userResponse.data);\n        } catch (userErr) {\n          var _response$data2;\n          console.error('Ошибка при получении данных пользователя:', userErr);\n\n          // Если не удалось получить данные пользователя, пробуем верифицировать токен\n          console.log('Попытка верификации токена через API...');\n          const response = await api.auth.verifyToken({\n            token\n          });\n          console.log('Результат верификации токена:', response.data);\n          if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.authenticated) {\n            setCurrentUser(response.data.user);\n          } else {\n            console.error('Токен недействителен по данным API верификации');\n            throw new Error('Токен недействителен');\n          }\n        }\n      } catch (err) {\n        console.error('Ошибка проверки токена:', err);\n        localStorage.removeItem('token');\n        setToken(null);\n        setCurrentUser(null);\n        api.setAuthToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (process.env.NODE_ENV !== 'development' || token && !currentUser) {\n      verifyToken();\n    }\n  }, [token]);\n\n  // Функция выхода из аккаунта\n  const logout = async () => {\n    if (token) {\n      try {\n        await api.auth.logout({\n          token\n        });\n      } catch (err) {\n        console.error('Ошибка при выходе:', err);\n      }\n    }\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    api.setAuthToken(null);\n  };\n  const value = {\n    isAuthenticated: !!currentUser,\n    user: currentUser,\n    token,\n    loading,\n    error,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"q+mNohJVF611mVno9512kUMW/Ik=\", false, function () {\n  return [useTelegram];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useTelegram","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","initData","isReady","user","token","setToken","localStorage","getItem","currentUser","setCurrentUser","loading","setLoading","error","setError","initAuth","console","log","_response$data","savedToken","setAuthToken","userResponse","getCurrent","data","tokenErr","removeItem","response","auth","telegramAuth","init_data","setItem","err","message","process","env","NODE_ENV","telegram_id","id","username","first_name","last_name","balance_ton","balance_usdt","wins","losses","verifyToken","substring","userErr","_response$data2","authenticated","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth должен быть использован внутри AuthProvider');\n    }\n    return context;\n};\n\nexport function AuthProvider({ children }) {\n    const { initData, isReady, user } = useTelegram();\n    const [token, setToken] = useState(localStorage.getItem('token') || null);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Инициализация аутентификации при загрузке компонента\n    useEffect(() => {\n        const initAuth = async () => {\n            if (!isReady || !initData) {\n                console.log('Аутентификация не инициализирована:', { isReady, initData });\n                return;\n            }\n\n            try {\n                setLoading(true);\n                console.log('Начало аутентификации с данными:', initData);\n\n                // Проверяем, есть ли уже токен в localStorage\n                const savedToken = localStorage.getItem('token');\n                if (savedToken) {\n                    console.log('Найден сохраненный токен, проверяем его валидность...');\n                    try {\n                        // Устанавливаем токен в заголовки API запросов\n                        api.setAuthToken(savedToken);\n\n                        // Проверяем валидность токена, получая данные пользователя\n                        const userResponse = await api.user.getCurrent();\n                        console.log('Токен валиден, получены данные пользователя:', userResponse.data);\n                        setCurrentUser(userResponse.data);\n                        setToken(savedToken);\n                        setLoading(false);\n                        return;\n                    } catch (tokenErr) {\n                        console.error('Сохраненный токен недействителен:', tokenErr);\n                        localStorage.removeItem('token');\n                        api.setAuthToken(null);\n                        // Продолжаем процесс аутентификации\n                    }\n                }\n\n                // Аутентификация с использованием данных Telegram Mini App\n                console.log('Отправка запроса на аутентификацию с данными Telegram Mini App');\n                const response = await api.auth.telegramAuth({ init_data: initData });\n                console.log('Ответ сервера при аутентификации:', response.data);\n\n                // Сохраняем токен в localStorage и состояние\n                if (response.data?.token) {\n                    console.log('Получен токен авторизации');\n                    localStorage.setItem('token', response.data.token);\n                    setToken(response.data.token);\n\n                    // Добавляем токен в заголовки API запросов\n                    api.setAuthToken(response.data.token);\n                    console.log('Токен установлен в заголовки API');\n\n                    // Получаем данные текущего пользователя\n                    const userResponse = await api.user.getCurrent();\n                    console.log('Данные пользователя:', userResponse.data);\n                    setCurrentUser(userResponse.data);\n                } else {\n                    console.error('Токен не получен в ответе сервера');\n                    throw new Error('Токен не получен');\n                }\n            } catch (err) {\n                console.error('Ошибка аутентификации:', err);\n                setError(err.message || 'Ошибка аутентификации');\n                // Очищаем токен при ошибке\n                localStorage.removeItem('token');\n                setToken(null);\n                api.setAuthToken(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        // Для разработки - эмулируем пользователя без выполнения аутентификации\n        if (process.env.NODE_ENV === 'development' && !token && user && !initData) {\n            console.log('Режим разработки: эмуляция пользователя');\n            setCurrentUser({\n                telegram_id: user.id,\n                username: user.username,\n                first_name: user.first_name,\n                last_name: user.last_name,\n                balance_ton: 10.5,\n                balance_usdt: 25.0,\n                wins: 5,\n                losses: 2\n            });\n            setLoading(false);\n        } else {\n            initAuth();\n        }\n    }, [initData, isReady, user]);\n\n    // Проверка токена при загрузке приложения\n    useEffect(() => {\n        const verifyToken = async () => {\n            if (!token) {\n                setLoading(false);\n                return;\n            }\n\n            try {\n                setLoading(true);\n                console.log('Проверка валидности токена:', token.substring(0, 15) + '...');\n\n                // Добавляем токен в заголовки API запросов\n                api.setAuthToken(token);\n\n                // Проверяем валидность токена и получаем данные пользователя\n                try {\n                    // Сначала пробуем получить данные пользователя напрямую\n                    console.log('Получение данных пользователя с текущим токеном...');\n                    const userResponse = await api.user.getCurrent();\n                    console.log('Данные пользователя получены:', userResponse.data);\n                    setCurrentUser(userResponse.data);\n                } catch (userErr) {\n                    console.error('Ошибка при получении данных пользователя:', userErr);\n\n                    // Если не удалось получить данные пользователя, пробуем верифицировать токен\n                    console.log('Попытка верификации токена через API...');\n                    const response = await api.auth.verifyToken({ token });\n                    console.log('Результат верификации токена:', response.data);\n\n                    if (response.data?.authenticated) {\n                        setCurrentUser(response.data.user);\n                    } else {\n                        console.error('Токен недействителен по данным API верификации');\n                        throw new Error('Токен недействителен');\n                    }\n                }\n            } catch (err) {\n                console.error('Ошибка проверки токена:', err);\n                localStorage.removeItem('token');\n                setToken(null);\n                setCurrentUser(null);\n                api.setAuthToken(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (process.env.NODE_ENV !== 'development' || (token && !currentUser)) {\n            verifyToken();\n        }\n    }, [token]);\n\n    // Функция выхода из аккаунта\n    const logout = async () => {\n        if (token) {\n            try {\n                await api.auth.logout({ token });\n            } catch (err) {\n                console.error('Ошибка при выходе:', err);\n            }\n        }\n\n        localStorage.removeItem('token');\n        setToken(null);\n        setCurrentUser(null);\n        api.setAuthToken(null);\n    };\n\n    const value = {\n        isAuthenticated: !!currentUser,\n        user: currentUser,\n        token,\n        loading,\n        error,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}