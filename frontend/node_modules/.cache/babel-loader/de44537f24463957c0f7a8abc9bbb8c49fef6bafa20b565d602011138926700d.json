{"ast":null,"code":"import axios from 'axios';\n\n// Создаем экземпляр axios с базовым URL для API\nconst apiClient = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Функция для установки токена авторизации\nconst setAuthToken = token => {\n  console.log('Установка токена авторизации:', token ? 'токен установлен' : 'токен удален');\n  if (token) {\n    apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n  console.log('Текущие заголовки:', apiClient.defaults.headers);\n};\n\n// Функция для установки инициализационных данных Telegram Mini App\nconst setTelegramInitData = initData => {\n  if (initData) {\n    apiClient.defaults.headers.common['Authorization'] = `tma ${initData}`;\n  } else {\n    delete apiClient.defaults.headers.common['Authorization'];\n  }\n};\n\n// API для работы с аутентификацией\nconst auth = {\n  // Аутентификация через Telegram Mini App\n  telegramAuth: data => {\n    return apiClient.post('/auth/telegram', data);\n  },\n  // Проверка валидности токена\n  verifyToken: data => {\n    return apiClient.post('/auth/verify', data);\n  },\n  // Выход из аккаунта\n  logout: data => {\n    return apiClient.post('/auth/logout', data);\n  }\n};\n\n// API для работы с пользователями\nconst user = {\n  // Получение данных текущего пользователя\n  getCurrent: () => {\n    return apiClient.get('/users/me');\n  },\n  // Получение баланса пользователя\n  getBalance: () => {\n    return apiClient.get('/users/balance');\n  },\n  // Запрос на вывод средств\n  requestWithdraw: data => {\n    return apiClient.post('/users/withdraw', data);\n  },\n  // Получение истории выводов\n  getWithdrawHistory: params => {\n    return apiClient.get('/users/withdrawals', {\n      params\n    });\n  },\n  // Генерация адреса кошелька\n  generateWallet: () => {\n    return apiClient.post('/users/wallet');\n  }\n};\n\n// API для работы с играми\nconst game = {\n  // Создание новой игры\n  create: data => {\n    return apiClient.post('/games', data);\n  },\n  // Получение информации об игре по ID\n  get: id => {\n    return apiClient.get(`/games/${id}`);\n  },\n  // Получение списка активных игр\n  getActive: params => {\n    return apiClient.get('/games', {\n      params\n    });\n  },\n  // Получение списка игр, созданных пользователем\n  getMy: params => {\n    return apiClient.get('/games/my', {\n      params\n    });\n  },\n  // Удаление игры\n  delete: id => {\n    return apiClient.delete(`/games/${id}`);\n  },\n  // Пополнение reward pool игры\n  addReward: (id, data) => {\n    return apiClient.post(`/games/${id}/reward`, data);\n  },\n  // Активация игры\n  activate: id => {\n    return apiClient.post(`/games/${id}/activate`);\n  },\n  // Деактивация игры\n  deactivate: id => {\n    return apiClient.post(`/games/${id}/deactivate`);\n  }\n};\n\n// API для работы с лобби\nconst lobby = {\n  // Присоединение к игре (создание лобби)\n  join: async data => {\n    try {\n      // Проверяем наличие токена авторизации\n      const authHeader = apiClient.defaults.headers.common['Authorization'];\n      if (!authHeader) {\n        throw new Error('Отсутствует токен авторизации');\n      }\n\n      // Проверяем наличие всех необходимых данных\n      if (!data.game_id) {\n        throw new Error('Отсутствует ID игры');\n      }\n      if (!data.bet_amount || isNaN(data.bet_amount)) {\n        throw new Error('Некорректная сумма ставки');\n      }\n      if (!data.currency) {\n        throw new Error('Отсутствует валюта');\n      }\n      const requestData = {\n        game_id: data.game_id,\n        bet_amount: parseFloat(data.bet_amount),\n        currency: data.currency\n      };\n      console.log('Подготовка запроса на создание лобби:', {\n        url: '/lobbies',\n        method: 'POST',\n        data: requestData,\n        headers: {\n          ...apiClient.defaults.headers,\n          Authorization: authHeader ? 'Bearer [HIDDEN]' : undefined\n        }\n      });\n      try {\n        console.log('Отправка запроса на создание лобби...');\n        const response = await apiClient.post('/lobbies', requestData);\n        console.log('Успешный ответ сервера при создании лобби:', {\n          status: response.status,\n          data: response.data,\n          headers: response.headers\n        });\n        return response;\n      } catch (error) {\n        var _error$response, _error$response2, _error$config, _error$config2, _error$config3, _error$config4, _error$config5, _error$config5$header, _error$response3, _error$response4, _error$response4$data, _error$response4$data2;\n        console.error('Ошибка при создании лобби:', {\n          status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n          data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n          message: error.message,\n          request: {\n            url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n            method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n            data: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.data,\n            headers: {\n              ...((_error$config4 = error.config) === null || _error$config4 === void 0 ? void 0 : _error$config4.headers),\n              Authorization: (_error$config5 = error.config) !== null && _error$config5 !== void 0 && (_error$config5$header = _error$config5.headers) !== null && _error$config5$header !== void 0 && _error$config5$header.Authorization ? 'Bearer [HIDDEN]' : undefined\n            }\n          }\n        });\n\n        // Если это ошибка 500 и сообщение об отсутствии активного лобби,\n        // пробуем создать лобби еще раз\n        if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500 && (_error$response4 = error.response) !== null && _error$response4 !== void 0 && (_error$response4$data = _error$response4.data) !== null && _error$response4$data !== void 0 && (_error$response4$data2 = _error$response4$data.error) !== null && _error$response4$data2 !== void 0 && _error$response4$data2.includes('active lobby not found')) {\n          console.log('Повторная попытка создания лобби...');\n          try {\n            const retryResponse = await apiClient.post('/lobbies', requestData);\n            console.log('Успешный ответ сервера при повторной попытке:', {\n              status: retryResponse.status,\n              data: retryResponse.data\n            });\n            return retryResponse;\n          } catch (retryError) {\n            var _retryError$response, _retryError$response2;\n            console.error('Ошибка при повторной попытке создания лобби:', {\n              status: (_retryError$response = retryError.response) === null || _retryError$response === void 0 ? void 0 : _retryError$response.status,\n              data: (_retryError$response2 = retryError.response) === null || _retryError$response2 === void 0 ? void 0 : _retryError$response2.data,\n              message: retryError.message\n            });\n            throw retryError;\n          }\n        }\n        throw error;\n      }\n    } catch (error) {\n      console.error('Критическая ошибка при создании лобби:', error);\n      throw error;\n    }\n  },\n  // Получение информации о лобби по ID\n  get: id => {\n    return apiClient.get(`/lobbies/${id}`);\n  },\n  // Получение активного лобби пользователя\n  getActive: () => {\n    return apiClient.get('/lobbies/active');\n  },\n  // Получение всех лобби пользователя\n  getAll: params => {\n    return apiClient.get('/lobbies', {\n      params\n    });\n  },\n  // Отправка попытки угадать слово\n  makeAttempt: (id, data) => {\n    return apiClient.post(`/lobbies/${id}/attempt`, data);\n  },\n  // Получение истории попыток\n  getAttempts: id => {\n    return apiClient.get(`/lobbies/${id}/attempts`);\n  },\n  // Продление времени лобби\n  extendTime: (id, data) => {\n    return apiClient.post(`/lobbies/${id}/extend`, data);\n  }\n};\n\n// API для работы с транзакциями\nconst transaction = {\n  // Получение всех транзакций пользователя\n  getAll: params => {\n    return apiClient.get('/transactions', {\n      params\n    });\n  },\n  // Получение транзакции по ID\n  get: id => {\n    return apiClient.get(`/transactions/${id}`);\n  },\n  // Создание депозита\n  createDeposit: data => {\n    return apiClient.post('/transactions/deposit', data);\n  },\n  // Проверка статуса депозита\n  verifyDeposit: data => {\n    return apiClient.post('/transactions/verify', data);\n  }\n};\nexport default {\n  setAuthToken,\n  setTelegramInitData,\n  auth,\n  user,\n  game,\n  lobby,\n  transaction\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","process","env","REACT_APP_API_URL","headers","setAuthToken","token","console","log","defaults","common","setTelegramInitData","initData","auth","telegramAuth","data","post","verifyToken","logout","user","getCurrent","get","getBalance","requestWithdraw","getWithdrawHistory","params","generateWallet","game","id","getActive","getMy","delete","addReward","activate","deactivate","lobby","join","authHeader","Error","game_id","bet_amount","isNaN","currency","requestData","parseFloat","url","method","Authorization","undefined","response","status","error","_error$response","_error$response2","_error$config","_error$config2","_error$config3","_error$config4","_error$config5","_error$config5$header","_error$response3","_error$response4","_error$response4$data","_error$response4$data2","message","request","config","includes","retryResponse","retryError","_retryError$response","_retryError$response2","getAll","makeAttempt","getAttempts","extendTime","transaction","createDeposit","verifyDeposit"],"sources":["/Users/takuro/Projects/wordle/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Создаем экземпляр axios с базовым URL для API\nconst apiClient = axios.create({\n    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Функция для установки токена авторизации\nconst setAuthToken = (token) => {\n    console.log('Установка токена авторизации:', token ? 'токен установлен' : 'токен удален');\n    if (token) {\n        apiClient.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n    } else {\n        delete apiClient.defaults.headers.common['Authorization'];\n    }\n    console.log('Текущие заголовки:', apiClient.defaults.headers);\n};\n\n// Функция для установки инициализационных данных Telegram Mini App\nconst setTelegramInitData = (initData) => {\n    if (initData) {\n        apiClient.defaults.headers.common['Authorization'] = `tma ${initData}`;\n    } else {\n        delete apiClient.defaults.headers.common['Authorization'];\n    }\n};\n\n// API для работы с аутентификацией\nconst auth = {\n    // Аутентификация через Telegram Mini App\n    telegramAuth: (data) => {\n        return apiClient.post('/auth/telegram', data);\n    },\n\n    // Проверка валидности токена\n    verifyToken: (data) => {\n        return apiClient.post('/auth/verify', data);\n    },\n\n    // Выход из аккаунта\n    logout: (data) => {\n        return apiClient.post('/auth/logout', data);\n    },\n};\n\n// API для работы с пользователями\nconst user = {\n    // Получение данных текущего пользователя\n    getCurrent: () => {\n        return apiClient.get('/users/me');\n    },\n\n    // Получение баланса пользователя\n    getBalance: () => {\n        return apiClient.get('/users/balance');\n    },\n\n    // Запрос на вывод средств\n    requestWithdraw: (data) => {\n        return apiClient.post('/users/withdraw', data);\n    },\n\n    // Получение истории выводов\n    getWithdrawHistory: (params) => {\n        return apiClient.get('/users/withdrawals', { params });\n    },\n\n    // Генерация адреса кошелька\n    generateWallet: () => {\n        return apiClient.post('/users/wallet');\n    },\n};\n\n// API для работы с играми\nconst game = {\n    // Создание новой игры\n    create: (data) => {\n        return apiClient.post('/games', data);\n    },\n\n    // Получение информации об игре по ID\n    get: (id) => {\n        return apiClient.get(`/games/${id}`);\n    },\n\n    // Получение списка активных игр\n    getActive: (params) => {\n        return apiClient.get('/games', { params });\n    },\n\n    // Получение списка игр, созданных пользователем\n    getMy: (params) => {\n        return apiClient.get('/games/my', { params });\n    },\n\n    // Удаление игры\n    delete: (id) => {\n        return apiClient.delete(`/games/${id}`);\n    },\n\n    // Пополнение reward pool игры\n    addReward: (id, data) => {\n        return apiClient.post(`/games/${id}/reward`, data);\n    },\n\n    // Активация игры\n    activate: (id) => {\n        return apiClient.post(`/games/${id}/activate`);\n    },\n\n    // Деактивация игры\n    deactivate: (id) => {\n        return apiClient.post(`/games/${id}/deactivate`);\n    },\n};\n\n// API для работы с лобби\nconst lobby = {\n    // Присоединение к игре (создание лобби)\n    join: async (data) => {\n        try {\n            // Проверяем наличие токена авторизации\n            const authHeader = apiClient.defaults.headers.common['Authorization'];\n            if (!authHeader) {\n                throw new Error('Отсутствует токен авторизации');\n            }\n\n            // Проверяем наличие всех необходимых данных\n            if (!data.game_id) {\n                throw new Error('Отсутствует ID игры');\n            }\n            if (!data.bet_amount || isNaN(data.bet_amount)) {\n                throw new Error('Некорректная сумма ставки');\n            }\n            if (!data.currency) {\n                throw new Error('Отсутствует валюта');\n            }\n\n            const requestData = {\n                game_id: data.game_id,\n                bet_amount: parseFloat(data.bet_amount),\n                currency: data.currency\n            };\n\n            console.log('Подготовка запроса на создание лобби:', {\n                url: '/lobbies',\n                method: 'POST',\n                data: requestData,\n                headers: {\n                    ...apiClient.defaults.headers,\n                    Authorization: authHeader ? 'Bearer [HIDDEN]' : undefined\n                }\n            });\n\n            try {\n                console.log('Отправка запроса на создание лобби...');\n                const response = await apiClient.post('/lobbies', requestData);\n                console.log('Успешный ответ сервера при создании лобби:', {\n                    status: response.status,\n                    data: response.data,\n                    headers: response.headers\n                });\n                return response;\n            } catch (error) {\n                console.error('Ошибка при создании лобби:', {\n                    status: error.response?.status,\n                    data: error.response?.data,\n                    message: error.message,\n                    request: {\n                        url: error.config?.url,\n                        method: error.config?.method,\n                        data: error.config?.data,\n                        headers: {\n                            ...error.config?.headers,\n                            Authorization: error.config?.headers?.Authorization ? 'Bearer [HIDDEN]' : undefined\n                        }\n                    }\n                });\n\n                // Если это ошибка 500 и сообщение об отсутствии активного лобби,\n                // пробуем создать лобби еще раз\n                if (error.response?.status === 500 && \n                    error.response?.data?.error?.includes('active lobby not found')) {\n                    console.log('Повторная попытка создания лобби...');\n                    try {\n                        const retryResponse = await apiClient.post('/lobbies', requestData);\n                        console.log('Успешный ответ сервера при повторной попытке:', {\n                            status: retryResponse.status,\n                            data: retryResponse.data\n                        });\n                        return retryResponse;\n                    } catch (retryError) {\n                        console.error('Ошибка при повторной попытке создания лобби:', {\n                            status: retryError.response?.status,\n                            data: retryError.response?.data,\n                            message: retryError.message\n                        });\n                        throw retryError;\n                    }\n                }\n                throw error;\n            }\n        } catch (error) {\n            console.error('Критическая ошибка при создании лобби:', error);\n            throw error;\n        }\n    },\n\n    // Получение информации о лобби по ID\n    get: (id) => {\n        return apiClient.get(`/lobbies/${id}`);\n    },\n\n    // Получение активного лобби пользователя\n    getActive: () => {\n        return apiClient.get('/lobbies/active');\n    },\n\n    // Получение всех лобби пользователя\n    getAll: (params) => {\n        return apiClient.get('/lobbies', { params });\n    },\n\n    // Отправка попытки угадать слово\n    makeAttempt: (id, data) => {\n        return apiClient.post(`/lobbies/${id}/attempt`, data);\n    },\n\n    // Получение истории попыток\n    getAttempts: (id) => {\n        return apiClient.get(`/lobbies/${id}/attempts`);\n    },\n\n    // Продление времени лобби\n    extendTime: (id, data) => {\n        return apiClient.post(`/lobbies/${id}/extend`, data);\n    },\n};\n\n// API для работы с транзакциями\nconst transaction = {\n    // Получение всех транзакций пользователя\n    getAll: (params) => {\n        return apiClient.get('/transactions', { params });\n    },\n\n    // Получение транзакции по ID\n    get: (id) => {\n        return apiClient.get(`/transactions/${id}`);\n    },\n\n    // Создание депозита\n    createDeposit: (data) => {\n        return apiClient.post('/transactions/deposit', data);\n    },\n\n    // Проверка статуса депозита\n    verifyDeposit: (data) => {\n        return apiClient.post('/transactions/verify', data);\n    },\n};\n\nexport default {\n    setAuthToken,\n    setTelegramInitData,\n    auth,\n    user,\n    game,\n    lobby,\n    transaction,\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}