{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/components/WordleGrid.js\";\nimport React from 'react';\nimport styled from 'styled-components';\n\n// Стили для сетки\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n  margin: 20px 0;\n`;\n_c = Grid;\nconst Row = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n_c2 = Row;\nconst Cell = styled.div`\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border: 2px solid #d3d6da;\n  background-color: ${props => {\n  if (props.state === 2) return '#6aaa64'; // Правильная буква и позиция\n  if (props.state === 1) return '#c9b458'; // Буква есть, но не на той позиции\n  if (props.state === 0) return '#787c7e'; // Буквы нет в слове\n  return '#ffffff'; // Пустая ячейка\n}};\n  color: ${props => props.state !== undefined ? '#ffffff' : '#000000'};\n  transition: all 0.2s ease;\n  \n  @media (max-width: 480px) {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n  }\n`;\n\n// Компонент сетки Wordle\n_c3 = Cell;\nconst WordleGrid = ({\n  attempts,\n  wordLength,\n  maxTries\n}) => {\n  // Создаем пустую сетку с нужным количеством строк и столбцов\n  const renderGrid = () => {\n    const rows = [];\n\n    // Заполняем сетку существующими попытками\n    for (let i = 0; i < maxTries; i++) {\n      const attempt = attempts[i] || {\n        word: '',\n        result: []\n      };\n      const cells = [];\n      for (let j = 0; j < wordLength; j++) {\n        const letter = attempt.word[j] || '';\n        const state = attempt.result[j];\n        cells.push(/*#__PURE__*/_jsxDEV(Cell, {\n          state: state,\n          children: letter\n        }, `cell-${i}-${j}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this));\n      }\n      rows.push(/*#__PURE__*/_jsxDEV(Row, {\n        children: cells\n      }, `row-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 23\n      }, this));\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: renderGrid()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 12\n  }, this);\n};\n_c4 = WordleGrid;\nexport default WordleGrid;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Grid\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"Cell\");\n$RefreshReg$(_c4, \"WordleGrid\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Grid","div","_c","Row","_c2","Cell","props","state","undefined","_c3","WordleGrid","attempts","wordLength","maxTries","renderGrid","rows","i","attempt","word","result","cells","j","letter","push","children","fileName","_jsxFileName","lineNumber","columnNumber","_c4","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/components/WordleGrid.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\n// Стили для сетки\nconst Grid = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5px;\n  margin: 20px 0;\n`;\n\nconst Row = styled.div`\n  display: flex;\n  gap: 5px;\n`;\n\nconst Cell = styled.div`\n  width: 50px;\n  height: 50px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border: 2px solid #d3d6da;\n  background-color: ${props => {\n        if (props.state === 2) return '#6aaa64'; // Правильная буква и позиция\n        if (props.state === 1) return '#c9b458'; // Буква есть, но не на той позиции\n        if (props.state === 0) return '#787c7e'; // Буквы нет в слове\n        return '#ffffff'; // Пустая ячейка\n    }};\n  color: ${props => (props.state !== undefined ? '#ffffff' : '#000000')};\n  transition: all 0.2s ease;\n  \n  @media (max-width: 480px) {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n  }\n`;\n\n// Компонент сетки Wordle\nconst WordleGrid = ({ attempts, wordLength, maxTries }) => {\n    // Создаем пустую сетку с нужным количеством строк и столбцов\n    const renderGrid = () => {\n        const rows = [];\n\n        // Заполняем сетку существующими попытками\n        for (let i = 0; i < maxTries; i++) {\n            const attempt = attempts[i] || { word: '', result: [] };\n            const cells = [];\n\n            for (let j = 0; j < wordLength; j++) {\n                const letter = attempt.word[j] || '';\n                const state = attempt.result[j];\n\n                cells.push(\n                    <Cell key={`cell-${i}-${j}`} state={state}>\n                        {letter}\n                    </Cell>\n                );\n            }\n\n            rows.push(<Row key={`row-${i}`}>{cells}</Row>);\n        }\n\n        return rows;\n    };\n\n    return <Grid>{renderGrid()}</Grid>;\n};\n\nexport default WordleGrid; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;;AAEtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GANIF,IAAI;AAQV,MAAMG,GAAG,GAAGN,MAAM,CAACI,GAAG;AACtB;AACA;AACA,CAAC;AAACG,GAAA,GAHID,GAAG;AAKT,MAAME,IAAI,GAAGR,MAAM,CAACI,GAAG;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBK,KAAK,IAAI;EACvB,IAAIA,KAAK,CAACC,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;EACzC,IAAID,KAAK,CAACC,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;EACzC,IAAID,KAAK,CAACC,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS,CAAC,CAAC;EACzC,OAAO,SAAS,CAAC,CAAC;AACtB,CAAC;AACL,WAAWD,KAAK,IAAKA,KAAK,CAACC,KAAK,KAAKC,SAAS,GAAG,SAAS,GAAG,SAAU;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAC,GAAA,GA1BMJ,IAAI;AA2BV,MAAMK,UAAU,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EACvD;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,IAAI,GAAG,EAAE;;IAEf;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,EAAEG,CAAC,EAAE,EAAE;MAC/B,MAAMC,OAAO,GAAGN,QAAQ,CAACK,CAAC,CAAC,IAAI;QAAEE,IAAI,EAAE,EAAE;QAAEC,MAAM,EAAE;MAAG,CAAC;MACvD,MAAMC,KAAK,GAAG,EAAE;MAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,UAAU,EAAES,CAAC,EAAE,EAAE;QACjC,MAAMC,MAAM,GAAGL,OAAO,CAACC,IAAI,CAACG,CAAC,CAAC,IAAI,EAAE;QACpC,MAAMd,KAAK,GAAGU,OAAO,CAACE,MAAM,CAACE,CAAC,CAAC;QAE/BD,KAAK,CAACG,IAAI,cACNxB,OAAA,CAACM,IAAI;UAAwBE,KAAK,EAAEA,KAAM;UAAAiB,QAAA,EACrCF;QAAM,GADA,QAAQN,CAAC,IAAIK,CAAC,EAAE;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAErB,CACV,CAAC;MACL;MAEAb,IAAI,CAACQ,IAAI,cAACxB,OAAA,CAACI,GAAG;QAAAqB,QAAA,EAAmBJ;MAAK,GAAlB,OAAOJ,CAAC,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAAC,CAAC;IAClD;IAEA,OAAOb,IAAI;EACf,CAAC;EAED,oBAAOhB,OAAA,CAACC,IAAI;IAAAwB,QAAA,EAAEV,UAAU,CAAC;EAAC;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAO,CAAC;AACtC,CAAC;AAACC,GAAA,GA5BInB,UAAU;AA8BhB,eAAeA,UAAU;AAAC,IAAAR,EAAA,EAAAE,GAAA,EAAAK,GAAA,EAAAoB,GAAA;AAAAC,YAAA,CAAA5B,EAAA;AAAA4B,YAAA,CAAA1B,GAAA;AAAA0B,YAAA,CAAArB,GAAA;AAAAqB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}