{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleTile.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\n\n// Анимация переворота плитки\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst flip = keyframes`\n  0% {\n    transform: rotateX(0);\n  }\n  50% {\n    transform: rotateX(90deg);\n  }\n  100% {\n    transform: rotateX(0);\n  }\n`;\n\n// Анимация \"прыжка\" при вводе буквы\nconst bounce = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\n// Определяем цвета для различных состояний плитки\nconst getBackgroundColor = status => {\n  switch (status) {\n    case 'correct':\n      return 'var(--tile-correct-color, #6aaa64)';\n    case 'present':\n      return 'var(--tile-present-color, #c9b458)';\n    case 'absent':\n      return 'var(--tile-absent-color, #787c7e)';\n    case 'filled':\n      return 'transparent';\n    default:\n      return 'transparent';\n  }\n};\n\n// Определяем цвет текста для различных состояний плитки\nconst getTextColor = status => {\n  switch (status) {\n    case 'correct':\n    case 'present':\n    case 'absent':\n      return 'white';\n    default:\n      return 'var(--tg-theme-text-color, #000000)';\n  }\n};\n\n// Определяем цвет границы для различных состояний плитки\nconst getBorderColor = status => {\n  switch (status) {\n    case 'correct':\n    case 'present':\n    case 'absent':\n      return 'transparent';\n    case 'filled':\n      return 'var(--tg-theme-text-color, #000000)';\n    default:\n      return 'var(--tg-theme-hint-color, #cccccc)';\n  }\n};\n\n// Стили для плитки\nconst Tile = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 48px;\n  height: 48px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border: 2px solid ${props => getBorderColor(props.status)};\n  background-color: ${props => getBackgroundColor(props.status)};\n  color: ${props => getTextColor(props.status)};\n  transition: border-color 0.15s ease;\n  \n  ${props => props.status === 'filled' && css`\n    animation: ${bounce} 0.1s ease-in-out;\n  `}\n  \n  ${props => (props.status === 'correct' || props.status === 'present' || props.status === 'absent') && css`\n    animation: ${flip} 0.5s ease;\n  `}\n  \n  @media (max-width: 600px) {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n  }\n  \n  @media (max-width: 350px) {\n    width: 32px;\n    height: 32px;\n    font-size: 16px;\n  }\n`;\n\n// Инициализация CSS переменных для цветов плиток\n_c = Tile;\nconst initTileColors = () => {\n  if (typeof document !== 'undefined') {\n    // Устанавливаем цвета по умолчанию для плиток\n    document.documentElement.style.setProperty('--tile-correct-color', '#6aaa64');\n    document.documentElement.style.setProperty('--tile-present-color', '#c9b458');\n    document.documentElement.style.setProperty('--tile-absent-color', '#787c7e');\n  }\n};\n\n/**\n * Компонент плитки Wordle\n * @param {Object} props - Свойства компонента\n * @param {string} props.letter - Буква в плитке\n * @param {string} props.status - Статус плитки ('empty', 'filled', 'correct', 'present', 'absent')\n */\nconst WordleTile = ({\n  letter,\n  status = 'empty'\n}) => {\n  _s();\n  // Инициализация цветов при первом рендере\n  React.useEffect(() => {\n    initTileColors();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Tile, {\n    status: status,\n    children: letter\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 12\n  }, this);\n};\n_s(WordleTile, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c2 = WordleTile;\nexport default WordleTile;\nvar _c, _c2;\n$RefreshReg$(_c, \"Tile\");\n$RefreshReg$(_c2, \"WordleTile\");","map":{"version":3,"names":["React","styled","css","keyframes","jsxDEV","_jsxDEV","flip","bounce","getBackgroundColor","status","getTextColor","getBorderColor","Tile","div","props","_c","initTileColors","document","documentElement","style","setProperty","WordleTile","letter","_s","useEffect","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleTile.js"],"sourcesContent":["import React from 'react';\nimport styled, { css, keyframes } from 'styled-components';\n\n// Анимация переворота плитки\nconst flip = keyframes`\n  0% {\n    transform: rotateX(0);\n  }\n  50% {\n    transform: rotateX(90deg);\n  }\n  100% {\n    transform: rotateX(0);\n  }\n`;\n\n// Анимация \"прыжка\" при вводе буквы\nconst bounce = keyframes`\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n`;\n\n// Определяем цвета для различных состояний плитки\nconst getBackgroundColor = (status) => {\n    switch (status) {\n        case 'correct':\n            return 'var(--tile-correct-color, #6aaa64)';\n        case 'present':\n            return 'var(--tile-present-color, #c9b458)';\n        case 'absent':\n            return 'var(--tile-absent-color, #787c7e)';\n        case 'filled':\n            return 'transparent';\n        default:\n            return 'transparent';\n    }\n};\n\n// Определяем цвет текста для различных состояний плитки\nconst getTextColor = (status) => {\n    switch (status) {\n        case 'correct':\n        case 'present':\n        case 'absent':\n            return 'white';\n        default:\n            return 'var(--tg-theme-text-color, #000000)';\n    }\n};\n\n// Определяем цвет границы для различных состояний плитки\nconst getBorderColor = (status) => {\n    switch (status) {\n        case 'correct':\n        case 'present':\n        case 'absent':\n            return 'transparent';\n        case 'filled':\n            return 'var(--tg-theme-text-color, #000000)';\n        default:\n            return 'var(--tg-theme-hint-color, #cccccc)';\n    }\n};\n\n// Стили для плитки\nconst Tile = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 48px;\n  height: 48px;\n  font-size: 24px;\n  font-weight: bold;\n  text-transform: uppercase;\n  border: 2px solid ${props => getBorderColor(props.status)};\n  background-color: ${props => getBackgroundColor(props.status)};\n  color: ${props => getTextColor(props.status)};\n  transition: border-color 0.15s ease;\n  \n  ${props => props.status === 'filled' && css`\n    animation: ${bounce} 0.1s ease-in-out;\n  `}\n  \n  ${props => (props.status === 'correct' || props.status === 'present' || props.status === 'absent') && css`\n    animation: ${flip} 0.5s ease;\n  `}\n  \n  @media (max-width: 600px) {\n    width: 40px;\n    height: 40px;\n    font-size: 20px;\n  }\n  \n  @media (max-width: 350px) {\n    width: 32px;\n    height: 32px;\n    font-size: 16px;\n  }\n`;\n\n// Инициализация CSS переменных для цветов плиток\nconst initTileColors = () => {\n    if (typeof document !== 'undefined') {\n        // Устанавливаем цвета по умолчанию для плиток\n        document.documentElement.style.setProperty('--tile-correct-color', '#6aaa64');\n        document.documentElement.style.setProperty('--tile-present-color', '#c9b458');\n        document.documentElement.style.setProperty('--tile-absent-color', '#787c7e');\n    }\n};\n\n/**\n * Компонент плитки Wordle\n * @param {Object} props - Свойства компонента\n * @param {string} props.letter - Буква в плитке\n * @param {string} props.status - Статус плитки ('empty', 'filled', 'correct', 'present', 'absent')\n */\nconst WordleTile = ({ letter, status = 'empty' }) => {\n    // Инициализация цветов при первом рендере\n    React.useEffect(() => {\n        initTileColors();\n    }, []);\n\n    return <Tile status={status}>{letter}</Tile>;\n};\n\nexport default WordleTile; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}