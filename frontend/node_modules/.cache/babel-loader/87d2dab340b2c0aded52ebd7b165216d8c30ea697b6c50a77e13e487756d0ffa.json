{"ast":null,"code":"import axios from 'axios';\nimport { retrieveRawInitData } from '@telegram-apps/sdk';\n\n// API базовый URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.wordle.example.com/api/v1';\n\n// Создаем инстанс axios с базовыми настройками\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Добавляем интерцептор для авторизации\napi.interceptors.request.use(config => {\n  // Получаем токен из localStorage\n  const token = localStorage.getItem('token');\n\n  // Если токен есть, добавляем его в заголовок\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  } else {\n    // Иначе используем Telegram Mini App данные\n    const initDataRaw = retrieveRawInitData();\n    if (initDataRaw) {\n      config.headers.Authorization = `tma ${initDataRaw}`;\n    }\n  }\n  return config;\n});\n\n// API методы для авторизации\nexport const authAPI = {\n  // Инициализация через Telegram\n  telegramAuth: async () => {\n    const initDataRaw = retrieveRawInitData();\n    const response = await api.post('/auth/telegram', {\n      init_data: initDataRaw\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n    }\n    return response.data;\n  },\n  // Проверка токена\n  verifyAuth: async token => {\n    return api.post('/auth/verify', {\n      token\n    });\n  },\n  // Выход\n  logout: async () => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      await api.post('/auth/logout', {\n        token\n      });\n      localStorage.removeItem('token');\n    }\n  }\n};\n\n// API методы для пользователя\nexport const userAPI = {\n  // Получение текущего пользователя\n  getCurrentUser: async () => {\n    return api.get('/users/me');\n  },\n  // Получение баланса\n  getBalance: async () => {\n    return api.get('/users/balance');\n  },\n  // Запрос на вывод средств\n  requestWithdraw: async (amount, currency) => {\n    return api.post('/users/withdraw', {\n      amount,\n      currency\n    });\n  },\n  // История выводов\n  getWithdrawHistory: async () => {\n    return api.get('/users/withdrawals');\n  }\n};\n\n// API методы для игр\nexport const gameAPI = {\n  // Получение активных игр\n  getActiveGames: async () => {\n    return api.get('/games');\n  },\n  // Получение игры по ID\n  getGame: async id => {\n    return api.get(`/games/${id}`);\n  },\n  // Создание игры\n  createGame: async gameData => {\n    return api.post('/games', gameData);\n  },\n  // Получение игр пользователя\n  getUserGames: async () => {\n    return api.get('/games/my');\n  },\n  // Удаление игры\n  deleteGame: async id => {\n    return api.delete(`/games/${id}`);\n  },\n  // Поиск игр\n  searchGames: async params => {\n    return api.get('/games/search', {\n      params\n    });\n  },\n  // Пополнение reward pool\n  addToRewardPool: async (id, amount) => {\n    return api.post(`/games/${id}/reward`, {\n      amount\n    });\n  },\n  // Активация игры\n  activateGame: async id => {\n    return api.post(`/games/${id}/activate`);\n  },\n  // Деактивация игры\n  deactivateGame: async id => {\n    return api.post(`/games/${id}/deactivate`);\n  }\n};\n\n// API методы для лобби\nexport const lobbyAPI = {\n  // Присоединение к игре\n  joinGame: async (gameId, betAmount) => {\n    return api.post('/lobbies', {\n      game_id: gameId,\n      bet_amount: betAmount\n    });\n  },\n  // Получение лобби по ID\n  getLobby: async id => {\n    return api.get(`/lobbies/${id}`);\n  },\n  // Получение активного лобби\n  getActiveLobby: async () => {\n    return api.get('/lobbies/active');\n  },\n  // Получение всех лобби пользователя\n  getUserLobbies: async () => {\n    return api.get('/lobbies');\n  },\n  // Отправка попытки\n  makeAttempt: async (lobbyId, word) => {\n    return api.post(`/lobbies/${lobbyId}/attempt`, {\n      word\n    });\n  },\n  // Получение попыток\n  getAttempts: async lobbyId => {\n    return api.get(`/lobbies/${id}/attempts`);\n  },\n  // Продление времени лобби\n  extendLobbyTime: async lobbyId => {\n    return api.post(`/lobbies/${lobbyId}/extend`);\n  }\n};\n\n// API методы для транзакций\nexport const transactionAPI = {\n  // Получение транзакций пользователя\n  getUserTransactions: async () => {\n    return api.get('/transactions');\n  },\n  // Получение транзакции по ID\n  getTransaction: async id => {\n    return api.get(`/transactions/${id}`);\n  },\n  // Создание депозита\n  createDeposit: async (amount, currency) => {\n    return api.post('/transactions/deposit', {\n      amount,\n      currency\n    });\n  },\n  // Проверка депозита\n  verifyDeposit: async txHash => {\n    return api.post('/transactions/verify', {\n      tx_hash: txHash\n    });\n  },\n  // Получение статистики транзакций\n  getTransactionStats: async () => {\n    return api.get('/transactions/stats');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","retrieveRawInitData","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","initDataRaw","authAPI","telegramAuth","response","post","init_data","data","setItem","verifyAuth","logout","removeItem","userAPI","getCurrentUser","get","getBalance","requestWithdraw","amount","currency","getWithdrawHistory","gameAPI","getActiveGames","getGame","id","createGame","gameData","getUserGames","deleteGame","delete","searchGames","params","addToRewardPool","activateGame","deactivateGame","lobbyAPI","joinGame","gameId","betAmount","game_id","bet_amount","getLobby","getActiveLobby","getUserLobbies","makeAttempt","lobbyId","word","getAttempts","extendLobbyTime","transactionAPI","getUserTransactions","getTransaction","createDeposit","verifyDeposit","txHash","tx_hash","getTransactionStats"],"sources":["/Users/takuro/Projects/wordle/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios';\nimport { retrieveRawInitData } from '@telegram-apps/sdk';\n\n// API базовый URL\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'https://api.wordle.example.com/api/v1';\n\n// Создаем инстанс axios с базовыми настройками\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\n// Добавляем интерцептор для авторизации\napi.interceptors.request.use((config) => {\n    // Получаем токен из localStorage\n    const token = localStorage.getItem('token');\n\n    // Если токен есть, добавляем его в заголовок\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    } else {\n        // Иначе используем Telegram Mini App данные\n        const initDataRaw = retrieveRawInitData();\n        if (initDataRaw) {\n            config.headers.Authorization = `tma ${initDataRaw}`;\n        }\n    }\n\n    return config;\n});\n\n// API методы для авторизации\nexport const authAPI = {\n    // Инициализация через Telegram\n    telegramAuth: async () => {\n        const initDataRaw = retrieveRawInitData();\n        const response = await api.post('/auth/telegram', { init_data: initDataRaw });\n        if (response.data.token) {\n            localStorage.setItem('token', response.data.token);\n        }\n        return response.data;\n    },\n\n    // Проверка токена\n    verifyAuth: async (token) => {\n        return api.post('/auth/verify', { token });\n    },\n\n    // Выход\n    logout: async () => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            await api.post('/auth/logout', { token });\n            localStorage.removeItem('token');\n        }\n    }\n};\n\n// API методы для пользователя\nexport const userAPI = {\n    // Получение текущего пользователя\n    getCurrentUser: async () => {\n        return api.get('/users/me');\n    },\n\n    // Получение баланса\n    getBalance: async () => {\n        return api.get('/users/balance');\n    },\n\n    // Запрос на вывод средств\n    requestWithdraw: async (amount, currency) => {\n        return api.post('/users/withdraw', { amount, currency });\n    },\n\n    // История выводов\n    getWithdrawHistory: async () => {\n        return api.get('/users/withdrawals');\n    }\n};\n\n// API методы для игр\nexport const gameAPI = {\n    // Получение активных игр\n    getActiveGames: async () => {\n        return api.get('/games');\n    },\n\n    // Получение игры по ID\n    getGame: async (id) => {\n        return api.get(`/games/${id}`);\n    },\n\n    // Создание игры\n    createGame: async (gameData) => {\n        return api.post('/games', gameData);\n    },\n\n    // Получение игр пользователя\n    getUserGames: async () => {\n        return api.get('/games/my');\n    },\n\n    // Удаление игры\n    deleteGame: async (id) => {\n        return api.delete(`/games/${id}`);\n    },\n\n    // Поиск игр\n    searchGames: async (params) => {\n        return api.get('/games/search', { params });\n    },\n\n    // Пополнение reward pool\n    addToRewardPool: async (id, amount) => {\n        return api.post(`/games/${id}/reward`, { amount });\n    },\n\n    // Активация игры\n    activateGame: async (id) => {\n        return api.post(`/games/${id}/activate`);\n    },\n\n    // Деактивация игры\n    deactivateGame: async (id) => {\n        return api.post(`/games/${id}/deactivate`);\n    }\n};\n\n// API методы для лобби\nexport const lobbyAPI = {\n    // Присоединение к игре\n    joinGame: async (gameId, betAmount) => {\n        return api.post('/lobbies', { game_id: gameId, bet_amount: betAmount });\n    },\n\n    // Получение лобби по ID\n    getLobby: async (id) => {\n        return api.get(`/lobbies/${id}`);\n    },\n\n    // Получение активного лобби\n    getActiveLobby: async () => {\n        return api.get('/lobbies/active');\n    },\n\n    // Получение всех лобби пользователя\n    getUserLobbies: async () => {\n        return api.get('/lobbies');\n    },\n\n    // Отправка попытки\n    makeAttempt: async (lobbyId, word) => {\n        return api.post(`/lobbies/${lobbyId}/attempt`, { word });\n    },\n\n    // Получение попыток\n    getAttempts: async (lobbyId) => {\n        return api.get(`/lobbies/${id}/attempts`);\n    },\n\n    // Продление времени лобби\n    extendLobbyTime: async (lobbyId) => {\n        return api.post(`/lobbies/${lobbyId}/extend`);\n    }\n};\n\n// API методы для транзакций\nexport const transactionAPI = {\n    // Получение транзакций пользователя\n    getUserTransactions: async () => {\n        return api.get('/transactions');\n    },\n\n    // Получение транзакции по ID\n    getTransaction: async (id) => {\n        return api.get(`/transactions/${id}`);\n    },\n\n    // Создание депозита\n    createDeposit: async (amount, currency) => {\n        return api.post('/transactions/deposit', { amount, currency });\n    },\n\n    // Проверка депозита\n    verifyDeposit: async (txHash) => {\n        return api.post('/transactions/verify', { tx_hash: txHash });\n    },\n\n    // Получение статистики транзакций\n    getTransactionStats: async () => {\n        return api.get('/transactions/stats');\n    }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}