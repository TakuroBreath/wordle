{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен быть использован внутри AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const {\n    initData,\n    isReady,\n    user\n  } = useTelegram();\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Инициализация аутентификации при загрузке компонента\n  useEffect(() => {\n    const initAuth = async () => {\n      if (!isReady || !initData) {\n        console.log('Аутентификация не инициализирована:', {\n          isReady,\n          initData\n        });\n        return;\n      }\n      try {\n        var _response$data;\n        setLoading(true);\n        console.log('Начало аутентификации с данными:', initData);\n\n        // Аутентификация с использованием данных Telegram Mini App\n        const response = await api.auth.telegramAuth({\n          init_data: initData\n        });\n        console.log('Ответ сервера:', response.data);\n\n        // Сохраняем токен в localStorage и состояние\n        if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.token) {\n          localStorage.setItem('token', response.data.token);\n          setToken(response.data.token);\n\n          // Добавляем токен в заголовки API запросов\n          api.setAuthToken(response.data.token);\n\n          // Получаем данные текущего пользователя\n          const userResponse = await api.user.getCurrent();\n          console.log('Данные пользователя:', userResponse.data);\n          setCurrentUser(userResponse.data);\n        }\n      } catch (err) {\n        console.error('Ошибка аутентификации:', err);\n        setError(err.message || 'Ошибка аутентификации');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Для разработки - эмулируем пользователя без выполнения аутентификации\n    if (process.env.NODE_ENV === 'development' && !token && user && !initData) {\n      console.log('Режим разработки: эмуляция пользователя');\n      setCurrentUser({\n        telegram_id: user.id,\n        username: user.username,\n        first_name: user.first_name,\n        last_name: user.last_name,\n        balance_ton: 10.5,\n        balance_usdt: 25.0,\n        wins: 5,\n        losses: 2\n      });\n      setLoading(false);\n    } else {\n      initAuth();\n    }\n  }, [initData, isReady, user]);\n\n  // Проверка токена при загрузке приложения\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        var _response$data2;\n        setLoading(true);\n\n        // Добавляем токен в заголовки API запросов\n        api.setAuthToken(token);\n\n        // Проверяем валидность токена и получаем данные пользователя\n        const response = await api.auth.verifyToken({\n          token\n        });\n        if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.authenticated) {\n          setCurrentUser(response.data.user);\n        } else {\n          // Токен недействителен - удаляем из хранилища\n          localStorage.removeItem('token');\n          setToken(null);\n          api.setAuthToken(null);\n        }\n      } catch (err) {\n        console.error('Ошибка проверки токена:', err);\n        localStorage.removeItem('token');\n        setToken(null);\n        api.setAuthToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (process.env.NODE_ENV !== 'development' || token && !currentUser) {\n      verifyToken();\n    }\n  }, [token]);\n\n  // Функция выхода из аккаунта\n  const logout = async () => {\n    if (token) {\n      try {\n        await api.auth.logout({\n          token\n        });\n      } catch (err) {\n        console.error('Ошибка при выходе:', err);\n      }\n    }\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    api.setAuthToken(null);\n  };\n  const value = {\n    isAuthenticated: !!currentUser,\n    user: currentUser,\n    token,\n    loading,\n    error,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"q+mNohJVF611mVno9512kUMW/Ik=\", false, function () {\n  return [useTelegram];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useTelegram","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","initData","isReady","user","token","setToken","localStorage","getItem","currentUser","setCurrentUser","loading","setLoading","error","setError","initAuth","console","log","_response$data","response","auth","telegramAuth","init_data","data","setItem","setAuthToken","userResponse","getCurrent","err","message","process","env","NODE_ENV","telegram_id","id","username","first_name","last_name","balance_ton","balance_usdt","wins","losses","verifyToken","_response$data2","authenticated","removeItem","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth должен быть использован внутри AuthProvider');\n    }\n    return context;\n};\n\nexport function AuthProvider({ children }) {\n    const { initData, isReady, user } = useTelegram();\n    const [token, setToken] = useState(localStorage.getItem('token') || null);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Инициализация аутентификации при загрузке компонента\n    useEffect(() => {\n        const initAuth = async () => {\n            if (!isReady || !initData) {\n                console.log('Аутентификация не инициализирована:', { isReady, initData });\n                return;\n            }\n\n            try {\n                setLoading(true);\n                console.log('Начало аутентификации с данными:', initData);\n\n                // Аутентификация с использованием данных Telegram Mini App\n                const response = await api.auth.telegramAuth({ init_data: initData });\n                console.log('Ответ сервера:', response.data);\n\n                // Сохраняем токен в localStorage и состояние\n                if (response.data?.token) {\n                    localStorage.setItem('token', response.data.token);\n                    setToken(response.data.token);\n\n                    // Добавляем токен в заголовки API запросов\n                    api.setAuthToken(response.data.token);\n\n                    // Получаем данные текущего пользователя\n                    const userResponse = await api.user.getCurrent();\n                    console.log('Данные пользователя:', userResponse.data);\n                    setCurrentUser(userResponse.data);\n                }\n            } catch (err) {\n                console.error('Ошибка аутентификации:', err);\n                setError(err.message || 'Ошибка аутентификации');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        // Для разработки - эмулируем пользователя без выполнения аутентификации\n        if (process.env.NODE_ENV === 'development' && !token && user && !initData) {\n            console.log('Режим разработки: эмуляция пользователя');\n            setCurrentUser({\n                telegram_id: user.id,\n                username: user.username,\n                first_name: user.first_name,\n                last_name: user.last_name,\n                balance_ton: 10.5,\n                balance_usdt: 25.0,\n                wins: 5,\n                losses: 2\n            });\n            setLoading(false);\n        } else {\n            initAuth();\n        }\n    }, [initData, isReady, user]);\n\n    // Проверка токена при загрузке приложения\n    useEffect(() => {\n        const verifyToken = async () => {\n            if (!token) {\n                setLoading(false);\n                return;\n            }\n\n            try {\n                setLoading(true);\n\n                // Добавляем токен в заголовки API запросов\n                api.setAuthToken(token);\n\n                // Проверяем валидность токена и получаем данные пользователя\n                const response = await api.auth.verifyToken({ token });\n\n                if (response.data?.authenticated) {\n                    setCurrentUser(response.data.user);\n                } else {\n                    // Токен недействителен - удаляем из хранилища\n                    localStorage.removeItem('token');\n                    setToken(null);\n                    api.setAuthToken(null);\n                }\n            } catch (err) {\n                console.error('Ошибка проверки токена:', err);\n                localStorage.removeItem('token');\n                setToken(null);\n                api.setAuthToken(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (process.env.NODE_ENV !== 'development' || (token && !currentUser)) {\n            verifyToken();\n        }\n    }, [token]);\n\n    // Функция выхода из аккаунта\n    const logout = async () => {\n        if (token) {\n            try {\n                await api.auth.logout({ token });\n            } catch (err) {\n                console.error('Ошибка при выходе:', err);\n            }\n        }\n\n        localStorage.removeItem('token');\n        setToken(null);\n        setCurrentUser(null);\n        api.setAuthToken(null);\n    };\n\n    const value = {\n        isAuthenticated: !!currentUser,\n        user: currentUser,\n        token,\n        loading,\n        error,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}