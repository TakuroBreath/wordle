{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth должен быть использован внутри AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport function AuthProvider({\n  children\n}) {\n  _s2();\n  const {\n    initData,\n    isReady,\n    user\n  } = useTelegram();\n  const [token, setToken] = useState(localStorage.getItem('token') || null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Инициализация аутентификации при загрузке компонента\n  useEffect(() => {\n    const initAuth = async () => {\n      if (!isReady) {\n        console.log('Telegram WebApp не готов');\n        return;\n      }\n      if (!initData) {\n        console.log('Отсутствуют данные инициализации Telegram');\n        // В режиме разработки можно продолжить без initData\n        if (process.env.NODE_ENV === 'development' && user) {\n          console.log('Режим разработки: эмуляция пользователя без initData');\n          setCurrentUser({\n            telegram_id: user.id,\n            username: user.username,\n            first_name: user.first_name,\n            last_name: user.last_name,\n            balance_ton: 10.5,\n            balance_usdt: 25.0,\n            wins: 5,\n            losses: 2\n          });\n          setLoading(false);\n        }\n        return;\n      }\n      try {\n        setLoading(true);\n        console.log('Начало аутентификации с данными Telegram');\n\n        // Проверяем, есть ли уже токен в localStorage\n        const savedToken = localStorage.getItem('token');\n        if (savedToken) {\n          console.log('Найден сохраненный токен, проверяем его валидность...');\n          try {\n            // Устанавливаем токен в заголовки API запросов\n            api.setAuthToken(savedToken);\n\n            // Проверяем валидность токена, получая данные пользователя\n            const userResponse = await api.user.getCurrent();\n            console.log('Токен валиден, получены данные пользователя:', userResponse.data);\n            setCurrentUser(userResponse.data);\n            setToken(savedToken);\n            setLoading(false);\n            return;\n          } catch (tokenErr) {\n            console.error('Сохраненный токен недействителен:', tokenErr);\n            localStorage.removeItem('token');\n            api.setAuthToken(null);\n            // Продолжаем процесс аутентификации\n          }\n        }\n\n        // Аутентификация с использованием данных Telegram Mini App\n        console.log('Отправка запроса на аутентификацию с данными Telegram Mini App');\n        try {\n          var _response$data;\n          const response = await api.auth.telegramAuth({\n            init_data: initData\n          });\n          console.log('Ответ сервера при аутентификации:', response.data);\n\n          // Сохраняем токен в localStorage и состояние\n          if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.token) {\n            console.log('Получен токен авторизации');\n            localStorage.setItem('token', response.data.token);\n            setToken(response.data.token);\n\n            // Добавляем токен в заголовки API запросов\n            api.setAuthToken(response.data.token);\n            console.log('Токен установлен в заголовки API');\n\n            // Получаем данные текущего пользователя\n            try {\n              const userResponse = await api.user.getCurrent();\n              console.log('Данные пользователя:', userResponse.data);\n              setCurrentUser(userResponse.data);\n            } catch (userErr) {\n              console.error('Ошибка при получении данных пользователя:', userErr);\n              throw new Error('Не удалось получить данные пользователя');\n            }\n          } else {\n            console.error('Токен не получен в ответе сервера');\n            throw new Error('Токен не получен');\n          }\n        } catch (authErr) {\n          console.error('Ошибка при аутентификации через Telegram:', authErr);\n\n          // В режиме разработки можно эмулировать пользователя при ошибке аутентификации\n          if (process.env.NODE_ENV === 'development' && user) {\n            console.log('Режим разработки: эмуляция пользователя после ошибки аутентификации');\n            setCurrentUser({\n              telegram_id: user.id,\n              username: user.username,\n              first_name: user.first_name,\n              last_name: user.last_name,\n              balance_ton: 10.5,\n              balance_usdt: 25.0,\n              wins: 5,\n              losses: 2\n            });\n          } else {\n            throw authErr;\n          }\n        }\n      } catch (err) {\n        console.error('Ошибка аутентификации:', err);\n        setError(err.message || 'Ошибка аутентификации');\n        // Очищаем токен при ошибке\n        localStorage.removeItem('token');\n        setToken(null);\n        api.setAuthToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    // Вызываем инициализацию аутентификации\n    initAuth();\n  }, [initData, isReady, user]);\n\n  // Проверка токена при загрузке приложения\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!token) {\n        setLoading(false);\n        return;\n      }\n      try {\n        setLoading(true);\n        console.log('Проверка валидности токена:', token.substring(0, 15) + '...');\n\n        // Добавляем токен в заголовки API запросов\n        api.setAuthToken(token);\n\n        // Проверяем валидность токена и получаем данные пользователя\n        try {\n          // Сначала пробуем получить данные пользователя напрямую\n          console.log('Получение данных пользователя с текущим токеном...');\n          const userResponse = await api.user.getCurrent();\n          console.log('Данные пользователя получены:', userResponse.data);\n          setCurrentUser(userResponse.data);\n        } catch (userErr) {\n          var _response$data2;\n          console.error('Ошибка при получении данных пользователя:', userErr);\n\n          // Если не удалось получить данные пользователя, пробуем верифицировать токен\n          console.log('Попытка верификации токена через API...');\n          const response = await api.auth.verifyToken({\n            token\n          });\n          console.log('Результат верификации токена:', response.data);\n          if ((_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.authenticated) {\n            setCurrentUser(response.data.user);\n          } else {\n            console.error('Токен недействителен по данным API верификации');\n            throw new Error('Токен недействителен');\n          }\n        }\n      } catch (err) {\n        console.error('Ошибка проверки токена:', err);\n        localStorage.removeItem('token');\n        setToken(null);\n        setCurrentUser(null);\n        api.setAuthToken(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (process.env.NODE_ENV !== 'development' || token && !currentUser) {\n      verifyToken();\n    }\n  }, [token]);\n\n  // Функция выхода из аккаунта\n  const logout = async () => {\n    if (token) {\n      try {\n        await api.auth.logout({\n          token\n        });\n      } catch (err) {\n        console.error('Ошибка при выходе:', err);\n      }\n    }\n    localStorage.removeItem('token');\n    setToken(null);\n    setCurrentUser(null);\n    api.setAuthToken(null);\n  };\n  const value = {\n    isAuthenticated: !!currentUser,\n    user: currentUser,\n    token,\n    loading,\n    error,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"q+mNohJVF611mVno9512kUMW/Ik=\", false, function () {\n  return [useTelegram];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useTelegram","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","initData","isReady","user","token","setToken","localStorage","getItem","currentUser","setCurrentUser","loading","setLoading","error","setError","initAuth","console","log","process","env","NODE_ENV","telegram_id","id","username","first_name","last_name","balance_ton","balance_usdt","wins","losses","savedToken","setAuthToken","userResponse","getCurrent","data","tokenErr","removeItem","_response$data","response","auth","telegramAuth","init_data","setItem","userErr","authErr","err","message","verifyToken","substring","_response$data2","authenticated","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { useTelegram } from './TelegramContext';\nimport api from '../services/api';\n\nconst AuthContext = createContext(null);\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth должен быть использован внутри AuthProvider');\n    }\n    return context;\n};\n\nexport function AuthProvider({ children }) {\n    const { initData, isReady, user } = useTelegram();\n    const [token, setToken] = useState(localStorage.getItem('token') || null);\n    const [currentUser, setCurrentUser] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    // Инициализация аутентификации при загрузке компонента\n    useEffect(() => {\n        const initAuth = async () => {\n            if (!isReady) {\n                console.log('Telegram WebApp не готов');\n                return;\n            }\n\n            if (!initData) {\n                console.log('Отсутствуют данные инициализации Telegram');\n                // В режиме разработки можно продолжить без initData\n                if (process.env.NODE_ENV === 'development' && user) {\n                    console.log('Режим разработки: эмуляция пользователя без initData');\n                    setCurrentUser({\n                        telegram_id: user.id,\n                        username: user.username,\n                        first_name: user.first_name,\n                        last_name: user.last_name,\n                        balance_ton: 10.5,\n                        balance_usdt: 25.0,\n                        wins: 5,\n                        losses: 2\n                    });\n                    setLoading(false);\n                }\n                return;\n            }\n\n            try {\n                setLoading(true);\n                console.log('Начало аутентификации с данными Telegram');\n\n                // Проверяем, есть ли уже токен в localStorage\n                const savedToken = localStorage.getItem('token');\n                if (savedToken) {\n                    console.log('Найден сохраненный токен, проверяем его валидность...');\n                    try {\n                        // Устанавливаем токен в заголовки API запросов\n                        api.setAuthToken(savedToken);\n\n                        // Проверяем валидность токена, получая данные пользователя\n                        const userResponse = await api.user.getCurrent();\n                        console.log('Токен валиден, получены данные пользователя:', userResponse.data);\n                        setCurrentUser(userResponse.data);\n                        setToken(savedToken);\n                        setLoading(false);\n                        return;\n                    } catch (tokenErr) {\n                        console.error('Сохраненный токен недействителен:', tokenErr);\n                        localStorage.removeItem('token');\n                        api.setAuthToken(null);\n                        // Продолжаем процесс аутентификации\n                    }\n                }\n\n                // Аутентификация с использованием данных Telegram Mini App\n                console.log('Отправка запроса на аутентификацию с данными Telegram Mini App');\n                try {\n                    const response = await api.auth.telegramAuth({ init_data: initData });\n                    console.log('Ответ сервера при аутентификации:', response.data);\n\n                    // Сохраняем токен в localStorage и состояние\n                    if (response.data?.token) {\n                        console.log('Получен токен авторизации');\n                        localStorage.setItem('token', response.data.token);\n                        setToken(response.data.token);\n\n                        // Добавляем токен в заголовки API запросов\n                        api.setAuthToken(response.data.token);\n                        console.log('Токен установлен в заголовки API');\n\n                        // Получаем данные текущего пользователя\n                        try {\n                            const userResponse = await api.user.getCurrent();\n                            console.log('Данные пользователя:', userResponse.data);\n                            setCurrentUser(userResponse.data);\n                        } catch (userErr) {\n                            console.error('Ошибка при получении данных пользователя:', userErr);\n                            throw new Error('Не удалось получить данные пользователя');\n                        }\n                    } else {\n                        console.error('Токен не получен в ответе сервера');\n                        throw new Error('Токен не получен');\n                    }\n                } catch (authErr) {\n                    console.error('Ошибка при аутентификации через Telegram:', authErr);\n\n                    // В режиме разработки можно эмулировать пользователя при ошибке аутентификации\n                    if (process.env.NODE_ENV === 'development' && user) {\n                        console.log('Режим разработки: эмуляция пользователя после ошибки аутентификации');\n                        setCurrentUser({\n                            telegram_id: user.id,\n                            username: user.username,\n                            first_name: user.first_name,\n                            last_name: user.last_name,\n                            balance_ton: 10.5,\n                            balance_usdt: 25.0,\n                            wins: 5,\n                            losses: 2\n                        });\n                    } else {\n                        throw authErr;\n                    }\n                }\n            } catch (err) {\n                console.error('Ошибка аутентификации:', err);\n                setError(err.message || 'Ошибка аутентификации');\n                // Очищаем токен при ошибке\n                localStorage.removeItem('token');\n                setToken(null);\n                api.setAuthToken(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        // Вызываем инициализацию аутентификации\n        initAuth();\n    }, [initData, isReady, user]);\n\n    // Проверка токена при загрузке приложения\n    useEffect(() => {\n        const verifyToken = async () => {\n            if (!token) {\n                setLoading(false);\n                return;\n            }\n\n            try {\n                setLoading(true);\n                console.log('Проверка валидности токена:', token.substring(0, 15) + '...');\n\n                // Добавляем токен в заголовки API запросов\n                api.setAuthToken(token);\n\n                // Проверяем валидность токена и получаем данные пользователя\n                try {\n                    // Сначала пробуем получить данные пользователя напрямую\n                    console.log('Получение данных пользователя с текущим токеном...');\n                    const userResponse = await api.user.getCurrent();\n                    console.log('Данные пользователя получены:', userResponse.data);\n                    setCurrentUser(userResponse.data);\n                } catch (userErr) {\n                    console.error('Ошибка при получении данных пользователя:', userErr);\n\n                    // Если не удалось получить данные пользователя, пробуем верифицировать токен\n                    console.log('Попытка верификации токена через API...');\n                    const response = await api.auth.verifyToken({ token });\n                    console.log('Результат верификации токена:', response.data);\n\n                    if (response.data?.authenticated) {\n                        setCurrentUser(response.data.user);\n                    } else {\n                        console.error('Токен недействителен по данным API верификации');\n                        throw new Error('Токен недействителен');\n                    }\n                }\n            } catch (err) {\n                console.error('Ошибка проверки токена:', err);\n                localStorage.removeItem('token');\n                setToken(null);\n                setCurrentUser(null);\n                api.setAuthToken(null);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        if (process.env.NODE_ENV !== 'development' || (token && !currentUser)) {\n            verifyToken();\n        }\n    }, [token]);\n\n    // Функция выхода из аккаунта\n    const logout = async () => {\n        if (token) {\n            try {\n                await api.auth.logout({ token });\n            } catch (err) {\n                console.error('Ошибка при выходе:', err);\n            }\n        }\n\n        localStorage.removeItem('token');\n        setToken(null);\n        setCurrentUser(null);\n        api.setAuthToken(null);\n    };\n\n    const value = {\n        isAuthenticated: !!currentUser,\n        user: currentUser,\n        token,\n        loading,\n        error,\n        logout\n    };\n\n    return (\n        <AuthContext.Provider value={value}>\n            {children}\n        </AuthContext.Provider>\n    );\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}