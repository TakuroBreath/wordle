{"ast":null,"code":"var _jsxFileName = \"/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleBoard.js\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport WordleRow from './WordleRow';\n\n// Стили для игровой доски\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  gap: 6px;\n  margin-bottom: 24px;\n`;\n\n/**\n * Компонент игровой доски Wordle\n * @param {Object} props - Свойства компонента\n * @param {Array} props.attempts - Массив предыдущих попыток\n * @param {number} props.maxTries - Максимальное количество попыток\n * @param {number} props.wordLength - Длина загаданного слова\n * @param {string} props.currentAttempt - Текущая попытка (введенные буквы)\n */\n_c = Board;\nconst WordleBoard = ({\n  attempts = [],\n  maxTries = 6,\n  wordLength = 5,\n  currentAttempt = ''\n}) => {\n  // Создаем массив строк для отображения\n  const rows = [];\n\n  // Добавляем уже сделанные попытки\n  for (let i = 0; i < attempts.length; i++) {\n    rows.push(/*#__PURE__*/_jsxDEV(WordleRow, {\n      word: attempts[i].word,\n      result: attempts[i].result,\n      wordLength: wordLength\n    }, `attempt-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this));\n  }\n\n  // Добавляем текущую попытку, если игра не закончена\n  if (attempts.length < maxTries) {\n    rows.push(/*#__PURE__*/_jsxDEV(WordleRow, {\n      word: currentAttempt,\n      wordLength: wordLength,\n      isActive: true\n    }, \"current\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this));\n  }\n\n  // Добавляем пустые строки для будущих попыток\n  for (let i = rows.length; i < maxTries; i++) {\n    rows.push(/*#__PURE__*/_jsxDEV(WordleRow, {\n      wordLength: wordLength\n    }, `empty-${i}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(Board, {\n    children: rows\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 12\n  }, this);\n};\n_c2 = WordleBoard;\nexport default WordleBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"WordleBoard\");","map":{"version":3,"names":["React","styled","WordleRow","jsxDEV","_jsxDEV","Board","div","_c","WordleBoard","attempts","maxTries","wordLength","currentAttempt","rows","i","length","push","word","result","fileName","_jsxFileName","lineNumber","columnNumber","isActive","children","_c2","$RefreshReg$"],"sources":["/Users/takuro/Projects/wordle/frontend/src/components/WordleGame/WordleBoard.js"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport WordleRow from './WordleRow';\n\n// Стили для игровой доски\nconst Board = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  gap: 6px;\n  margin-bottom: 24px;\n`;\n\n/**\n * Компонент игровой доски Wordle\n * @param {Object} props - Свойства компонента\n * @param {Array} props.attempts - Массив предыдущих попыток\n * @param {number} props.maxTries - Максимальное количество попыток\n * @param {number} props.wordLength - Длина загаданного слова\n * @param {string} props.currentAttempt - Текущая попытка (введенные буквы)\n */\nconst WordleBoard = ({\n    attempts = [],\n    maxTries = 6,\n    wordLength = 5,\n    currentAttempt = ''\n}) => {\n    // Создаем массив строк для отображения\n    const rows = [];\n\n    // Добавляем уже сделанные попытки\n    for (let i = 0; i < attempts.length; i++) {\n        rows.push(\n            <WordleRow\n                key={`attempt-${i}`}\n                word={attempts[i].word}\n                result={attempts[i].result}\n                wordLength={wordLength}\n            />\n        );\n    }\n\n    // Добавляем текущую попытку, если игра не закончена\n    if (attempts.length < maxTries) {\n        rows.push(\n            <WordleRow\n                key=\"current\"\n                word={currentAttempt}\n                wordLength={wordLength}\n                isActive={true}\n            />\n        );\n    }\n\n    // Добавляем пустые строки для будущих попыток\n    for (let i = rows.length; i < maxTries; i++) {\n        rows.push(\n            <WordleRow\n                key={`empty-${i}`}\n                wordLength={wordLength}\n            />\n        );\n    }\n\n    return <Board>{rows}</Board>;\n};\n\nexport default WordleBoard; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,GAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPAC,EAAA,GATMF,KAAK;AAiBX,MAAMG,WAAW,GAAGA,CAAC;EACjBC,QAAQ,GAAG,EAAE;EACbC,QAAQ,GAAG,CAAC;EACZC,UAAU,GAAG,CAAC;EACdC,cAAc,GAAG;AACrB,CAAC,KAAK;EACF;EACA,MAAMC,IAAI,GAAG,EAAE;;EAEf;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,QAAQ,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;IACtCD,IAAI,CAACG,IAAI,cACLZ,OAAA,CAACF,SAAS;MAENe,IAAI,EAAER,QAAQ,CAACK,CAAC,CAAC,CAACG,IAAK;MACvBC,MAAM,EAAET,QAAQ,CAACK,CAAC,CAAC,CAACI,MAAO;MAC3BP,UAAU,EAAEA;IAAW,GAHlB,WAAWG,CAAC,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAItB,CACL,CAAC;EACL;;EAEA;EACA,IAAIb,QAAQ,CAACM,MAAM,GAAGL,QAAQ,EAAE;IAC5BG,IAAI,CAACG,IAAI,cACLZ,OAAA,CAACF,SAAS;MAENe,IAAI,EAAEL,cAAe;MACrBD,UAAU,EAAEA,UAAW;MACvBY,QAAQ,EAAE;IAAK,GAHX,SAAS;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAIhB,CACL,CAAC;EACL;;EAEA;EACA,KAAK,IAAIR,CAAC,GAAGD,IAAI,CAACE,MAAM,EAAED,CAAC,GAAGJ,QAAQ,EAAEI,CAAC,EAAE,EAAE;IACzCD,IAAI,CAACG,IAAI,cACLZ,OAAA,CAACF,SAAS;MAENS,UAAU,EAAEA;IAAW,GADlB,SAASG,CAAC,EAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEpB,CACL,CAAC;EACL;EAEA,oBAAOlB,OAAA,CAACC,KAAK;IAAAmB,QAAA,EAAEX;EAAI;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAChC,CAAC;AAACG,GAAA,GA5CIjB,WAAW;AA8CjB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}